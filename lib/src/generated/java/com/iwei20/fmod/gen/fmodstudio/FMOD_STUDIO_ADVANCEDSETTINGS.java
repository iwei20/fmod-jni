// Generated by jextract

package com.iwei20.fmod.gen.fmodstudio;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_STUDIO_ADVANCEDSETTINGS {
 *     int cbsize;
 *     unsigned int commandqueuesize;
 *     unsigned int handleinitialsize;
 *     int studioupdateperiod;
 *     int idlesampledatapoolsize;
 *     unsigned int streamingscheduledelay;
 *     const char *encryptionkey;
 * }
 * }
 */
public class FMOD_STUDIO_ADVANCEDSETTINGS {

    FMOD_STUDIO_ADVANCEDSETTINGS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_studio_h.C_INT.withName("cbsize"),
        fmod_studio_h.C_INT.withName("commandqueuesize"),
        fmod_studio_h.C_INT.withName("handleinitialsize"),
        fmod_studio_h.C_INT.withName("studioupdateperiod"),
        fmod_studio_h.C_INT.withName("idlesampledatapoolsize"),
        fmod_studio_h.C_INT.withName("streamingscheduledelay"),
        fmod_studio_h.C_POINTER.withName("encryptionkey")
    ).withName("FMOD_STUDIO_ADVANCEDSETTINGS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cbsize
     * }
     */
    public static final OfInt cbsize$layout() {
        return cbsize$LAYOUT;
    }

    private static final long cbsize$OFFSET = $LAYOUT.byteOffset(groupElement("cbsize"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cbsize
     * }
     */
    public static final long cbsize$offset() {
        return cbsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cbsize
     * }
     */
    public static int cbsize(MemorySegment struct) {
        return struct.get(cbsize$LAYOUT, cbsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cbsize
     * }
     */
    public static void cbsize(MemorySegment struct, int fieldValue) {
        struct.set(cbsize$LAYOUT, cbsize$OFFSET, fieldValue);
    }

    private static final OfInt commandqueuesize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("commandqueuesize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int commandqueuesize
     * }
     */
    public static final OfInt commandqueuesize$layout() {
        return commandqueuesize$LAYOUT;
    }

    private static final long commandqueuesize$OFFSET = $LAYOUT.byteOffset(groupElement("commandqueuesize"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int commandqueuesize
     * }
     */
    public static final long commandqueuesize$offset() {
        return commandqueuesize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int commandqueuesize
     * }
     */
    public static int commandqueuesize(MemorySegment struct) {
        return struct.get(commandqueuesize$LAYOUT, commandqueuesize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int commandqueuesize
     * }
     */
    public static void commandqueuesize(MemorySegment struct, int fieldValue) {
        struct.set(commandqueuesize$LAYOUT, commandqueuesize$OFFSET, fieldValue);
    }

    private static final OfInt handleinitialsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("handleinitialsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int handleinitialsize
     * }
     */
    public static final OfInt handleinitialsize$layout() {
        return handleinitialsize$LAYOUT;
    }

    private static final long handleinitialsize$OFFSET = $LAYOUT.byteOffset(groupElement("handleinitialsize"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int handleinitialsize
     * }
     */
    public static final long handleinitialsize$offset() {
        return handleinitialsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int handleinitialsize
     * }
     */
    public static int handleinitialsize(MemorySegment struct) {
        return struct.get(handleinitialsize$LAYOUT, handleinitialsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int handleinitialsize
     * }
     */
    public static void handleinitialsize(MemorySegment struct, int fieldValue) {
        struct.set(handleinitialsize$LAYOUT, handleinitialsize$OFFSET, fieldValue);
    }

    private static final OfInt studioupdateperiod$LAYOUT = (OfInt)$LAYOUT.select(groupElement("studioupdateperiod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int studioupdateperiod
     * }
     */
    public static final OfInt studioupdateperiod$layout() {
        return studioupdateperiod$LAYOUT;
    }

    private static final long studioupdateperiod$OFFSET = $LAYOUT.byteOffset(groupElement("studioupdateperiod"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int studioupdateperiod
     * }
     */
    public static final long studioupdateperiod$offset() {
        return studioupdateperiod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int studioupdateperiod
     * }
     */
    public static int studioupdateperiod(MemorySegment struct) {
        return struct.get(studioupdateperiod$LAYOUT, studioupdateperiod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int studioupdateperiod
     * }
     */
    public static void studioupdateperiod(MemorySegment struct, int fieldValue) {
        struct.set(studioupdateperiod$LAYOUT, studioupdateperiod$OFFSET, fieldValue);
    }

    private static final OfInt idlesampledatapoolsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("idlesampledatapoolsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int idlesampledatapoolsize
     * }
     */
    public static final OfInt idlesampledatapoolsize$layout() {
        return idlesampledatapoolsize$LAYOUT;
    }

    private static final long idlesampledatapoolsize$OFFSET = $LAYOUT.byteOffset(groupElement("idlesampledatapoolsize"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int idlesampledatapoolsize
     * }
     */
    public static final long idlesampledatapoolsize$offset() {
        return idlesampledatapoolsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int idlesampledatapoolsize
     * }
     */
    public static int idlesampledatapoolsize(MemorySegment struct) {
        return struct.get(idlesampledatapoolsize$LAYOUT, idlesampledatapoolsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int idlesampledatapoolsize
     * }
     */
    public static void idlesampledatapoolsize(MemorySegment struct, int fieldValue) {
        struct.set(idlesampledatapoolsize$LAYOUT, idlesampledatapoolsize$OFFSET, fieldValue);
    }

    private static final OfInt streamingscheduledelay$LAYOUT = (OfInt)$LAYOUT.select(groupElement("streamingscheduledelay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int streamingscheduledelay
     * }
     */
    public static final OfInt streamingscheduledelay$layout() {
        return streamingscheduledelay$LAYOUT;
    }

    private static final long streamingscheduledelay$OFFSET = $LAYOUT.byteOffset(groupElement("streamingscheduledelay"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int streamingscheduledelay
     * }
     */
    public static final long streamingscheduledelay$offset() {
        return streamingscheduledelay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int streamingscheduledelay
     * }
     */
    public static int streamingscheduledelay(MemorySegment struct) {
        return struct.get(streamingscheduledelay$LAYOUT, streamingscheduledelay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int streamingscheduledelay
     * }
     */
    public static void streamingscheduledelay(MemorySegment struct, int fieldValue) {
        struct.set(streamingscheduledelay$LAYOUT, streamingscheduledelay$OFFSET, fieldValue);
    }

    private static final AddressLayout encryptionkey$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("encryptionkey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *encryptionkey
     * }
     */
    public static final AddressLayout encryptionkey$layout() {
        return encryptionkey$LAYOUT;
    }

    private static final long encryptionkey$OFFSET = $LAYOUT.byteOffset(groupElement("encryptionkey"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *encryptionkey
     * }
     */
    public static final long encryptionkey$offset() {
        return encryptionkey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *encryptionkey
     * }
     */
    public static MemorySegment encryptionkey(MemorySegment struct) {
        return struct.get(encryptionkey$LAYOUT, encryptionkey$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *encryptionkey
     * }
     */
    public static void encryptionkey(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(encryptionkey$LAYOUT, encryptionkey$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

