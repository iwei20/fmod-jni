// Generated by jextract

package com.iwei20.fmod.gen.fmodstudio;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_OUTPUT_STATE {
 *     void *plugindata;
 *     FMOD_OUTPUT_READFROMMIXER_FUNC readfrommixer;
 *     FMOD_OUTPUT_ALLOC_FUNC alloc;
 *     FMOD_OUTPUT_FREE_FUNC free;
 *     FMOD_OUTPUT_LOG_FUNC log;
 *     FMOD_OUTPUT_COPYPORT_FUNC copyport;
 *     FMOD_OUTPUT_REQUESTRESET_FUNC requestreset;
 * }
 * }
 */
public class FMOD_OUTPUT_STATE {

    FMOD_OUTPUT_STATE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_studio_h.C_POINTER.withName("plugindata"),
        fmod_studio_h.C_POINTER.withName("readfrommixer"),
        fmod_studio_h.C_POINTER.withName("alloc"),
        fmod_studio_h.C_POINTER.withName("free"),
        MemoryLayout.paddingLayout(8),
        fmod_studio_h.C_POINTER.withName("copyport"),
        fmod_studio_h.C_POINTER.withName("requestreset")
    ).withName("FMOD_OUTPUT_STATE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout plugindata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("plugindata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *plugindata
     * }
     */
    public static final AddressLayout plugindata$layout() {
        return plugindata$LAYOUT;
    }

    private static final long plugindata$OFFSET = $LAYOUT.byteOffset(groupElement("plugindata"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *plugindata
     * }
     */
    public static final long plugindata$offset() {
        return plugindata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *plugindata
     * }
     */
    public static MemorySegment plugindata(MemorySegment struct) {
        return struct.get(plugindata$LAYOUT, plugindata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *plugindata
     * }
     */
    public static void plugindata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(plugindata$LAYOUT, plugindata$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_OUTPUT_READFROMMIXER_FUNC readfrommixer
     * }
     */
    public final static class readfrommixer {

        private readfrommixer() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(readfrommixer.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(readfrommixer.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout readfrommixer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("readfrommixer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_READFROMMIXER_FUNC readfrommixer
     * }
     */
    public static final AddressLayout readfrommixer$layout() {
        return readfrommixer$LAYOUT;
    }

    private static final long readfrommixer$OFFSET = $LAYOUT.byteOffset(groupElement("readfrommixer"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_READFROMMIXER_FUNC readfrommixer
     * }
     */
    public static final long readfrommixer$offset() {
        return readfrommixer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_READFROMMIXER_FUNC readfrommixer
     * }
     */
    public static MemorySegment readfrommixer(MemorySegment struct) {
        return struct.get(readfrommixer$LAYOUT, readfrommixer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_READFROMMIXER_FUNC readfrommixer
     * }
     */
    public static void readfrommixer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(readfrommixer$LAYOUT, readfrommixer$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_OUTPUT_ALLOC_FUNC alloc
     * }
     */
    public final static class alloc {

        private alloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(int _x0, int _x1, MemorySegment _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(alloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(alloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr, int _x0, int _x1, MemorySegment _x2, int _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout alloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_ALLOC_FUNC alloc
     * }
     */
    public static final AddressLayout alloc$layout() {
        return alloc$LAYOUT;
    }

    private static final long alloc$OFFSET = $LAYOUT.byteOffset(groupElement("alloc"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_ALLOC_FUNC alloc
     * }
     */
    public static final long alloc$offset() {
        return alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_ALLOC_FUNC alloc
     * }
     */
    public static MemorySegment alloc(MemorySegment struct) {
        return struct.get(alloc$LAYOUT, alloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_ALLOC_FUNC alloc
     * }
     */
    public static void alloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(alloc$LAYOUT, alloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_OUTPUT_FREE_FUNC free
     * }
     */
    public final static class free {

        private free() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(free.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(free.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_FREE_FUNC free
     * }
     */
    public static final AddressLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = $LAYOUT.byteOffset(groupElement("free"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_FREE_FUNC free
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_FREE_FUNC free
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.get(free$LAYOUT, free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_FREE_FUNC free
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_OUTPUT_COPYPORT_FUNC copyport
     * }
     */
    public final static class copyport {

        private copyport() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(copyport.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(copyport.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, MemorySegment _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout copyport$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("copyport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_COPYPORT_FUNC copyport
     * }
     */
    public static final AddressLayout copyport$layout() {
        return copyport$LAYOUT;
    }

    private static final long copyport$OFFSET = $LAYOUT.byteOffset(groupElement("copyport"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_COPYPORT_FUNC copyport
     * }
     */
    public static final long copyport$offset() {
        return copyport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_COPYPORT_FUNC copyport
     * }
     */
    public static MemorySegment copyport(MemorySegment struct) {
        return struct.get(copyport$LAYOUT, copyport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_COPYPORT_FUNC copyport
     * }
     */
    public static void copyport(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(copyport$LAYOUT, copyport$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_OUTPUT_REQUESTRESET_FUNC requestreset
     * }
     */
    public final static class requestreset {

        private requestreset() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(requestreset.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(requestreset.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout requestreset$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("requestreset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_REQUESTRESET_FUNC requestreset
     * }
     */
    public static final AddressLayout requestreset$layout() {
        return requestreset$LAYOUT;
    }

    private static final long requestreset$OFFSET = $LAYOUT.byteOffset(groupElement("requestreset"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_REQUESTRESET_FUNC requestreset
     * }
     */
    public static final long requestreset$offset() {
        return requestreset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_REQUESTRESET_FUNC requestreset
     * }
     */
    public static MemorySegment requestreset(MemorySegment struct) {
        return struct.get(requestreset$LAYOUT, requestreset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_OUTPUT_REQUESTRESET_FUNC requestreset
     * }
     */
    public static void requestreset(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(requestreset$LAYOUT, requestreset$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

