// Generated by jextract

package com.iwei20.fmod.gen.fmodstudio;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES {
 *     int bar;
 *     int beat;
 *     int position;
 *     float tempo;
 *     int timesignatureupper;
 *     int timesignaturelower;
 * }
 * }
 */
public class FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES {

    FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_studio_h.C_INT.withName("bar"),
        fmod_studio_h.C_INT.withName("beat"),
        fmod_studio_h.C_INT.withName("position"),
        fmod_studio_h.C_FLOAT.withName("tempo"),
        fmod_studio_h.C_INT.withName("timesignatureupper"),
        fmod_studio_h.C_INT.withName("timesignaturelower")
    ).withName("FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt bar$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bar
     * }
     */
    public static final OfInt bar$layout() {
        return bar$LAYOUT;
    }

    private static final long bar$OFFSET = $LAYOUT.byteOffset(groupElement("bar"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bar
     * }
     */
    public static final long bar$offset() {
        return bar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bar
     * }
     */
    public static int bar(MemorySegment struct) {
        return struct.get(bar$LAYOUT, bar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bar
     * }
     */
    public static void bar(MemorySegment struct, int fieldValue) {
        struct.set(bar$LAYOUT, bar$OFFSET, fieldValue);
    }

    private static final OfInt beat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("beat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int beat
     * }
     */
    public static final OfInt beat$layout() {
        return beat$LAYOUT;
    }

    private static final long beat$OFFSET = $LAYOUT.byteOffset(groupElement("beat"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int beat
     * }
     */
    public static final long beat$offset() {
        return beat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int beat
     * }
     */
    public static int beat(MemorySegment struct) {
        return struct.get(beat$LAYOUT, beat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int beat
     * }
     */
    public static void beat(MemorySegment struct, int fieldValue) {
        struct.set(beat$LAYOUT, beat$OFFSET, fieldValue);
    }

    private static final OfInt position$LAYOUT = (OfInt)$LAYOUT.select(groupElement("position"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int position
     * }
     */
    public static final OfInt position$layout() {
        return position$LAYOUT;
    }

    private static final long position$OFFSET = $LAYOUT.byteOffset(groupElement("position"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int position
     * }
     */
    public static final long position$offset() {
        return position$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int position
     * }
     */
    public static int position(MemorySegment struct) {
        return struct.get(position$LAYOUT, position$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int position
     * }
     */
    public static void position(MemorySegment struct, int fieldValue) {
        struct.set(position$LAYOUT, position$OFFSET, fieldValue);
    }

    private static final OfFloat tempo$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("tempo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float tempo
     * }
     */
    public static final OfFloat tempo$layout() {
        return tempo$LAYOUT;
    }

    private static final long tempo$OFFSET = $LAYOUT.byteOffset(groupElement("tempo"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float tempo
     * }
     */
    public static final long tempo$offset() {
        return tempo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float tempo
     * }
     */
    public static float tempo(MemorySegment struct) {
        return struct.get(tempo$LAYOUT, tempo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float tempo
     * }
     */
    public static void tempo(MemorySegment struct, float fieldValue) {
        struct.set(tempo$LAYOUT, tempo$OFFSET, fieldValue);
    }

    private static final OfInt timesignatureupper$LAYOUT = (OfInt)$LAYOUT.select(groupElement("timesignatureupper"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int timesignatureupper
     * }
     */
    public static final OfInt timesignatureupper$layout() {
        return timesignatureupper$LAYOUT;
    }

    private static final long timesignatureupper$OFFSET = $LAYOUT.byteOffset(groupElement("timesignatureupper"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int timesignatureupper
     * }
     */
    public static final long timesignatureupper$offset() {
        return timesignatureupper$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int timesignatureupper
     * }
     */
    public static int timesignatureupper(MemorySegment struct) {
        return struct.get(timesignatureupper$LAYOUT, timesignatureupper$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int timesignatureupper
     * }
     */
    public static void timesignatureupper(MemorySegment struct, int fieldValue) {
        struct.set(timesignatureupper$LAYOUT, timesignatureupper$OFFSET, fieldValue);
    }

    private static final OfInt timesignaturelower$LAYOUT = (OfInt)$LAYOUT.select(groupElement("timesignaturelower"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int timesignaturelower
     * }
     */
    public static final OfInt timesignaturelower$layout() {
        return timesignaturelower$LAYOUT;
    }

    private static final long timesignaturelower$OFFSET = $LAYOUT.byteOffset(groupElement("timesignaturelower"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int timesignaturelower
     * }
     */
    public static final long timesignaturelower$offset() {
        return timesignaturelower$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int timesignaturelower
     * }
     */
    public static int timesignaturelower(MemorySegment struct) {
        return struct.get(timesignaturelower$LAYOUT, timesignaturelower$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int timesignaturelower
     * }
     */
    public static void timesignaturelower(MemorySegment struct, int fieldValue) {
        struct.set(timesignaturelower$LAYOUT, timesignaturelower$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

