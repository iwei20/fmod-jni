// Generated by jextract

package com.iwei20.fmod.gen.fmodstudio;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_STUDIO_COMMAND_INFO {
 *     const char *commandname;
 *     int parentcommandindex;
 *     int framenumber;
 *     float frametime;
 *     FMOD_STUDIO_INSTANCETYPE instancetype;
 *     FMOD_STUDIO_INSTANCETYPE outputtype;
 *     unsigned int instancehandle;
 *     unsigned int outputhandle;
 * }
 * }
 */
public class FMOD_STUDIO_COMMAND_INFO {

    FMOD_STUDIO_COMMAND_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_studio_h.C_POINTER.withName("commandname"),
        fmod_studio_h.C_INT.withName("parentcommandindex"),
        fmod_studio_h.C_INT.withName("framenumber"),
        fmod_studio_h.C_FLOAT.withName("frametime"),
        fmod_studio_h.C_INT.withName("instancetype"),
        fmod_studio_h.C_INT.withName("outputtype"),
        fmod_studio_h.C_INT.withName("instancehandle"),
        fmod_studio_h.C_INT.withName("outputhandle"),
        MemoryLayout.paddingLayout(4)
    ).withName("FMOD_STUDIO_COMMAND_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout commandname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("commandname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *commandname
     * }
     */
    public static final AddressLayout commandname$layout() {
        return commandname$LAYOUT;
    }

    private static final long commandname$OFFSET = $LAYOUT.byteOffset(groupElement("commandname"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *commandname
     * }
     */
    public static final long commandname$offset() {
        return commandname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *commandname
     * }
     */
    public static MemorySegment commandname(MemorySegment struct) {
        return struct.get(commandname$LAYOUT, commandname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *commandname
     * }
     */
    public static void commandname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(commandname$LAYOUT, commandname$OFFSET, fieldValue);
    }

    private static final OfInt parentcommandindex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("parentcommandindex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int parentcommandindex
     * }
     */
    public static final OfInt parentcommandindex$layout() {
        return parentcommandindex$LAYOUT;
    }

    private static final long parentcommandindex$OFFSET = $LAYOUT.byteOffset(groupElement("parentcommandindex"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int parentcommandindex
     * }
     */
    public static final long parentcommandindex$offset() {
        return parentcommandindex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int parentcommandindex
     * }
     */
    public static int parentcommandindex(MemorySegment struct) {
        return struct.get(parentcommandindex$LAYOUT, parentcommandindex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int parentcommandindex
     * }
     */
    public static void parentcommandindex(MemorySegment struct, int fieldValue) {
        struct.set(parentcommandindex$LAYOUT, parentcommandindex$OFFSET, fieldValue);
    }

    private static final OfInt framenumber$LAYOUT = (OfInt)$LAYOUT.select(groupElement("framenumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int framenumber
     * }
     */
    public static final OfInt framenumber$layout() {
        return framenumber$LAYOUT;
    }

    private static final long framenumber$OFFSET = $LAYOUT.byteOffset(groupElement("framenumber"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int framenumber
     * }
     */
    public static final long framenumber$offset() {
        return framenumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int framenumber
     * }
     */
    public static int framenumber(MemorySegment struct) {
        return struct.get(framenumber$LAYOUT, framenumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int framenumber
     * }
     */
    public static void framenumber(MemorySegment struct, int fieldValue) {
        struct.set(framenumber$LAYOUT, framenumber$OFFSET, fieldValue);
    }

    private static final OfFloat frametime$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("frametime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float frametime
     * }
     */
    public static final OfFloat frametime$layout() {
        return frametime$LAYOUT;
    }

    private static final long frametime$OFFSET = $LAYOUT.byteOffset(groupElement("frametime"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float frametime
     * }
     */
    public static final long frametime$offset() {
        return frametime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float frametime
     * }
     */
    public static float frametime(MemorySegment struct) {
        return struct.get(frametime$LAYOUT, frametime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float frametime
     * }
     */
    public static void frametime(MemorySegment struct, float fieldValue) {
        struct.set(frametime$LAYOUT, frametime$OFFSET, fieldValue);
    }

    private static final OfInt instancetype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("instancetype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_INSTANCETYPE instancetype
     * }
     */
    public static final OfInt instancetype$layout() {
        return instancetype$LAYOUT;
    }

    private static final long instancetype$OFFSET = $LAYOUT.byteOffset(groupElement("instancetype"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_INSTANCETYPE instancetype
     * }
     */
    public static final long instancetype$offset() {
        return instancetype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_INSTANCETYPE instancetype
     * }
     */
    public static int instancetype(MemorySegment struct) {
        return struct.get(instancetype$LAYOUT, instancetype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_INSTANCETYPE instancetype
     * }
     */
    public static void instancetype(MemorySegment struct, int fieldValue) {
        struct.set(instancetype$LAYOUT, instancetype$OFFSET, fieldValue);
    }

    private static final OfInt outputtype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("outputtype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_INSTANCETYPE outputtype
     * }
     */
    public static final OfInt outputtype$layout() {
        return outputtype$LAYOUT;
    }

    private static final long outputtype$OFFSET = $LAYOUT.byteOffset(groupElement("outputtype"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_INSTANCETYPE outputtype
     * }
     */
    public static final long outputtype$offset() {
        return outputtype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_INSTANCETYPE outputtype
     * }
     */
    public static int outputtype(MemorySegment struct) {
        return struct.get(outputtype$LAYOUT, outputtype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_INSTANCETYPE outputtype
     * }
     */
    public static void outputtype(MemorySegment struct, int fieldValue) {
        struct.set(outputtype$LAYOUT, outputtype$OFFSET, fieldValue);
    }

    private static final OfInt instancehandle$LAYOUT = (OfInt)$LAYOUT.select(groupElement("instancehandle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int instancehandle
     * }
     */
    public static final OfInt instancehandle$layout() {
        return instancehandle$LAYOUT;
    }

    private static final long instancehandle$OFFSET = $LAYOUT.byteOffset(groupElement("instancehandle"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int instancehandle
     * }
     */
    public static final long instancehandle$offset() {
        return instancehandle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int instancehandle
     * }
     */
    public static int instancehandle(MemorySegment struct) {
        return struct.get(instancehandle$LAYOUT, instancehandle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int instancehandle
     * }
     */
    public static void instancehandle(MemorySegment struct, int fieldValue) {
        struct.set(instancehandle$LAYOUT, instancehandle$OFFSET, fieldValue);
    }

    private static final OfInt outputhandle$LAYOUT = (OfInt)$LAYOUT.select(groupElement("outputhandle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int outputhandle
     * }
     */
    public static final OfInt outputhandle$layout() {
        return outputhandle$LAYOUT;
    }

    private static final long outputhandle$OFFSET = $LAYOUT.byteOffset(groupElement("outputhandle"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int outputhandle
     * }
     */
    public static final long outputhandle$offset() {
        return outputhandle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int outputhandle
     * }
     */
    public static int outputhandle(MemorySegment struct) {
        return struct.get(outputhandle$LAYOUT, outputhandle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int outputhandle
     * }
     */
    public static void outputhandle(MemorySegment struct, int fieldValue) {
        struct.set(outputhandle$LAYOUT, outputhandle$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

