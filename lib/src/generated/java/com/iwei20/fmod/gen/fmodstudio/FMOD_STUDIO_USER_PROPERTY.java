// Generated by jextract

package com.iwei20.fmod.gen.fmodstudio;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_STUDIO_USER_PROPERTY {
 *     const char *name;
 *     FMOD_STUDIO_USER_PROPERTY_TYPE type;
 *     union {
 *         int intvalue;
 *         FMOD_BOOL boolvalue;
 *         float floatvalue;
 *         const char *stringvalue;
 *     };
 * }
 * }
 */
public class FMOD_STUDIO_USER_PROPERTY {

    FMOD_STUDIO_USER_PROPERTY() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_studio_h.C_POINTER.withName("name"),
        fmod_studio_h.C_INT.withName("type"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.unionLayout(
            fmod_studio_h.C_INT.withName("intvalue"),
            fmod_studio_h.C_INT.withName("boolvalue"),
            fmod_studio_h.C_FLOAT.withName("floatvalue"),
            fmod_studio_h.C_POINTER.withName("stringvalue")
        ).withName("union (anonymous at ./fmodstudioapi/c/fmod_studio_common.h:225:5)")
    ).withName("FMOD_STUDIO_USER_PROPERTY");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = $LAYOUT.byteOffset(groupElement("name"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_USER_PROPERTY_TYPE type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = $LAYOUT.byteOffset(groupElement("type"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_USER_PROPERTY_TYPE type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_USER_PROPERTY_TYPE type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_USER_PROPERTY_TYPE type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt intvalue$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$225:5"), groupElement("intvalue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int intvalue
     * }
     */
    public static final OfInt intvalue$layout() {
        return intvalue$LAYOUT;
    }

    private static final long intvalue$OFFSET = $LAYOUT.byteOffset(groupElement("$anon$225:5"), groupElement("intvalue"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int intvalue
     * }
     */
    public static final long intvalue$offset() {
        return intvalue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int intvalue
     * }
     */
    public static int intvalue(MemorySegment struct) {
        return struct.get(intvalue$LAYOUT, intvalue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int intvalue
     * }
     */
    public static void intvalue(MemorySegment struct, int fieldValue) {
        struct.set(intvalue$LAYOUT, intvalue$OFFSET, fieldValue);
    }

    private static final OfInt boolvalue$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$225:5"), groupElement("boolvalue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_BOOL boolvalue
     * }
     */
    public static final OfInt boolvalue$layout() {
        return boolvalue$LAYOUT;
    }

    private static final long boolvalue$OFFSET = $LAYOUT.byteOffset(groupElement("$anon$225:5"), groupElement("boolvalue"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_BOOL boolvalue
     * }
     */
    public static final long boolvalue$offset() {
        return boolvalue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_BOOL boolvalue
     * }
     */
    public static int boolvalue(MemorySegment struct) {
        return struct.get(boolvalue$LAYOUT, boolvalue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_BOOL boolvalue
     * }
     */
    public static void boolvalue(MemorySegment struct, int fieldValue) {
        struct.set(boolvalue$LAYOUT, boolvalue$OFFSET, fieldValue);
    }

    private static final OfFloat floatvalue$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("$anon$225:5"), groupElement("floatvalue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float floatvalue
     * }
     */
    public static final OfFloat floatvalue$layout() {
        return floatvalue$LAYOUT;
    }

    private static final long floatvalue$OFFSET = $LAYOUT.byteOffset(groupElement("$anon$225:5"), groupElement("floatvalue"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float floatvalue
     * }
     */
    public static final long floatvalue$offset() {
        return floatvalue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float floatvalue
     * }
     */
    public static float floatvalue(MemorySegment struct) {
        return struct.get(floatvalue$LAYOUT, floatvalue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float floatvalue
     * }
     */
    public static void floatvalue(MemorySegment struct, float fieldValue) {
        struct.set(floatvalue$LAYOUT, floatvalue$OFFSET, fieldValue);
    }

    private static final AddressLayout stringvalue$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$225:5"), groupElement("stringvalue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *stringvalue
     * }
     */
    public static final AddressLayout stringvalue$layout() {
        return stringvalue$LAYOUT;
    }

    private static final long stringvalue$OFFSET = $LAYOUT.byteOffset(groupElement("$anon$225:5"), groupElement("stringvalue"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *stringvalue
     * }
     */
    public static final long stringvalue$offset() {
        return stringvalue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *stringvalue
     * }
     */
    public static MemorySegment stringvalue(MemorySegment struct) {
        return struct.get(stringvalue$LAYOUT, stringvalue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *stringvalue
     * }
     */
    public static void stringvalue(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stringvalue$LAYOUT, stringvalue$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

