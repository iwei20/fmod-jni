// Generated by jextract

package com.iwei20.fmod.gen.fmod;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_CODEC_DESCRIPTION {
 *     unsigned int apiversion;
 *     const char *name;
 *     unsigned int version;
 *     int defaultasstream;
 *     FMOD_TIMEUNIT timeunits;
 *     FMOD_CODEC_OPEN_CALLBACK open;
 *     FMOD_CODEC_CLOSE_CALLBACK close;
 *     FMOD_CODEC_READ_CALLBACK read;
 *     FMOD_CODEC_GETLENGTH_CALLBACK getlength;
 *     FMOD_CODEC_SETPOSITION_CALLBACK setposition;
 *     FMOD_CODEC_GETPOSITION_CALLBACK getposition;
 *     FMOD_CODEC_SOUNDCREATE_CALLBACK soundcreate;
 *     FMOD_CODEC_GETWAVEFORMAT_CALLBACK getwaveformat;
 * }
 * }
 */
public class FMOD_CODEC_DESCRIPTION {

    FMOD_CODEC_DESCRIPTION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_h.C_INT.withName("apiversion"),
        MemoryLayout.paddingLayout(4),
        fmod_h.C_POINTER.withName("name"),
        fmod_h.C_INT.withName("version"),
        fmod_h.C_INT.withName("defaultasstream"),
        fmod_h.C_INT.withName("timeunits"),
        MemoryLayout.paddingLayout(4),
        fmod_h.C_POINTER.withName("open"),
        fmod_h.C_POINTER.withName("close"),
        fmod_h.C_POINTER.withName("read"),
        fmod_h.C_POINTER.withName("getlength"),
        fmod_h.C_POINTER.withName("setposition"),
        fmod_h.C_POINTER.withName("getposition"),
        fmod_h.C_POINTER.withName("soundcreate"),
        fmod_h.C_POINTER.withName("getwaveformat")
    ).withName("FMOD_CODEC_DESCRIPTION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt apiversion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("apiversion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int apiversion
     * }
     */
    public static final OfInt apiversion$layout() {
        return apiversion$LAYOUT;
    }

    private static final long apiversion$OFFSET = $LAYOUT.byteOffset(groupElement("apiversion"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int apiversion
     * }
     */
    public static final long apiversion$offset() {
        return apiversion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int apiversion
     * }
     */
    public static int apiversion(MemorySegment struct) {
        return struct.get(apiversion$LAYOUT, apiversion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int apiversion
     * }
     */
    public static void apiversion(MemorySegment struct, int fieldValue) {
        struct.set(apiversion$LAYOUT, apiversion$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = $LAYOUT.byteOffset(groupElement("name"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = $LAYOUT.byteOffset(groupElement("version"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt defaultasstream$LAYOUT = (OfInt)$LAYOUT.select(groupElement("defaultasstream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int defaultasstream
     * }
     */
    public static final OfInt defaultasstream$layout() {
        return defaultasstream$LAYOUT;
    }

    private static final long defaultasstream$OFFSET = $LAYOUT.byteOffset(groupElement("defaultasstream"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int defaultasstream
     * }
     */
    public static final long defaultasstream$offset() {
        return defaultasstream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int defaultasstream
     * }
     */
    public static int defaultasstream(MemorySegment struct) {
        return struct.get(defaultasstream$LAYOUT, defaultasstream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int defaultasstream
     * }
     */
    public static void defaultasstream(MemorySegment struct, int fieldValue) {
        struct.set(defaultasstream$LAYOUT, defaultasstream$OFFSET, fieldValue);
    }

    private static final OfInt timeunits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("timeunits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_TIMEUNIT timeunits
     * }
     */
    public static final OfInt timeunits$layout() {
        return timeunits$LAYOUT;
    }

    private static final long timeunits$OFFSET = $LAYOUT.byteOffset(groupElement("timeunits"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_TIMEUNIT timeunits
     * }
     */
    public static final long timeunits$offset() {
        return timeunits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_TIMEUNIT timeunits
     * }
     */
    public static int timeunits(MemorySegment struct) {
        return struct.get(timeunits$LAYOUT, timeunits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_TIMEUNIT timeunits
     * }
     */
    public static void timeunits(MemorySegment struct, int fieldValue) {
        struct.set(timeunits$LAYOUT, timeunits$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_CODEC_OPEN_CALLBACK open
     * }
     */
    public final static class open {

        private open() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_INT,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(open.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(open.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout open$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("open"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_OPEN_CALLBACK open
     * }
     */
    public static final AddressLayout open$layout() {
        return open$LAYOUT;
    }

    private static final long open$OFFSET = $LAYOUT.byteOffset(groupElement("open"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_OPEN_CALLBACK open
     * }
     */
    public static final long open$offset() {
        return open$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_OPEN_CALLBACK open
     * }
     */
    public static MemorySegment open(MemorySegment struct) {
        return struct.get(open$LAYOUT, open$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_OPEN_CALLBACK open
     * }
     */
    public static void open(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(open$LAYOUT, open$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_CODEC_CLOSE_CALLBACK close
     * }
     */
    public final static class close {

        private close() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(close.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(close.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout close$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("close"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_CLOSE_CALLBACK close
     * }
     */
    public static final AddressLayout close$layout() {
        return close$LAYOUT;
    }

    private static final long close$OFFSET = $LAYOUT.byteOffset(groupElement("close"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_CLOSE_CALLBACK close
     * }
     */
    public static final long close$offset() {
        return close$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_CLOSE_CALLBACK close
     * }
     */
    public static MemorySegment close(MemorySegment struct) {
        return struct.get(close$LAYOUT, close$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_CLOSE_CALLBACK close
     * }
     */
    public static void close(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(close$LAYOUT, close$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_CODEC_READ_CALLBACK read
     * }
     */
    public final static class read {

        private read() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER,
            fmod_h.C_INT,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(read.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_READ_CALLBACK read
     * }
     */
    public static final AddressLayout read$layout() {
        return read$LAYOUT;
    }

    private static final long read$OFFSET = $LAYOUT.byteOffset(groupElement("read"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_READ_CALLBACK read
     * }
     */
    public static final long read$offset() {
        return read$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_READ_CALLBACK read
     * }
     */
    public static MemorySegment read(MemorySegment struct) {
        return struct.get(read$LAYOUT, read$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_READ_CALLBACK read
     * }
     */
    public static void read(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read$LAYOUT, read$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_CODEC_GETLENGTH_CALLBACK getlength
     * }
     */
    public final static class getlength {

        private getlength() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER,
            fmod_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(getlength.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getlength.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getlength$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getlength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETLENGTH_CALLBACK getlength
     * }
     */
    public static final AddressLayout getlength$layout() {
        return getlength$LAYOUT;
    }

    private static final long getlength$OFFSET = $LAYOUT.byteOffset(groupElement("getlength"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETLENGTH_CALLBACK getlength
     * }
     */
    public static final long getlength$offset() {
        return getlength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETLENGTH_CALLBACK getlength
     * }
     */
    public static MemorySegment getlength(MemorySegment struct) {
        return struct.get(getlength$LAYOUT, getlength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETLENGTH_CALLBACK getlength
     * }
     */
    public static void getlength(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getlength$LAYOUT, getlength$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_CODEC_SETPOSITION_CALLBACK setposition
     * }
     */
    public final static class setposition {

        private setposition() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_INT,
            fmod_h.C_INT,
            fmod_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(setposition.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(setposition.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, int _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout setposition$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("setposition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_SETPOSITION_CALLBACK setposition
     * }
     */
    public static final AddressLayout setposition$layout() {
        return setposition$LAYOUT;
    }

    private static final long setposition$OFFSET = $LAYOUT.byteOffset(groupElement("setposition"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_SETPOSITION_CALLBACK setposition
     * }
     */
    public static final long setposition$offset() {
        return setposition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_SETPOSITION_CALLBACK setposition
     * }
     */
    public static MemorySegment setposition(MemorySegment struct) {
        return struct.get(setposition$LAYOUT, setposition$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_SETPOSITION_CALLBACK setposition
     * }
     */
    public static void setposition(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(setposition$LAYOUT, setposition$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_CODEC_GETPOSITION_CALLBACK getposition
     * }
     */
    public final static class getposition {

        private getposition() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER,
            fmod_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(getposition.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getposition.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getposition$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getposition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETPOSITION_CALLBACK getposition
     * }
     */
    public static final AddressLayout getposition$layout() {
        return getposition$LAYOUT;
    }

    private static final long getposition$OFFSET = $LAYOUT.byteOffset(groupElement("getposition"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETPOSITION_CALLBACK getposition
     * }
     */
    public static final long getposition$offset() {
        return getposition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETPOSITION_CALLBACK getposition
     * }
     */
    public static MemorySegment getposition(MemorySegment struct) {
        return struct.get(getposition$LAYOUT, getposition$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETPOSITION_CALLBACK getposition
     * }
     */
    public static void getposition(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getposition$LAYOUT, getposition$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_CODEC_SOUNDCREATE_CALLBACK soundcreate
     * }
     */
    public final static class soundcreate {

        private soundcreate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_INT,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(soundcreate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(soundcreate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout soundcreate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("soundcreate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_SOUNDCREATE_CALLBACK soundcreate
     * }
     */
    public static final AddressLayout soundcreate$layout() {
        return soundcreate$LAYOUT;
    }

    private static final long soundcreate$OFFSET = $LAYOUT.byteOffset(groupElement("soundcreate"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_SOUNDCREATE_CALLBACK soundcreate
     * }
     */
    public static final long soundcreate$offset() {
        return soundcreate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_SOUNDCREATE_CALLBACK soundcreate
     * }
     */
    public static MemorySegment soundcreate(MemorySegment struct) {
        return struct.get(soundcreate$LAYOUT, soundcreate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_SOUNDCREATE_CALLBACK soundcreate
     * }
     */
    public static void soundcreate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(soundcreate$LAYOUT, soundcreate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_CODEC_GETWAVEFORMAT_CALLBACK getwaveformat
     * }
     */
    public final static class getwaveformat {

        private getwaveformat() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_INT,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(getwaveformat.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getwaveformat.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getwaveformat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getwaveformat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETWAVEFORMAT_CALLBACK getwaveformat
     * }
     */
    public static final AddressLayout getwaveformat$layout() {
        return getwaveformat$LAYOUT;
    }

    private static final long getwaveformat$OFFSET = $LAYOUT.byteOffset(groupElement("getwaveformat"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETWAVEFORMAT_CALLBACK getwaveformat
     * }
     */
    public static final long getwaveformat$offset() {
        return getwaveformat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETWAVEFORMAT_CALLBACK getwaveformat
     * }
     */
    public static MemorySegment getwaveformat(MemorySegment struct) {
        return struct.get(getwaveformat$LAYOUT, getwaveformat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_GETWAVEFORMAT_CALLBACK getwaveformat
     * }
     */
    public static void getwaveformat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getwaveformat$LAYOUT, getwaveformat$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

