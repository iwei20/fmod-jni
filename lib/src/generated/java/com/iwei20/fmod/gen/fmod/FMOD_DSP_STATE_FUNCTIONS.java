// Generated by jextract

package com.iwei20.fmod.gen.fmod;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_DSP_STATE_FUNCTIONS {
 *     FMOD_DSP_ALLOC_FUNC alloc;
 *     FMOD_DSP_REALLOC_FUNC realloc;
 *     FMOD_DSP_FREE_FUNC free;
 *     FMOD_DSP_GETSAMPLERATE_FUNC getsamplerate;
 *     FMOD_DSP_GETBLOCKSIZE_FUNC getblocksize;
 *     FMOD_DSP_STATE_DFT_FUNCTIONS *dft;
 *     FMOD_DSP_STATE_PAN_FUNCTIONS *pan;
 *     FMOD_DSP_GETSPEAKERMODE_FUNC getspeakermode;
 *     FMOD_DSP_GETCLOCK_FUNC getclock;
 *     FMOD_DSP_GETLISTENERATTRIBUTES_FUNC getlistenerattributes;
 *     FMOD_DSP_LOG_FUNC log;
 *     FMOD_DSP_GETUSERDATA_FUNC getuserdata;
 * }
 * }
 */
public class FMOD_DSP_STATE_FUNCTIONS {

    FMOD_DSP_STATE_FUNCTIONS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_h.C_POINTER.withName("alloc"),
        fmod_h.C_POINTER.withName("realloc"),
        fmod_h.C_POINTER.withName("free"),
        fmod_h.C_POINTER.withName("getsamplerate"),
        fmod_h.C_POINTER.withName("getblocksize"),
        fmod_h.C_POINTER.withName("dft"),
        fmod_h.C_POINTER.withName("pan"),
        fmod_h.C_POINTER.withName("getspeakermode"),
        fmod_h.C_POINTER.withName("getclock"),
        fmod_h.C_POINTER.withName("getlistenerattributes"),
        MemoryLayout.paddingLayout(8),
        fmod_h.C_POINTER.withName("getuserdata")
    ).withName("FMOD_DSP_STATE_FUNCTIONS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_ALLOC_FUNC alloc
     * }
     */
    public final static class alloc {

        private alloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(int _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_POINTER,
            fmod_h.C_INT,
            fmod_h.C_INT,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(alloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(alloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr, int _x0, int _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout alloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_ALLOC_FUNC alloc
     * }
     */
    public static final AddressLayout alloc$layout() {
        return alloc$LAYOUT;
    }

    private static final long alloc$OFFSET = $LAYOUT.byteOffset(groupElement("alloc"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_ALLOC_FUNC alloc
     * }
     */
    public static final long alloc$offset() {
        return alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_ALLOC_FUNC alloc
     * }
     */
    public static MemorySegment alloc(MemorySegment struct) {
        return struct.get(alloc$LAYOUT, alloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_ALLOC_FUNC alloc
     * }
     */
    public static void alloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(alloc$LAYOUT, alloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_REALLOC_FUNC realloc
     * }
     */
    public final static class realloc {

        private realloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_POINTER,
            fmod_h.C_POINTER,
            fmod_h.C_INT,
            fmod_h.C_INT,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(realloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(realloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, int _x2, MemorySegment _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout realloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("realloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_REALLOC_FUNC realloc
     * }
     */
    public static final AddressLayout realloc$layout() {
        return realloc$LAYOUT;
    }

    private static final long realloc$OFFSET = $LAYOUT.byteOffset(groupElement("realloc"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_REALLOC_FUNC realloc
     * }
     */
    public static final long realloc$offset() {
        return realloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_REALLOC_FUNC realloc
     * }
     */
    public static MemorySegment realloc(MemorySegment struct) {
        return struct.get(realloc$LAYOUT, realloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_REALLOC_FUNC realloc
     * }
     */
    public static void realloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(realloc$LAYOUT, realloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_FREE_FUNC free
     * }
     */
    public final static class free {

        private free() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            fmod_h.C_POINTER,
            fmod_h.C_INT,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(free.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(free.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_FREE_FUNC free
     * }
     */
    public static final AddressLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = $LAYOUT.byteOffset(groupElement("free"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_FREE_FUNC free
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_FREE_FUNC free
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.get(free$LAYOUT, free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_FREE_FUNC free
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_GETSAMPLERATE_FUNC getsamplerate
     * }
     */
    public final static class getsamplerate {

        private getsamplerate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(getsamplerate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getsamplerate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getsamplerate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getsamplerate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETSAMPLERATE_FUNC getsamplerate
     * }
     */
    public static final AddressLayout getsamplerate$layout() {
        return getsamplerate$LAYOUT;
    }

    private static final long getsamplerate$OFFSET = $LAYOUT.byteOffset(groupElement("getsamplerate"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETSAMPLERATE_FUNC getsamplerate
     * }
     */
    public static final long getsamplerate$offset() {
        return getsamplerate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETSAMPLERATE_FUNC getsamplerate
     * }
     */
    public static MemorySegment getsamplerate(MemorySegment struct) {
        return struct.get(getsamplerate$LAYOUT, getsamplerate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETSAMPLERATE_FUNC getsamplerate
     * }
     */
    public static void getsamplerate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getsamplerate$LAYOUT, getsamplerate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_GETBLOCKSIZE_FUNC getblocksize
     * }
     */
    public final static class getblocksize {

        private getblocksize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(getblocksize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getblocksize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getblocksize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getblocksize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETBLOCKSIZE_FUNC getblocksize
     * }
     */
    public static final AddressLayout getblocksize$layout() {
        return getblocksize$LAYOUT;
    }

    private static final long getblocksize$OFFSET = $LAYOUT.byteOffset(groupElement("getblocksize"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETBLOCKSIZE_FUNC getblocksize
     * }
     */
    public static final long getblocksize$offset() {
        return getblocksize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETBLOCKSIZE_FUNC getblocksize
     * }
     */
    public static MemorySegment getblocksize(MemorySegment struct) {
        return struct.get(getblocksize$LAYOUT, getblocksize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETBLOCKSIZE_FUNC getblocksize
     * }
     */
    public static void getblocksize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getblocksize$LAYOUT, getblocksize$OFFSET, fieldValue);
    }

    private static final AddressLayout dft$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dft"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_STATE_DFT_FUNCTIONS *dft
     * }
     */
    public static final AddressLayout dft$layout() {
        return dft$LAYOUT;
    }

    private static final long dft$OFFSET = $LAYOUT.byteOffset(groupElement("dft"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_STATE_DFT_FUNCTIONS *dft
     * }
     */
    public static final long dft$offset() {
        return dft$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_STATE_DFT_FUNCTIONS *dft
     * }
     */
    public static MemorySegment dft(MemorySegment struct) {
        return struct.get(dft$LAYOUT, dft$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_STATE_DFT_FUNCTIONS *dft
     * }
     */
    public static void dft(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dft$LAYOUT, dft$OFFSET, fieldValue);
    }

    private static final AddressLayout pan$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pan"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_STATE_PAN_FUNCTIONS *pan
     * }
     */
    public static final AddressLayout pan$layout() {
        return pan$LAYOUT;
    }

    private static final long pan$OFFSET = $LAYOUT.byteOffset(groupElement("pan"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_STATE_PAN_FUNCTIONS *pan
     * }
     */
    public static final long pan$offset() {
        return pan$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_STATE_PAN_FUNCTIONS *pan
     * }
     */
    public static MemorySegment pan(MemorySegment struct) {
        return struct.get(pan$LAYOUT, pan$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_STATE_PAN_FUNCTIONS *pan
     * }
     */
    public static void pan(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pan$LAYOUT, pan$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_GETSPEAKERMODE_FUNC getspeakermode
     * }
     */
    public final static class getspeakermode {

        private getspeakermode() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(getspeakermode.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getspeakermode.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getspeakermode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getspeakermode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETSPEAKERMODE_FUNC getspeakermode
     * }
     */
    public static final AddressLayout getspeakermode$layout() {
        return getspeakermode$LAYOUT;
    }

    private static final long getspeakermode$OFFSET = $LAYOUT.byteOffset(groupElement("getspeakermode"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETSPEAKERMODE_FUNC getspeakermode
     * }
     */
    public static final long getspeakermode$offset() {
        return getspeakermode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETSPEAKERMODE_FUNC getspeakermode
     * }
     */
    public static MemorySegment getspeakermode(MemorySegment struct) {
        return struct.get(getspeakermode$LAYOUT, getspeakermode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETSPEAKERMODE_FUNC getspeakermode
     * }
     */
    public static void getspeakermode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getspeakermode$LAYOUT, getspeakermode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_GETCLOCK_FUNC getclock
     * }
     */
    public final static class getclock {

        private getclock() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(getclock.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getclock.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getclock$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getclock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETCLOCK_FUNC getclock
     * }
     */
    public static final AddressLayout getclock$layout() {
        return getclock$LAYOUT;
    }

    private static final long getclock$OFFSET = $LAYOUT.byteOffset(groupElement("getclock"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETCLOCK_FUNC getclock
     * }
     */
    public static final long getclock$offset() {
        return getclock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETCLOCK_FUNC getclock
     * }
     */
    public static MemorySegment getclock(MemorySegment struct) {
        return struct.get(getclock$LAYOUT, getclock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETCLOCK_FUNC getclock
     * }
     */
    public static void getclock(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getclock$LAYOUT, getclock$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_GETLISTENERATTRIBUTES_FUNC getlistenerattributes
     * }
     */
    public final static class getlistenerattributes {

        private getlistenerattributes() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(getlistenerattributes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getlistenerattributes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getlistenerattributes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getlistenerattributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETLISTENERATTRIBUTES_FUNC getlistenerattributes
     * }
     */
    public static final AddressLayout getlistenerattributes$layout() {
        return getlistenerattributes$LAYOUT;
    }

    private static final long getlistenerattributes$OFFSET = $LAYOUT.byteOffset(groupElement("getlistenerattributes"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETLISTENERATTRIBUTES_FUNC getlistenerattributes
     * }
     */
    public static final long getlistenerattributes$offset() {
        return getlistenerattributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETLISTENERATTRIBUTES_FUNC getlistenerattributes
     * }
     */
    public static MemorySegment getlistenerattributes(MemorySegment struct) {
        return struct.get(getlistenerattributes$LAYOUT, getlistenerattributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETLISTENERATTRIBUTES_FUNC getlistenerattributes
     * }
     */
    public static void getlistenerattributes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getlistenerattributes$LAYOUT, getlistenerattributes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_GETUSERDATA_FUNC getuserdata
     * }
     */
    public final static class getuserdata {

        private getuserdata() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_h.C_INT,
            fmod_h.C_POINTER,
            fmod_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(getuserdata.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getuserdata.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getuserdata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getuserdata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETUSERDATA_FUNC getuserdata
     * }
     */
    public static final AddressLayout getuserdata$layout() {
        return getuserdata$LAYOUT;
    }

    private static final long getuserdata$OFFSET = $LAYOUT.byteOffset(groupElement("getuserdata"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETUSERDATA_FUNC getuserdata
     * }
     */
    public static final long getuserdata$offset() {
        return getuserdata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETUSERDATA_FUNC getuserdata
     * }
     */
    public static MemorySegment getuserdata(MemorySegment struct) {
        return struct.get(getuserdata$LAYOUT, getuserdata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_GETUSERDATA_FUNC getuserdata
     * }
     */
    public static void getuserdata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getuserdata$LAYOUT, getuserdata$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

