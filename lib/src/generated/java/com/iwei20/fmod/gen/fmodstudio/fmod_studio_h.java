// Generated by jextract

package com.iwei20.fmod.gen.fmodstudio;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class fmod_studio_h extends fmod_studio_h_1 {

    fmod_studio_h() {
        // Should not be called directly
    }

    private static class FMOD_Sound_GetMusicNumChannels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Sound_GetMusicNumChannels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicNumChannels(FMOD_SOUND *sound, int *numchannels)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetMusicNumChannels$descriptor() {
        return FMOD_Sound_GetMusicNumChannels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicNumChannels(FMOD_SOUND *sound, int *numchannels)
     * }
     */
    public static MethodHandle FMOD_Sound_GetMusicNumChannels$handle() {
        return FMOD_Sound_GetMusicNumChannels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicNumChannels(FMOD_SOUND *sound, int *numchannels)
     * }
     */
    public static MemorySegment FMOD_Sound_GetMusicNumChannels$address() {
        return FMOD_Sound_GetMusicNumChannels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicNumChannels(FMOD_SOUND *sound, int *numchannels)
     * }
     */
    public static int FMOD_Sound_GetMusicNumChannels(MemorySegment sound, MemorySegment numchannels) {
        var mh$ = FMOD_Sound_GetMusicNumChannels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetMusicNumChannels", sound, numchannels);
            }
            return (int)mh$.invokeExact(sound, numchannels);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SetMusicChannelVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Sound_SetMusicChannelVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicChannelVolume(FMOD_SOUND *sound, int channel, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SetMusicChannelVolume$descriptor() {
        return FMOD_Sound_SetMusicChannelVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicChannelVolume(FMOD_SOUND *sound, int channel, float volume)
     * }
     */
    public static MethodHandle FMOD_Sound_SetMusicChannelVolume$handle() {
        return FMOD_Sound_SetMusicChannelVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicChannelVolume(FMOD_SOUND *sound, int channel, float volume)
     * }
     */
    public static MemorySegment FMOD_Sound_SetMusicChannelVolume$address() {
        return FMOD_Sound_SetMusicChannelVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicChannelVolume(FMOD_SOUND *sound, int channel, float volume)
     * }
     */
    public static int FMOD_Sound_SetMusicChannelVolume(MemorySegment sound, int channel, float volume) {
        var mh$ = FMOD_Sound_SetMusicChannelVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SetMusicChannelVolume", sound, channel, volume);
            }
            return (int)mh$.invokeExact(sound, channel, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetMusicChannelVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Sound_GetMusicChannelVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicChannelVolume(FMOD_SOUND *sound, int channel, float *volume)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetMusicChannelVolume$descriptor() {
        return FMOD_Sound_GetMusicChannelVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicChannelVolume(FMOD_SOUND *sound, int channel, float *volume)
     * }
     */
    public static MethodHandle FMOD_Sound_GetMusicChannelVolume$handle() {
        return FMOD_Sound_GetMusicChannelVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicChannelVolume(FMOD_SOUND *sound, int channel, float *volume)
     * }
     */
    public static MemorySegment FMOD_Sound_GetMusicChannelVolume$address() {
        return FMOD_Sound_GetMusicChannelVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicChannelVolume(FMOD_SOUND *sound, int channel, float *volume)
     * }
     */
    public static int FMOD_Sound_GetMusicChannelVolume(MemorySegment sound, int channel, MemorySegment volume) {
        var mh$ = FMOD_Sound_GetMusicChannelVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetMusicChannelVolume", sound, channel, volume);
            }
            return (int)mh$.invokeExact(sound, channel, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SetMusicSpeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Sound_SetMusicSpeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicSpeed(FMOD_SOUND *sound, float speed)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SetMusicSpeed$descriptor() {
        return FMOD_Sound_SetMusicSpeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicSpeed(FMOD_SOUND *sound, float speed)
     * }
     */
    public static MethodHandle FMOD_Sound_SetMusicSpeed$handle() {
        return FMOD_Sound_SetMusicSpeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicSpeed(FMOD_SOUND *sound, float speed)
     * }
     */
    public static MemorySegment FMOD_Sound_SetMusicSpeed$address() {
        return FMOD_Sound_SetMusicSpeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicSpeed(FMOD_SOUND *sound, float speed)
     * }
     */
    public static int FMOD_Sound_SetMusicSpeed(MemorySegment sound, float speed) {
        var mh$ = FMOD_Sound_SetMusicSpeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SetMusicSpeed", sound, speed);
            }
            return (int)mh$.invokeExact(sound, speed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetMusicSpeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Sound_GetMusicSpeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicSpeed(FMOD_SOUND *sound, float *speed)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetMusicSpeed$descriptor() {
        return FMOD_Sound_GetMusicSpeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicSpeed(FMOD_SOUND *sound, float *speed)
     * }
     */
    public static MethodHandle FMOD_Sound_GetMusicSpeed$handle() {
        return FMOD_Sound_GetMusicSpeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicSpeed(FMOD_SOUND *sound, float *speed)
     * }
     */
    public static MemorySegment FMOD_Sound_GetMusicSpeed$address() {
        return FMOD_Sound_GetMusicSpeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicSpeed(FMOD_SOUND *sound, float *speed)
     * }
     */
    public static int FMOD_Sound_GetMusicSpeed(MemorySegment sound, MemorySegment speed) {
        var mh$ = FMOD_Sound_GetMusicSpeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetMusicSpeed", sound, speed);
            }
            return (int)mh$.invokeExact(sound, speed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Sound_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetUserData(FMOD_SOUND *sound, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SetUserData$descriptor() {
        return FMOD_Sound_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetUserData(FMOD_SOUND *sound, void *userdata)
     * }
     */
    public static MethodHandle FMOD_Sound_SetUserData$handle() {
        return FMOD_Sound_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetUserData(FMOD_SOUND *sound, void *userdata)
     * }
     */
    public static MemorySegment FMOD_Sound_SetUserData$address() {
        return FMOD_Sound_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetUserData(FMOD_SOUND *sound, void *userdata)
     * }
     */
    public static int FMOD_Sound_SetUserData(MemorySegment sound, MemorySegment userdata) {
        var mh$ = FMOD_Sound_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SetUserData", sound, userdata);
            }
            return (int)mh$.invokeExact(sound, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Sound_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetUserData(FMOD_SOUND *sound, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetUserData$descriptor() {
        return FMOD_Sound_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetUserData(FMOD_SOUND *sound, void **userdata)
     * }
     */
    public static MethodHandle FMOD_Sound_GetUserData$handle() {
        return FMOD_Sound_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetUserData(FMOD_SOUND *sound, void **userdata)
     * }
     */
    public static MemorySegment FMOD_Sound_GetUserData$address() {
        return FMOD_Sound_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetUserData(FMOD_SOUND *sound, void **userdata)
     * }
     */
    public static int FMOD_Sound_GetUserData(MemorySegment sound, MemorySegment userdata) {
        var mh$ = FMOD_Sound_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetUserData", sound, userdata);
            }
            return (int)mh$.invokeExact(sound, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetSystemObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetSystemObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetSystemObject(FMOD_CHANNEL *channel, FMOD_SYSTEM **system)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetSystemObject$descriptor() {
        return FMOD_Channel_GetSystemObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetSystemObject(FMOD_CHANNEL *channel, FMOD_SYSTEM **system)
     * }
     */
    public static MethodHandle FMOD_Channel_GetSystemObject$handle() {
        return FMOD_Channel_GetSystemObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetSystemObject(FMOD_CHANNEL *channel, FMOD_SYSTEM **system)
     * }
     */
    public static MemorySegment FMOD_Channel_GetSystemObject$address() {
        return FMOD_Channel_GetSystemObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetSystemObject(FMOD_CHANNEL *channel, FMOD_SYSTEM **system)
     * }
     */
    public static int FMOD_Channel_GetSystemObject(MemorySegment channel, MemorySegment system) {
        var mh$ = FMOD_Channel_GetSystemObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetSystemObject", channel, system);
            }
            return (int)mh$.invokeExact(channel, system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Stop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Stop(FMOD_CHANNEL *channel)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Stop$descriptor() {
        return FMOD_Channel_Stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Stop(FMOD_CHANNEL *channel)
     * }
     */
    public static MethodHandle FMOD_Channel_Stop$handle() {
        return FMOD_Channel_Stop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Stop(FMOD_CHANNEL *channel)
     * }
     */
    public static MemorySegment FMOD_Channel_Stop$address() {
        return FMOD_Channel_Stop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Stop(FMOD_CHANNEL *channel)
     * }
     */
    public static int FMOD_Channel_Stop(MemorySegment channel) {
        var mh$ = FMOD_Channel_Stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Stop", channel);
            }
            return (int)mh$.invokeExact(channel);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPaused(FMOD_CHANNEL *channel, FMOD_BOOL paused)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetPaused$descriptor() {
        return FMOD_Channel_SetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPaused(FMOD_CHANNEL *channel, FMOD_BOOL paused)
     * }
     */
    public static MethodHandle FMOD_Channel_SetPaused$handle() {
        return FMOD_Channel_SetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPaused(FMOD_CHANNEL *channel, FMOD_BOOL paused)
     * }
     */
    public static MemorySegment FMOD_Channel_SetPaused$address() {
        return FMOD_Channel_SetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPaused(FMOD_CHANNEL *channel, FMOD_BOOL paused)
     * }
     */
    public static int FMOD_Channel_SetPaused(MemorySegment channel, int paused) {
        var mh$ = FMOD_Channel_SetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetPaused", channel, paused);
            }
            return (int)mh$.invokeExact(channel, paused);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPaused(FMOD_CHANNEL *channel, FMOD_BOOL *paused)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetPaused$descriptor() {
        return FMOD_Channel_GetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPaused(FMOD_CHANNEL *channel, FMOD_BOOL *paused)
     * }
     */
    public static MethodHandle FMOD_Channel_GetPaused$handle() {
        return FMOD_Channel_GetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPaused(FMOD_CHANNEL *channel, FMOD_BOOL *paused)
     * }
     */
    public static MemorySegment FMOD_Channel_GetPaused$address() {
        return FMOD_Channel_GetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPaused(FMOD_CHANNEL *channel, FMOD_BOOL *paused)
     * }
     */
    public static int FMOD_Channel_GetPaused(MemorySegment channel, MemorySegment paused) {
        var mh$ = FMOD_Channel_GetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetPaused", channel, paused);
            }
            return (int)mh$.invokeExact(channel, paused);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolume(FMOD_CHANNEL *channel, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetVolume$descriptor() {
        return FMOD_Channel_SetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolume(FMOD_CHANNEL *channel, float volume)
     * }
     */
    public static MethodHandle FMOD_Channel_SetVolume$handle() {
        return FMOD_Channel_SetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolume(FMOD_CHANNEL *channel, float volume)
     * }
     */
    public static MemorySegment FMOD_Channel_SetVolume$address() {
        return FMOD_Channel_SetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolume(FMOD_CHANNEL *channel, float volume)
     * }
     */
    public static int FMOD_Channel_SetVolume(MemorySegment channel, float volume) {
        var mh$ = FMOD_Channel_SetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetVolume", channel, volume);
            }
            return (int)mh$.invokeExact(channel, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolume(FMOD_CHANNEL *channel, float *volume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetVolume$descriptor() {
        return FMOD_Channel_GetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolume(FMOD_CHANNEL *channel, float *volume)
     * }
     */
    public static MethodHandle FMOD_Channel_GetVolume$handle() {
        return FMOD_Channel_GetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolume(FMOD_CHANNEL *channel, float *volume)
     * }
     */
    public static MemorySegment FMOD_Channel_GetVolume$address() {
        return FMOD_Channel_GetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolume(FMOD_CHANNEL *channel, float *volume)
     * }
     */
    public static int FMOD_Channel_GetVolume(MemorySegment channel, MemorySegment volume) {
        var mh$ = FMOD_Channel_GetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetVolume", channel, volume);
            }
            return (int)mh$.invokeExact(channel, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetVolumeRamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetVolumeRamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL ramp)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetVolumeRamp$descriptor() {
        return FMOD_Channel_SetVolumeRamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL ramp)
     * }
     */
    public static MethodHandle FMOD_Channel_SetVolumeRamp$handle() {
        return FMOD_Channel_SetVolumeRamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL ramp)
     * }
     */
    public static MemorySegment FMOD_Channel_SetVolumeRamp$address() {
        return FMOD_Channel_SetVolumeRamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL ramp)
     * }
     */
    public static int FMOD_Channel_SetVolumeRamp(MemorySegment channel, int ramp) {
        var mh$ = FMOD_Channel_SetVolumeRamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetVolumeRamp", channel, ramp);
            }
            return (int)mh$.invokeExact(channel, ramp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetVolumeRamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetVolumeRamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL *ramp)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetVolumeRamp$descriptor() {
        return FMOD_Channel_GetVolumeRamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL *ramp)
     * }
     */
    public static MethodHandle FMOD_Channel_GetVolumeRamp$handle() {
        return FMOD_Channel_GetVolumeRamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL *ramp)
     * }
     */
    public static MemorySegment FMOD_Channel_GetVolumeRamp$address() {
        return FMOD_Channel_GetVolumeRamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL *ramp)
     * }
     */
    public static int FMOD_Channel_GetVolumeRamp(MemorySegment channel, MemorySegment ramp) {
        var mh$ = FMOD_Channel_GetVolumeRamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetVolumeRamp", channel, ramp);
            }
            return (int)mh$.invokeExact(channel, ramp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetAudibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetAudibility");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetAudibility(FMOD_CHANNEL *channel, float *audibility)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetAudibility$descriptor() {
        return FMOD_Channel_GetAudibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetAudibility(FMOD_CHANNEL *channel, float *audibility)
     * }
     */
    public static MethodHandle FMOD_Channel_GetAudibility$handle() {
        return FMOD_Channel_GetAudibility.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetAudibility(FMOD_CHANNEL *channel, float *audibility)
     * }
     */
    public static MemorySegment FMOD_Channel_GetAudibility$address() {
        return FMOD_Channel_GetAudibility.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetAudibility(FMOD_CHANNEL *channel, float *audibility)
     * }
     */
    public static int FMOD_Channel_GetAudibility(MemorySegment channel, MemorySegment audibility) {
        var mh$ = FMOD_Channel_GetAudibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetAudibility", channel, audibility);
            }
            return (int)mh$.invokeExact(channel, audibility);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetPitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPitch(FMOD_CHANNEL *channel, float pitch)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetPitch$descriptor() {
        return FMOD_Channel_SetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPitch(FMOD_CHANNEL *channel, float pitch)
     * }
     */
    public static MethodHandle FMOD_Channel_SetPitch$handle() {
        return FMOD_Channel_SetPitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPitch(FMOD_CHANNEL *channel, float pitch)
     * }
     */
    public static MemorySegment FMOD_Channel_SetPitch$address() {
        return FMOD_Channel_SetPitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPitch(FMOD_CHANNEL *channel, float pitch)
     * }
     */
    public static int FMOD_Channel_SetPitch(MemorySegment channel, float pitch) {
        var mh$ = FMOD_Channel_SetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetPitch", channel, pitch);
            }
            return (int)mh$.invokeExact(channel, pitch);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetPitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPitch(FMOD_CHANNEL *channel, float *pitch)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetPitch$descriptor() {
        return FMOD_Channel_GetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPitch(FMOD_CHANNEL *channel, float *pitch)
     * }
     */
    public static MethodHandle FMOD_Channel_GetPitch$handle() {
        return FMOD_Channel_GetPitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPitch(FMOD_CHANNEL *channel, float *pitch)
     * }
     */
    public static MemorySegment FMOD_Channel_GetPitch$address() {
        return FMOD_Channel_GetPitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPitch(FMOD_CHANNEL *channel, float *pitch)
     * }
     */
    public static int FMOD_Channel_GetPitch(MemorySegment channel, MemorySegment pitch) {
        var mh$ = FMOD_Channel_GetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetPitch", channel, pitch);
            }
            return (int)mh$.invokeExact(channel, pitch);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetMute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetMute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMute(FMOD_CHANNEL *channel, FMOD_BOOL mute)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetMute$descriptor() {
        return FMOD_Channel_SetMute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMute(FMOD_CHANNEL *channel, FMOD_BOOL mute)
     * }
     */
    public static MethodHandle FMOD_Channel_SetMute$handle() {
        return FMOD_Channel_SetMute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMute(FMOD_CHANNEL *channel, FMOD_BOOL mute)
     * }
     */
    public static MemorySegment FMOD_Channel_SetMute$address() {
        return FMOD_Channel_SetMute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMute(FMOD_CHANNEL *channel, FMOD_BOOL mute)
     * }
     */
    public static int FMOD_Channel_SetMute(MemorySegment channel, int mute) {
        var mh$ = FMOD_Channel_SetMute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetMute", channel, mute);
            }
            return (int)mh$.invokeExact(channel, mute);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetMute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetMute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMute(FMOD_CHANNEL *channel, FMOD_BOOL *mute)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetMute$descriptor() {
        return FMOD_Channel_GetMute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMute(FMOD_CHANNEL *channel, FMOD_BOOL *mute)
     * }
     */
    public static MethodHandle FMOD_Channel_GetMute$handle() {
        return FMOD_Channel_GetMute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMute(FMOD_CHANNEL *channel, FMOD_BOOL *mute)
     * }
     */
    public static MemorySegment FMOD_Channel_GetMute$address() {
        return FMOD_Channel_GetMute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMute(FMOD_CHANNEL *channel, FMOD_BOOL *mute)
     * }
     */
    public static int FMOD_Channel_GetMute(MemorySegment channel, MemorySegment mute) {
        var mh$ = FMOD_Channel_GetMute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetMute", channel, mute);
            }
            return (int)mh$.invokeExact(channel, mute);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetReverbProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetReverbProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetReverbProperties(FMOD_CHANNEL *channel, int instance, float wet)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetReverbProperties$descriptor() {
        return FMOD_Channel_SetReverbProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetReverbProperties(FMOD_CHANNEL *channel, int instance, float wet)
     * }
     */
    public static MethodHandle FMOD_Channel_SetReverbProperties$handle() {
        return FMOD_Channel_SetReverbProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetReverbProperties(FMOD_CHANNEL *channel, int instance, float wet)
     * }
     */
    public static MemorySegment FMOD_Channel_SetReverbProperties$address() {
        return FMOD_Channel_SetReverbProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetReverbProperties(FMOD_CHANNEL *channel, int instance, float wet)
     * }
     */
    public static int FMOD_Channel_SetReverbProperties(MemorySegment channel, int instance, float wet) {
        var mh$ = FMOD_Channel_SetReverbProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetReverbProperties", channel, instance, wet);
            }
            return (int)mh$.invokeExact(channel, instance, wet);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetReverbProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetReverbProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetReverbProperties(FMOD_CHANNEL *channel, int instance, float *wet)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetReverbProperties$descriptor() {
        return FMOD_Channel_GetReverbProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetReverbProperties(FMOD_CHANNEL *channel, int instance, float *wet)
     * }
     */
    public static MethodHandle FMOD_Channel_GetReverbProperties$handle() {
        return FMOD_Channel_GetReverbProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetReverbProperties(FMOD_CHANNEL *channel, int instance, float *wet)
     * }
     */
    public static MemorySegment FMOD_Channel_GetReverbProperties$address() {
        return FMOD_Channel_GetReverbProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetReverbProperties(FMOD_CHANNEL *channel, int instance, float *wet)
     * }
     */
    public static int FMOD_Channel_GetReverbProperties(MemorySegment channel, int instance, MemorySegment wet) {
        var mh$ = FMOD_Channel_GetReverbProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetReverbProperties", channel, instance, wet);
            }
            return (int)mh$.invokeExact(channel, instance, wet);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetLowPassGain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetLowPassGain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLowPassGain(FMOD_CHANNEL *channel, float gain)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetLowPassGain$descriptor() {
        return FMOD_Channel_SetLowPassGain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLowPassGain(FMOD_CHANNEL *channel, float gain)
     * }
     */
    public static MethodHandle FMOD_Channel_SetLowPassGain$handle() {
        return FMOD_Channel_SetLowPassGain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLowPassGain(FMOD_CHANNEL *channel, float gain)
     * }
     */
    public static MemorySegment FMOD_Channel_SetLowPassGain$address() {
        return FMOD_Channel_SetLowPassGain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLowPassGain(FMOD_CHANNEL *channel, float gain)
     * }
     */
    public static int FMOD_Channel_SetLowPassGain(MemorySegment channel, float gain) {
        var mh$ = FMOD_Channel_SetLowPassGain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetLowPassGain", channel, gain);
            }
            return (int)mh$.invokeExact(channel, gain);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetLowPassGain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetLowPassGain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLowPassGain(FMOD_CHANNEL *channel, float *gain)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetLowPassGain$descriptor() {
        return FMOD_Channel_GetLowPassGain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLowPassGain(FMOD_CHANNEL *channel, float *gain)
     * }
     */
    public static MethodHandle FMOD_Channel_GetLowPassGain$handle() {
        return FMOD_Channel_GetLowPassGain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLowPassGain(FMOD_CHANNEL *channel, float *gain)
     * }
     */
    public static MemorySegment FMOD_Channel_GetLowPassGain$address() {
        return FMOD_Channel_GetLowPassGain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLowPassGain(FMOD_CHANNEL *channel, float *gain)
     * }
     */
    public static int FMOD_Channel_GetLowPassGain(MemorySegment channel, MemorySegment gain) {
        var mh$ = FMOD_Channel_GetLowPassGain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetLowPassGain", channel, gain);
            }
            return (int)mh$.invokeExact(channel, gain);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMode(FMOD_CHANNEL *channel, FMOD_MODE mode)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetMode$descriptor() {
        return FMOD_Channel_SetMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMode(FMOD_CHANNEL *channel, FMOD_MODE mode)
     * }
     */
    public static MethodHandle FMOD_Channel_SetMode$handle() {
        return FMOD_Channel_SetMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMode(FMOD_CHANNEL *channel, FMOD_MODE mode)
     * }
     */
    public static MemorySegment FMOD_Channel_SetMode$address() {
        return FMOD_Channel_SetMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMode(FMOD_CHANNEL *channel, FMOD_MODE mode)
     * }
     */
    public static int FMOD_Channel_SetMode(MemorySegment channel, int mode) {
        var mh$ = FMOD_Channel_SetMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetMode", channel, mode);
            }
            return (int)mh$.invokeExact(channel, mode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMode(FMOD_CHANNEL *channel, FMOD_MODE *mode)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetMode$descriptor() {
        return FMOD_Channel_GetMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMode(FMOD_CHANNEL *channel, FMOD_MODE *mode)
     * }
     */
    public static MethodHandle FMOD_Channel_GetMode$handle() {
        return FMOD_Channel_GetMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMode(FMOD_CHANNEL *channel, FMOD_MODE *mode)
     * }
     */
    public static MemorySegment FMOD_Channel_GetMode$address() {
        return FMOD_Channel_GetMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMode(FMOD_CHANNEL *channel, FMOD_MODE *mode)
     * }
     */
    public static int FMOD_Channel_GetMode(MemorySegment channel, MemorySegment mode) {
        var mh$ = FMOD_Channel_GetMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetMode", channel, mode);
            }
            return (int)mh$.invokeExact(channel, mode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetCallback(FMOD_CHANNEL *channel, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetCallback$descriptor() {
        return FMOD_Channel_SetCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetCallback(FMOD_CHANNEL *channel, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static MethodHandle FMOD_Channel_SetCallback$handle() {
        return FMOD_Channel_SetCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetCallback(FMOD_CHANNEL *channel, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static MemorySegment FMOD_Channel_SetCallback$address() {
        return FMOD_Channel_SetCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetCallback(FMOD_CHANNEL *channel, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static int FMOD_Channel_SetCallback(MemorySegment channel, MemorySegment callback) {
        var mh$ = FMOD_Channel_SetCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetCallback", channel, callback);
            }
            return (int)mh$.invokeExact(channel, callback);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_IsPlaying {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_IsPlaying");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsPlaying(FMOD_CHANNEL *channel, FMOD_BOOL *isplaying)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_IsPlaying$descriptor() {
        return FMOD_Channel_IsPlaying.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsPlaying(FMOD_CHANNEL *channel, FMOD_BOOL *isplaying)
     * }
     */
    public static MethodHandle FMOD_Channel_IsPlaying$handle() {
        return FMOD_Channel_IsPlaying.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsPlaying(FMOD_CHANNEL *channel, FMOD_BOOL *isplaying)
     * }
     */
    public static MemorySegment FMOD_Channel_IsPlaying$address() {
        return FMOD_Channel_IsPlaying.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsPlaying(FMOD_CHANNEL *channel, FMOD_BOOL *isplaying)
     * }
     */
    public static int FMOD_Channel_IsPlaying(MemorySegment channel, MemorySegment isplaying) {
        var mh$ = FMOD_Channel_IsPlaying.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_IsPlaying", channel, isplaying);
            }
            return (int)mh$.invokeExact(channel, isplaying);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetPan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetPan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPan(FMOD_CHANNEL *channel, float pan)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetPan$descriptor() {
        return FMOD_Channel_SetPan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPan(FMOD_CHANNEL *channel, float pan)
     * }
     */
    public static MethodHandle FMOD_Channel_SetPan$handle() {
        return FMOD_Channel_SetPan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPan(FMOD_CHANNEL *channel, float pan)
     * }
     */
    public static MemorySegment FMOD_Channel_SetPan$address() {
        return FMOD_Channel_SetPan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPan(FMOD_CHANNEL *channel, float pan)
     * }
     */
    public static int FMOD_Channel_SetPan(MemorySegment channel, float pan) {
        var mh$ = FMOD_Channel_SetPan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetPan", channel, pan);
            }
            return (int)mh$.invokeExact(channel, pan);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetMixLevelsOutput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetMixLevelsOutput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsOutput(FMOD_CHANNEL *channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetMixLevelsOutput$descriptor() {
        return FMOD_Channel_SetMixLevelsOutput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsOutput(FMOD_CHANNEL *channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static MethodHandle FMOD_Channel_SetMixLevelsOutput$handle() {
        return FMOD_Channel_SetMixLevelsOutput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsOutput(FMOD_CHANNEL *channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static MemorySegment FMOD_Channel_SetMixLevelsOutput$address() {
        return FMOD_Channel_SetMixLevelsOutput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsOutput(FMOD_CHANNEL *channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static int FMOD_Channel_SetMixLevelsOutput(MemorySegment channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright) {
        var mh$ = FMOD_Channel_SetMixLevelsOutput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetMixLevelsOutput", channel, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright);
            }
            return (int)mh$.invokeExact(channel, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetMixLevelsInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetMixLevelsInput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsInput(FMOD_CHANNEL *channel, float *levels, int numlevels)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetMixLevelsInput$descriptor() {
        return FMOD_Channel_SetMixLevelsInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsInput(FMOD_CHANNEL *channel, float *levels, int numlevels)
     * }
     */
    public static MethodHandle FMOD_Channel_SetMixLevelsInput$handle() {
        return FMOD_Channel_SetMixLevelsInput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsInput(FMOD_CHANNEL *channel, float *levels, int numlevels)
     * }
     */
    public static MemorySegment FMOD_Channel_SetMixLevelsInput$address() {
        return FMOD_Channel_SetMixLevelsInput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsInput(FMOD_CHANNEL *channel, float *levels, int numlevels)
     * }
     */
    public static int FMOD_Channel_SetMixLevelsInput(MemorySegment channel, MemorySegment levels, int numlevels) {
        var mh$ = FMOD_Channel_SetMixLevelsInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetMixLevelsInput", channel, levels, numlevels);
            }
            return (int)mh$.invokeExact(channel, levels, numlevels);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetMixMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetMixMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetMixMatrix$descriptor() {
        return FMOD_Channel_SetMixMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static MethodHandle FMOD_Channel_SetMixMatrix$handle() {
        return FMOD_Channel_SetMixMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static MemorySegment FMOD_Channel_SetMixMatrix$address() {
        return FMOD_Channel_SetMixMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static int FMOD_Channel_SetMixMatrix(MemorySegment channel, MemorySegment matrix, int outchannels, int inchannels, int inchannel_hop) {
        var mh$ = FMOD_Channel_SetMixMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetMixMatrix", channel, matrix, outchannels, inchannels, inchannel_hop);
            }
            return (int)mh$.invokeExact(channel, matrix, outchannels, inchannels, inchannel_hop);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetMixMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetMixMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetMixMatrix$descriptor() {
        return FMOD_Channel_GetMixMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static MethodHandle FMOD_Channel_GetMixMatrix$handle() {
        return FMOD_Channel_GetMixMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static MemorySegment FMOD_Channel_GetMixMatrix$address() {
        return FMOD_Channel_GetMixMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static int FMOD_Channel_GetMixMatrix(MemorySegment channel, MemorySegment matrix, MemorySegment outchannels, MemorySegment inchannels, int inchannel_hop) {
        var mh$ = FMOD_Channel_GetMixMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetMixMatrix", channel, matrix, outchannels, inchannels, inchannel_hop);
            }
            return (int)mh$.invokeExact(channel, matrix, outchannels, inchannels, inchannel_hop);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetDSPClock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetDSPClock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPClock(FMOD_CHANNEL *channel, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetDSPClock$descriptor() {
        return FMOD_Channel_GetDSPClock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPClock(FMOD_CHANNEL *channel, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static MethodHandle FMOD_Channel_GetDSPClock$handle() {
        return FMOD_Channel_GetDSPClock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPClock(FMOD_CHANNEL *channel, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static MemorySegment FMOD_Channel_GetDSPClock$address() {
        return FMOD_Channel_GetDSPClock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPClock(FMOD_CHANNEL *channel, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static int FMOD_Channel_GetDSPClock(MemorySegment channel, MemorySegment dspclock, MemorySegment parentclock) {
        var mh$ = FMOD_Channel_GetDSPClock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetDSPClock", channel, dspclock, parentclock);
            }
            return (int)mh$.invokeExact(channel, dspclock, parentclock);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_LONG_LONG,
            fmod_studio_h.C_LONG_LONG,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDelay(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetDelay$descriptor() {
        return FMOD_Channel_SetDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDelay(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static MethodHandle FMOD_Channel_SetDelay$handle() {
        return FMOD_Channel_SetDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDelay(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static MemorySegment FMOD_Channel_SetDelay$address() {
        return FMOD_Channel_SetDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDelay(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static int FMOD_Channel_SetDelay(MemorySegment channel, long dspclock_start, long dspclock_end, int stopchannels) {
        var mh$ = FMOD_Channel_SetDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetDelay", channel, dspclock_start, dspclock_end, stopchannels);
            }
            return (int)mh$.invokeExact(channel, dspclock_start, dspclock_end, stopchannels);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDelay(FMOD_CHANNEL *channel, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetDelay$descriptor() {
        return FMOD_Channel_GetDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDelay(FMOD_CHANNEL *channel, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static MethodHandle FMOD_Channel_GetDelay$handle() {
        return FMOD_Channel_GetDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDelay(FMOD_CHANNEL *channel, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static MemorySegment FMOD_Channel_GetDelay$address() {
        return FMOD_Channel_GetDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDelay(FMOD_CHANNEL *channel, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static int FMOD_Channel_GetDelay(MemorySegment channel, MemorySegment dspclock_start, MemorySegment dspclock_end, MemorySegment stopchannels) {
        var mh$ = FMOD_Channel_GetDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetDelay", channel, dspclock_start, dspclock_end, stopchannels);
            }
            return (int)mh$.invokeExact(channel, dspclock_start, dspclock_end, stopchannels);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_AddFadePoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_LONG_LONG,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_AddFadePoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddFadePoint(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_AddFadePoint$descriptor() {
        return FMOD_Channel_AddFadePoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddFadePoint(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static MethodHandle FMOD_Channel_AddFadePoint$handle() {
        return FMOD_Channel_AddFadePoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddFadePoint(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static MemorySegment FMOD_Channel_AddFadePoint$address() {
        return FMOD_Channel_AddFadePoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddFadePoint(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static int FMOD_Channel_AddFadePoint(MemorySegment channel, long dspclock, float volume) {
        var mh$ = FMOD_Channel_AddFadePoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_AddFadePoint", channel, dspclock, volume);
            }
            return (int)mh$.invokeExact(channel, dspclock, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetFadePointRamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_LONG_LONG,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetFadePointRamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFadePointRamp(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetFadePointRamp$descriptor() {
        return FMOD_Channel_SetFadePointRamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFadePointRamp(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static MethodHandle FMOD_Channel_SetFadePointRamp$handle() {
        return FMOD_Channel_SetFadePointRamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFadePointRamp(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static MemorySegment FMOD_Channel_SetFadePointRamp$address() {
        return FMOD_Channel_SetFadePointRamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFadePointRamp(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static int FMOD_Channel_SetFadePointRamp(MemorySegment channel, long dspclock, float volume) {
        var mh$ = FMOD_Channel_SetFadePointRamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetFadePointRamp", channel, dspclock, volume);
            }
            return (int)mh$.invokeExact(channel, dspclock, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_RemoveFadePoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_LONG_LONG,
            fmod_studio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_RemoveFadePoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveFadePoints(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_RemoveFadePoints$descriptor() {
        return FMOD_Channel_RemoveFadePoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveFadePoints(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static MethodHandle FMOD_Channel_RemoveFadePoints$handle() {
        return FMOD_Channel_RemoveFadePoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveFadePoints(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static MemorySegment FMOD_Channel_RemoveFadePoints$address() {
        return FMOD_Channel_RemoveFadePoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveFadePoints(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static int FMOD_Channel_RemoveFadePoints(MemorySegment channel, long dspclock_start, long dspclock_end) {
        var mh$ = FMOD_Channel_RemoveFadePoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_RemoveFadePoints", channel, dspclock_start, dspclock_end);
            }
            return (int)mh$.invokeExact(channel, dspclock_start, dspclock_end);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetFadePoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetFadePoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFadePoints(FMOD_CHANNEL *channel, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetFadePoints$descriptor() {
        return FMOD_Channel_GetFadePoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFadePoints(FMOD_CHANNEL *channel, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static MethodHandle FMOD_Channel_GetFadePoints$handle() {
        return FMOD_Channel_GetFadePoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFadePoints(FMOD_CHANNEL *channel, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static MemorySegment FMOD_Channel_GetFadePoints$address() {
        return FMOD_Channel_GetFadePoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFadePoints(FMOD_CHANNEL *channel, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static int FMOD_Channel_GetFadePoints(MemorySegment channel, MemorySegment numpoints, MemorySegment point_dspclock, MemorySegment point_volume) {
        var mh$ = FMOD_Channel_GetFadePoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetFadePoints", channel, numpoints, point_dspclock, point_volume);
            }
            return (int)mh$.invokeExact(channel, numpoints, point_dspclock, point_volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP **dsp)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetDSP$descriptor() {
        return FMOD_Channel_GetDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP **dsp)
     * }
     */
    public static MethodHandle FMOD_Channel_GetDSP$handle() {
        return FMOD_Channel_GetDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP **dsp)
     * }
     */
    public static MemorySegment FMOD_Channel_GetDSP$address() {
        return FMOD_Channel_GetDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP **dsp)
     * }
     */
    public static int FMOD_Channel_GetDSP(MemorySegment channel, int index, MemorySegment dsp) {
        var mh$ = FMOD_Channel_GetDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetDSP", channel, index, dsp);
            }
            return (int)mh$.invokeExact(channel, index, dsp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_AddDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_AddDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP *dsp)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_AddDSP$descriptor() {
        return FMOD_Channel_AddDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP *dsp)
     * }
     */
    public static MethodHandle FMOD_Channel_AddDSP$handle() {
        return FMOD_Channel_AddDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP *dsp)
     * }
     */
    public static MemorySegment FMOD_Channel_AddDSP$address() {
        return FMOD_Channel_AddDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP *dsp)
     * }
     */
    public static int FMOD_Channel_AddDSP(MemorySegment channel, int index, MemorySegment dsp) {
        var mh$ = FMOD_Channel_AddDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_AddDSP", channel, index, dsp);
            }
            return (int)mh$.invokeExact(channel, index, dsp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_RemoveDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_RemoveDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveDSP(FMOD_CHANNEL *channel, FMOD_DSP *dsp)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_RemoveDSP$descriptor() {
        return FMOD_Channel_RemoveDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveDSP(FMOD_CHANNEL *channel, FMOD_DSP *dsp)
     * }
     */
    public static MethodHandle FMOD_Channel_RemoveDSP$handle() {
        return FMOD_Channel_RemoveDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveDSP(FMOD_CHANNEL *channel, FMOD_DSP *dsp)
     * }
     */
    public static MemorySegment FMOD_Channel_RemoveDSP$address() {
        return FMOD_Channel_RemoveDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveDSP(FMOD_CHANNEL *channel, FMOD_DSP *dsp)
     * }
     */
    public static int FMOD_Channel_RemoveDSP(MemorySegment channel, MemorySegment dsp) {
        var mh$ = FMOD_Channel_RemoveDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_RemoveDSP", channel, dsp);
            }
            return (int)mh$.invokeExact(channel, dsp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetNumDSPs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetNumDSPs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetNumDSPs(FMOD_CHANNEL *channel, int *numdsps)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetNumDSPs$descriptor() {
        return FMOD_Channel_GetNumDSPs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetNumDSPs(FMOD_CHANNEL *channel, int *numdsps)
     * }
     */
    public static MethodHandle FMOD_Channel_GetNumDSPs$handle() {
        return FMOD_Channel_GetNumDSPs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetNumDSPs(FMOD_CHANNEL *channel, int *numdsps)
     * }
     */
    public static MemorySegment FMOD_Channel_GetNumDSPs$address() {
        return FMOD_Channel_GetNumDSPs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetNumDSPs(FMOD_CHANNEL *channel, int *numdsps)
     * }
     */
    public static int FMOD_Channel_GetNumDSPs(MemorySegment channel, MemorySegment numdsps) {
        var mh$ = FMOD_Channel_GetNumDSPs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetNumDSPs", channel, numdsps);
            }
            return (int)mh$.invokeExact(channel, numdsps);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetDSPIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetDSPIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int index)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetDSPIndex$descriptor() {
        return FMOD_Channel_SetDSPIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int index)
     * }
     */
    public static MethodHandle FMOD_Channel_SetDSPIndex$handle() {
        return FMOD_Channel_SetDSPIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int index)
     * }
     */
    public static MemorySegment FMOD_Channel_SetDSPIndex$address() {
        return FMOD_Channel_SetDSPIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int index)
     * }
     */
    public static int FMOD_Channel_SetDSPIndex(MemorySegment channel, MemorySegment dsp, int index) {
        var mh$ = FMOD_Channel_SetDSPIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetDSPIndex", channel, dsp, index);
            }
            return (int)mh$.invokeExact(channel, dsp, index);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetDSPIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetDSPIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int *index)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetDSPIndex$descriptor() {
        return FMOD_Channel_GetDSPIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int *index)
     * }
     */
    public static MethodHandle FMOD_Channel_GetDSPIndex$handle() {
        return FMOD_Channel_GetDSPIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int *index)
     * }
     */
    public static MemorySegment FMOD_Channel_GetDSPIndex$address() {
        return FMOD_Channel_GetDSPIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int *index)
     * }
     */
    public static int FMOD_Channel_GetDSPIndex(MemorySegment channel, MemorySegment dsp, MemorySegment index) {
        var mh$ = FMOD_Channel_GetDSPIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetDSPIndex", channel, dsp, index);
            }
            return (int)mh$.invokeExact(channel, dsp, index);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Set3DAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Set3DAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DAttributes(FMOD_CHANNEL *channel, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Set3DAttributes$descriptor() {
        return FMOD_Channel_Set3DAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DAttributes(FMOD_CHANNEL *channel, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel)
     * }
     */
    public static MethodHandle FMOD_Channel_Set3DAttributes$handle() {
        return FMOD_Channel_Set3DAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DAttributes(FMOD_CHANNEL *channel, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel)
     * }
     */
    public static MemorySegment FMOD_Channel_Set3DAttributes$address() {
        return FMOD_Channel_Set3DAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DAttributes(FMOD_CHANNEL *channel, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel)
     * }
     */
    public static int FMOD_Channel_Set3DAttributes(MemorySegment channel, MemorySegment pos, MemorySegment vel) {
        var mh$ = FMOD_Channel_Set3DAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Set3DAttributes", channel, pos, vel);
            }
            return (int)mh$.invokeExact(channel, pos, vel);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Get3DAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Get3DAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DAttributes(FMOD_CHANNEL *channel, FMOD_VECTOR *pos, FMOD_VECTOR *vel)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Get3DAttributes$descriptor() {
        return FMOD_Channel_Get3DAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DAttributes(FMOD_CHANNEL *channel, FMOD_VECTOR *pos, FMOD_VECTOR *vel)
     * }
     */
    public static MethodHandle FMOD_Channel_Get3DAttributes$handle() {
        return FMOD_Channel_Get3DAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DAttributes(FMOD_CHANNEL *channel, FMOD_VECTOR *pos, FMOD_VECTOR *vel)
     * }
     */
    public static MemorySegment FMOD_Channel_Get3DAttributes$address() {
        return FMOD_Channel_Get3DAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DAttributes(FMOD_CHANNEL *channel, FMOD_VECTOR *pos, FMOD_VECTOR *vel)
     * }
     */
    public static int FMOD_Channel_Get3DAttributes(MemorySegment channel, MemorySegment pos, MemorySegment vel) {
        var mh$ = FMOD_Channel_Get3DAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Get3DAttributes", channel, pos, vel);
            }
            return (int)mh$.invokeExact(channel, pos, vel);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Set3DMinMaxDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Set3DMinMaxDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DMinMaxDistance(FMOD_CHANNEL *channel, float mindistance, float maxdistance)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Set3DMinMaxDistance$descriptor() {
        return FMOD_Channel_Set3DMinMaxDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DMinMaxDistance(FMOD_CHANNEL *channel, float mindistance, float maxdistance)
     * }
     */
    public static MethodHandle FMOD_Channel_Set3DMinMaxDistance$handle() {
        return FMOD_Channel_Set3DMinMaxDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DMinMaxDistance(FMOD_CHANNEL *channel, float mindistance, float maxdistance)
     * }
     */
    public static MemorySegment FMOD_Channel_Set3DMinMaxDistance$address() {
        return FMOD_Channel_Set3DMinMaxDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DMinMaxDistance(FMOD_CHANNEL *channel, float mindistance, float maxdistance)
     * }
     */
    public static int FMOD_Channel_Set3DMinMaxDistance(MemorySegment channel, float mindistance, float maxdistance) {
        var mh$ = FMOD_Channel_Set3DMinMaxDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Set3DMinMaxDistance", channel, mindistance, maxdistance);
            }
            return (int)mh$.invokeExact(channel, mindistance, maxdistance);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Get3DMinMaxDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Get3DMinMaxDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DMinMaxDistance(FMOD_CHANNEL *channel, float *mindistance, float *maxdistance)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Get3DMinMaxDistance$descriptor() {
        return FMOD_Channel_Get3DMinMaxDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DMinMaxDistance(FMOD_CHANNEL *channel, float *mindistance, float *maxdistance)
     * }
     */
    public static MethodHandle FMOD_Channel_Get3DMinMaxDistance$handle() {
        return FMOD_Channel_Get3DMinMaxDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DMinMaxDistance(FMOD_CHANNEL *channel, float *mindistance, float *maxdistance)
     * }
     */
    public static MemorySegment FMOD_Channel_Get3DMinMaxDistance$address() {
        return FMOD_Channel_Get3DMinMaxDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DMinMaxDistance(FMOD_CHANNEL *channel, float *mindistance, float *maxdistance)
     * }
     */
    public static int FMOD_Channel_Get3DMinMaxDistance(MemorySegment channel, MemorySegment mindistance, MemorySegment maxdistance) {
        var mh$ = FMOD_Channel_Get3DMinMaxDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Get3DMinMaxDistance", channel, mindistance, maxdistance);
            }
            return (int)mh$.invokeExact(channel, mindistance, maxdistance);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Set3DConeSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Set3DConeSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DConeSettings(FMOD_CHANNEL *channel, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Set3DConeSettings$descriptor() {
        return FMOD_Channel_Set3DConeSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DConeSettings(FMOD_CHANNEL *channel, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static MethodHandle FMOD_Channel_Set3DConeSettings$handle() {
        return FMOD_Channel_Set3DConeSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DConeSettings(FMOD_CHANNEL *channel, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static MemorySegment FMOD_Channel_Set3DConeSettings$address() {
        return FMOD_Channel_Set3DConeSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DConeSettings(FMOD_CHANNEL *channel, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static int FMOD_Channel_Set3DConeSettings(MemorySegment channel, float insideconeangle, float outsideconeangle, float outsidevolume) {
        var mh$ = FMOD_Channel_Set3DConeSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Set3DConeSettings", channel, insideconeangle, outsideconeangle, outsidevolume);
            }
            return (int)mh$.invokeExact(channel, insideconeangle, outsideconeangle, outsidevolume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Get3DConeSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Get3DConeSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DConeSettings(FMOD_CHANNEL *channel, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Get3DConeSettings$descriptor() {
        return FMOD_Channel_Get3DConeSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DConeSettings(FMOD_CHANNEL *channel, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static MethodHandle FMOD_Channel_Get3DConeSettings$handle() {
        return FMOD_Channel_Get3DConeSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DConeSettings(FMOD_CHANNEL *channel, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static MemorySegment FMOD_Channel_Get3DConeSettings$address() {
        return FMOD_Channel_Get3DConeSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DConeSettings(FMOD_CHANNEL *channel, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static int FMOD_Channel_Get3DConeSettings(MemorySegment channel, MemorySegment insideconeangle, MemorySegment outsideconeangle, MemorySegment outsidevolume) {
        var mh$ = FMOD_Channel_Get3DConeSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Get3DConeSettings", channel, insideconeangle, outsideconeangle, outsidevolume);
            }
            return (int)mh$.invokeExact(channel, insideconeangle, outsideconeangle, outsidevolume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Set3DConeOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Set3DConeOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DConeOrientation(FMOD_CHANNEL *channel, FMOD_VECTOR *orientation)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Set3DConeOrientation$descriptor() {
        return FMOD_Channel_Set3DConeOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DConeOrientation(FMOD_CHANNEL *channel, FMOD_VECTOR *orientation)
     * }
     */
    public static MethodHandle FMOD_Channel_Set3DConeOrientation$handle() {
        return FMOD_Channel_Set3DConeOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DConeOrientation(FMOD_CHANNEL *channel, FMOD_VECTOR *orientation)
     * }
     */
    public static MemorySegment FMOD_Channel_Set3DConeOrientation$address() {
        return FMOD_Channel_Set3DConeOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DConeOrientation(FMOD_CHANNEL *channel, FMOD_VECTOR *orientation)
     * }
     */
    public static int FMOD_Channel_Set3DConeOrientation(MemorySegment channel, MemorySegment orientation) {
        var mh$ = FMOD_Channel_Set3DConeOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Set3DConeOrientation", channel, orientation);
            }
            return (int)mh$.invokeExact(channel, orientation);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Get3DConeOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Get3DConeOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DConeOrientation(FMOD_CHANNEL *channel, FMOD_VECTOR *orientation)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Get3DConeOrientation$descriptor() {
        return FMOD_Channel_Get3DConeOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DConeOrientation(FMOD_CHANNEL *channel, FMOD_VECTOR *orientation)
     * }
     */
    public static MethodHandle FMOD_Channel_Get3DConeOrientation$handle() {
        return FMOD_Channel_Get3DConeOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DConeOrientation(FMOD_CHANNEL *channel, FMOD_VECTOR *orientation)
     * }
     */
    public static MemorySegment FMOD_Channel_Get3DConeOrientation$address() {
        return FMOD_Channel_Get3DConeOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DConeOrientation(FMOD_CHANNEL *channel, FMOD_VECTOR *orientation)
     * }
     */
    public static int FMOD_Channel_Get3DConeOrientation(MemorySegment channel, MemorySegment orientation) {
        var mh$ = FMOD_Channel_Get3DConeOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Get3DConeOrientation", channel, orientation);
            }
            return (int)mh$.invokeExact(channel, orientation);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Set3DCustomRolloff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Set3DCustomRolloff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DCustomRolloff(FMOD_CHANNEL *channel, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Set3DCustomRolloff$descriptor() {
        return FMOD_Channel_Set3DCustomRolloff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DCustomRolloff(FMOD_CHANNEL *channel, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static MethodHandle FMOD_Channel_Set3DCustomRolloff$handle() {
        return FMOD_Channel_Set3DCustomRolloff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DCustomRolloff(FMOD_CHANNEL *channel, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static MemorySegment FMOD_Channel_Set3DCustomRolloff$address() {
        return FMOD_Channel_Set3DCustomRolloff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DCustomRolloff(FMOD_CHANNEL *channel, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static int FMOD_Channel_Set3DCustomRolloff(MemorySegment channel, MemorySegment points, int numpoints) {
        var mh$ = FMOD_Channel_Set3DCustomRolloff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Set3DCustomRolloff", channel, points, numpoints);
            }
            return (int)mh$.invokeExact(channel, points, numpoints);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Get3DCustomRolloff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Get3DCustomRolloff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DCustomRolloff(FMOD_CHANNEL *channel, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Get3DCustomRolloff$descriptor() {
        return FMOD_Channel_Get3DCustomRolloff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DCustomRolloff(FMOD_CHANNEL *channel, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static MethodHandle FMOD_Channel_Get3DCustomRolloff$handle() {
        return FMOD_Channel_Get3DCustomRolloff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DCustomRolloff(FMOD_CHANNEL *channel, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static MemorySegment FMOD_Channel_Get3DCustomRolloff$address() {
        return FMOD_Channel_Get3DCustomRolloff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DCustomRolloff(FMOD_CHANNEL *channel, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static int FMOD_Channel_Get3DCustomRolloff(MemorySegment channel, MemorySegment points, MemorySegment numpoints) {
        var mh$ = FMOD_Channel_Get3DCustomRolloff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Get3DCustomRolloff", channel, points, numpoints);
            }
            return (int)mh$.invokeExact(channel, points, numpoints);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Set3DOcclusion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Set3DOcclusion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DOcclusion(FMOD_CHANNEL *channel, float directocclusion, float reverbocclusion)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Set3DOcclusion$descriptor() {
        return FMOD_Channel_Set3DOcclusion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DOcclusion(FMOD_CHANNEL *channel, float directocclusion, float reverbocclusion)
     * }
     */
    public static MethodHandle FMOD_Channel_Set3DOcclusion$handle() {
        return FMOD_Channel_Set3DOcclusion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DOcclusion(FMOD_CHANNEL *channel, float directocclusion, float reverbocclusion)
     * }
     */
    public static MemorySegment FMOD_Channel_Set3DOcclusion$address() {
        return FMOD_Channel_Set3DOcclusion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DOcclusion(FMOD_CHANNEL *channel, float directocclusion, float reverbocclusion)
     * }
     */
    public static int FMOD_Channel_Set3DOcclusion(MemorySegment channel, float directocclusion, float reverbocclusion) {
        var mh$ = FMOD_Channel_Set3DOcclusion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Set3DOcclusion", channel, directocclusion, reverbocclusion);
            }
            return (int)mh$.invokeExact(channel, directocclusion, reverbocclusion);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Get3DOcclusion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Get3DOcclusion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DOcclusion(FMOD_CHANNEL *channel, float *directocclusion, float *reverbocclusion)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Get3DOcclusion$descriptor() {
        return FMOD_Channel_Get3DOcclusion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DOcclusion(FMOD_CHANNEL *channel, float *directocclusion, float *reverbocclusion)
     * }
     */
    public static MethodHandle FMOD_Channel_Get3DOcclusion$handle() {
        return FMOD_Channel_Get3DOcclusion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DOcclusion(FMOD_CHANNEL *channel, float *directocclusion, float *reverbocclusion)
     * }
     */
    public static MemorySegment FMOD_Channel_Get3DOcclusion$address() {
        return FMOD_Channel_Get3DOcclusion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DOcclusion(FMOD_CHANNEL *channel, float *directocclusion, float *reverbocclusion)
     * }
     */
    public static int FMOD_Channel_Get3DOcclusion(MemorySegment channel, MemorySegment directocclusion, MemorySegment reverbocclusion) {
        var mh$ = FMOD_Channel_Get3DOcclusion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Get3DOcclusion", channel, directocclusion, reverbocclusion);
            }
            return (int)mh$.invokeExact(channel, directocclusion, reverbocclusion);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Set3DSpread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Set3DSpread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DSpread(FMOD_CHANNEL *channel, float angle)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Set3DSpread$descriptor() {
        return FMOD_Channel_Set3DSpread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DSpread(FMOD_CHANNEL *channel, float angle)
     * }
     */
    public static MethodHandle FMOD_Channel_Set3DSpread$handle() {
        return FMOD_Channel_Set3DSpread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DSpread(FMOD_CHANNEL *channel, float angle)
     * }
     */
    public static MemorySegment FMOD_Channel_Set3DSpread$address() {
        return FMOD_Channel_Set3DSpread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DSpread(FMOD_CHANNEL *channel, float angle)
     * }
     */
    public static int FMOD_Channel_Set3DSpread(MemorySegment channel, float angle) {
        var mh$ = FMOD_Channel_Set3DSpread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Set3DSpread", channel, angle);
            }
            return (int)mh$.invokeExact(channel, angle);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Get3DSpread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Get3DSpread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DSpread(FMOD_CHANNEL *channel, float *angle)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Get3DSpread$descriptor() {
        return FMOD_Channel_Get3DSpread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DSpread(FMOD_CHANNEL *channel, float *angle)
     * }
     */
    public static MethodHandle FMOD_Channel_Get3DSpread$handle() {
        return FMOD_Channel_Get3DSpread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DSpread(FMOD_CHANNEL *channel, float *angle)
     * }
     */
    public static MemorySegment FMOD_Channel_Get3DSpread$address() {
        return FMOD_Channel_Get3DSpread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DSpread(FMOD_CHANNEL *channel, float *angle)
     * }
     */
    public static int FMOD_Channel_Get3DSpread(MemorySegment channel, MemorySegment angle) {
        var mh$ = FMOD_Channel_Get3DSpread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Get3DSpread", channel, angle);
            }
            return (int)mh$.invokeExact(channel, angle);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Set3DLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Set3DLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DLevel(FMOD_CHANNEL *channel, float level)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Set3DLevel$descriptor() {
        return FMOD_Channel_Set3DLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DLevel(FMOD_CHANNEL *channel, float level)
     * }
     */
    public static MethodHandle FMOD_Channel_Set3DLevel$handle() {
        return FMOD_Channel_Set3DLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DLevel(FMOD_CHANNEL *channel, float level)
     * }
     */
    public static MemorySegment FMOD_Channel_Set3DLevel$address() {
        return FMOD_Channel_Set3DLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DLevel(FMOD_CHANNEL *channel, float level)
     * }
     */
    public static int FMOD_Channel_Set3DLevel(MemorySegment channel, float level) {
        var mh$ = FMOD_Channel_Set3DLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Set3DLevel", channel, level);
            }
            return (int)mh$.invokeExact(channel, level);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Get3DLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Get3DLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DLevel(FMOD_CHANNEL *channel, float *level)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Get3DLevel$descriptor() {
        return FMOD_Channel_Get3DLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DLevel(FMOD_CHANNEL *channel, float *level)
     * }
     */
    public static MethodHandle FMOD_Channel_Get3DLevel$handle() {
        return FMOD_Channel_Get3DLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DLevel(FMOD_CHANNEL *channel, float *level)
     * }
     */
    public static MemorySegment FMOD_Channel_Get3DLevel$address() {
        return FMOD_Channel_Get3DLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DLevel(FMOD_CHANNEL *channel, float *level)
     * }
     */
    public static int FMOD_Channel_Get3DLevel(MemorySegment channel, MemorySegment level) {
        var mh$ = FMOD_Channel_Get3DLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Get3DLevel", channel, level);
            }
            return (int)mh$.invokeExact(channel, level);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Set3DDopplerLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Set3DDopplerLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DDopplerLevel(FMOD_CHANNEL *channel, float level)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Set3DDopplerLevel$descriptor() {
        return FMOD_Channel_Set3DDopplerLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DDopplerLevel(FMOD_CHANNEL *channel, float level)
     * }
     */
    public static MethodHandle FMOD_Channel_Set3DDopplerLevel$handle() {
        return FMOD_Channel_Set3DDopplerLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DDopplerLevel(FMOD_CHANNEL *channel, float level)
     * }
     */
    public static MemorySegment FMOD_Channel_Set3DDopplerLevel$address() {
        return FMOD_Channel_Set3DDopplerLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DDopplerLevel(FMOD_CHANNEL *channel, float level)
     * }
     */
    public static int FMOD_Channel_Set3DDopplerLevel(MemorySegment channel, float level) {
        var mh$ = FMOD_Channel_Set3DDopplerLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Set3DDopplerLevel", channel, level);
            }
            return (int)mh$.invokeExact(channel, level);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Get3DDopplerLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Get3DDopplerLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DDopplerLevel(FMOD_CHANNEL *channel, float *level)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Get3DDopplerLevel$descriptor() {
        return FMOD_Channel_Get3DDopplerLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DDopplerLevel(FMOD_CHANNEL *channel, float *level)
     * }
     */
    public static MethodHandle FMOD_Channel_Get3DDopplerLevel$handle() {
        return FMOD_Channel_Get3DDopplerLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DDopplerLevel(FMOD_CHANNEL *channel, float *level)
     * }
     */
    public static MemorySegment FMOD_Channel_Get3DDopplerLevel$address() {
        return FMOD_Channel_Get3DDopplerLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DDopplerLevel(FMOD_CHANNEL *channel, float *level)
     * }
     */
    public static int FMOD_Channel_Get3DDopplerLevel(MemorySegment channel, MemorySegment level) {
        var mh$ = FMOD_Channel_Get3DDopplerLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Get3DDopplerLevel", channel, level);
            }
            return (int)mh$.invokeExact(channel, level);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Set3DDistanceFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Set3DDistanceFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DDistanceFilter(FMOD_CHANNEL *channel, FMOD_BOOL custom, float customLevel, float centerFreq)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Set3DDistanceFilter$descriptor() {
        return FMOD_Channel_Set3DDistanceFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DDistanceFilter(FMOD_CHANNEL *channel, FMOD_BOOL custom, float customLevel, float centerFreq)
     * }
     */
    public static MethodHandle FMOD_Channel_Set3DDistanceFilter$handle() {
        return FMOD_Channel_Set3DDistanceFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DDistanceFilter(FMOD_CHANNEL *channel, FMOD_BOOL custom, float customLevel, float centerFreq)
     * }
     */
    public static MemorySegment FMOD_Channel_Set3DDistanceFilter$address() {
        return FMOD_Channel_Set3DDistanceFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Set3DDistanceFilter(FMOD_CHANNEL *channel, FMOD_BOOL custom, float customLevel, float centerFreq)
     * }
     */
    public static int FMOD_Channel_Set3DDistanceFilter(MemorySegment channel, int custom, float customLevel, float centerFreq) {
        var mh$ = FMOD_Channel_Set3DDistanceFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Set3DDistanceFilter", channel, custom, customLevel, centerFreq);
            }
            return (int)mh$.invokeExact(channel, custom, customLevel, centerFreq);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Get3DDistanceFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_Get3DDistanceFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DDistanceFilter(FMOD_CHANNEL *channel, FMOD_BOOL *custom, float *customLevel, float *centerFreq)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Get3DDistanceFilter$descriptor() {
        return FMOD_Channel_Get3DDistanceFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DDistanceFilter(FMOD_CHANNEL *channel, FMOD_BOOL *custom, float *customLevel, float *centerFreq)
     * }
     */
    public static MethodHandle FMOD_Channel_Get3DDistanceFilter$handle() {
        return FMOD_Channel_Get3DDistanceFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DDistanceFilter(FMOD_CHANNEL *channel, FMOD_BOOL *custom, float *customLevel, float *centerFreq)
     * }
     */
    public static MemorySegment FMOD_Channel_Get3DDistanceFilter$address() {
        return FMOD_Channel_Get3DDistanceFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Get3DDistanceFilter(FMOD_CHANNEL *channel, FMOD_BOOL *custom, float *customLevel, float *centerFreq)
     * }
     */
    public static int FMOD_Channel_Get3DDistanceFilter(MemorySegment channel, MemorySegment custom, MemorySegment customLevel, MemorySegment centerFreq) {
        var mh$ = FMOD_Channel_Get3DDistanceFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Get3DDistanceFilter", channel, custom, customLevel, centerFreq);
            }
            return (int)mh$.invokeExact(channel, custom, customLevel, centerFreq);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetUserData(FMOD_CHANNEL *channel, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetUserData$descriptor() {
        return FMOD_Channel_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetUserData(FMOD_CHANNEL *channel, void *userdata)
     * }
     */
    public static MethodHandle FMOD_Channel_SetUserData$handle() {
        return FMOD_Channel_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetUserData(FMOD_CHANNEL *channel, void *userdata)
     * }
     */
    public static MemorySegment FMOD_Channel_SetUserData$address() {
        return FMOD_Channel_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetUserData(FMOD_CHANNEL *channel, void *userdata)
     * }
     */
    public static int FMOD_Channel_SetUserData(MemorySegment channel, MemorySegment userdata) {
        var mh$ = FMOD_Channel_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetUserData", channel, userdata);
            }
            return (int)mh$.invokeExact(channel, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetUserData(FMOD_CHANNEL *channel, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetUserData$descriptor() {
        return FMOD_Channel_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetUserData(FMOD_CHANNEL *channel, void **userdata)
     * }
     */
    public static MethodHandle FMOD_Channel_GetUserData$handle() {
        return FMOD_Channel_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetUserData(FMOD_CHANNEL *channel, void **userdata)
     * }
     */
    public static MemorySegment FMOD_Channel_GetUserData$address() {
        return FMOD_Channel_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetUserData(FMOD_CHANNEL *channel, void **userdata)
     * }
     */
    public static int FMOD_Channel_GetUserData(MemorySegment channel, MemorySegment userdata) {
        var mh$ = FMOD_Channel_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetUserData", channel, userdata);
            }
            return (int)mh$.invokeExact(channel, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetFrequency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetFrequency");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFrequency(FMOD_CHANNEL *channel, float frequency)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetFrequency$descriptor() {
        return FMOD_Channel_SetFrequency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFrequency(FMOD_CHANNEL *channel, float frequency)
     * }
     */
    public static MethodHandle FMOD_Channel_SetFrequency$handle() {
        return FMOD_Channel_SetFrequency.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFrequency(FMOD_CHANNEL *channel, float frequency)
     * }
     */
    public static MemorySegment FMOD_Channel_SetFrequency$address() {
        return FMOD_Channel_SetFrequency.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFrequency(FMOD_CHANNEL *channel, float frequency)
     * }
     */
    public static int FMOD_Channel_SetFrequency(MemorySegment channel, float frequency) {
        var mh$ = FMOD_Channel_SetFrequency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetFrequency", channel, frequency);
            }
            return (int)mh$.invokeExact(channel, frequency);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetFrequency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetFrequency");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFrequency(FMOD_CHANNEL *channel, float *frequency)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetFrequency$descriptor() {
        return FMOD_Channel_GetFrequency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFrequency(FMOD_CHANNEL *channel, float *frequency)
     * }
     */
    public static MethodHandle FMOD_Channel_GetFrequency$handle() {
        return FMOD_Channel_GetFrequency.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFrequency(FMOD_CHANNEL *channel, float *frequency)
     * }
     */
    public static MemorySegment FMOD_Channel_GetFrequency$address() {
        return FMOD_Channel_GetFrequency.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFrequency(FMOD_CHANNEL *channel, float *frequency)
     * }
     */
    public static int FMOD_Channel_GetFrequency(MemorySegment channel, MemorySegment frequency) {
        var mh$ = FMOD_Channel_GetFrequency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetFrequency", channel, frequency);
            }
            return (int)mh$.invokeExact(channel, frequency);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetPriority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetPriority");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPriority(FMOD_CHANNEL *channel, int priority)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetPriority$descriptor() {
        return FMOD_Channel_SetPriority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPriority(FMOD_CHANNEL *channel, int priority)
     * }
     */
    public static MethodHandle FMOD_Channel_SetPriority$handle() {
        return FMOD_Channel_SetPriority.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPriority(FMOD_CHANNEL *channel, int priority)
     * }
     */
    public static MemorySegment FMOD_Channel_SetPriority$address() {
        return FMOD_Channel_SetPriority.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPriority(FMOD_CHANNEL *channel, int priority)
     * }
     */
    public static int FMOD_Channel_SetPriority(MemorySegment channel, int priority) {
        var mh$ = FMOD_Channel_SetPriority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetPriority", channel, priority);
            }
            return (int)mh$.invokeExact(channel, priority);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetPriority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetPriority");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPriority(FMOD_CHANNEL *channel, int *priority)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetPriority$descriptor() {
        return FMOD_Channel_GetPriority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPriority(FMOD_CHANNEL *channel, int *priority)
     * }
     */
    public static MethodHandle FMOD_Channel_GetPriority$handle() {
        return FMOD_Channel_GetPriority.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPriority(FMOD_CHANNEL *channel, int *priority)
     * }
     */
    public static MemorySegment FMOD_Channel_GetPriority$address() {
        return FMOD_Channel_GetPriority.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPriority(FMOD_CHANNEL *channel, int *priority)
     * }
     */
    public static int FMOD_Channel_GetPriority(MemorySegment channel, MemorySegment priority) {
        var mh$ = FMOD_Channel_GetPriority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetPriority", channel, priority);
            }
            return (int)mh$.invokeExact(channel, priority);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPosition(FMOD_CHANNEL *channel, unsigned int position, FMOD_TIMEUNIT postype)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetPosition$descriptor() {
        return FMOD_Channel_SetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPosition(FMOD_CHANNEL *channel, unsigned int position, FMOD_TIMEUNIT postype)
     * }
     */
    public static MethodHandle FMOD_Channel_SetPosition$handle() {
        return FMOD_Channel_SetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPosition(FMOD_CHANNEL *channel, unsigned int position, FMOD_TIMEUNIT postype)
     * }
     */
    public static MemorySegment FMOD_Channel_SetPosition$address() {
        return FMOD_Channel_SetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPosition(FMOD_CHANNEL *channel, unsigned int position, FMOD_TIMEUNIT postype)
     * }
     */
    public static int FMOD_Channel_SetPosition(MemorySegment channel, int position, int postype) {
        var mh$ = FMOD_Channel_SetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetPosition", channel, position, postype);
            }
            return (int)mh$.invokeExact(channel, position, postype);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPosition(FMOD_CHANNEL *channel, unsigned int *position, FMOD_TIMEUNIT postype)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetPosition$descriptor() {
        return FMOD_Channel_GetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPosition(FMOD_CHANNEL *channel, unsigned int *position, FMOD_TIMEUNIT postype)
     * }
     */
    public static MethodHandle FMOD_Channel_GetPosition$handle() {
        return FMOD_Channel_GetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPosition(FMOD_CHANNEL *channel, unsigned int *position, FMOD_TIMEUNIT postype)
     * }
     */
    public static MemorySegment FMOD_Channel_GetPosition$address() {
        return FMOD_Channel_GetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPosition(FMOD_CHANNEL *channel, unsigned int *position, FMOD_TIMEUNIT postype)
     * }
     */
    public static int FMOD_Channel_GetPosition(MemorySegment channel, MemorySegment position, int postype) {
        var mh$ = FMOD_Channel_GetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetPosition", channel, position, postype);
            }
            return (int)mh$.invokeExact(channel, position, postype);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetChannelGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetChannelGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetChannelGroup(FMOD_CHANNEL *channel, FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetChannelGroup$descriptor() {
        return FMOD_Channel_SetChannelGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetChannelGroup(FMOD_CHANNEL *channel, FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static MethodHandle FMOD_Channel_SetChannelGroup$handle() {
        return FMOD_Channel_SetChannelGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetChannelGroup(FMOD_CHANNEL *channel, FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static MemorySegment FMOD_Channel_SetChannelGroup$address() {
        return FMOD_Channel_SetChannelGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetChannelGroup(FMOD_CHANNEL *channel, FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static int FMOD_Channel_SetChannelGroup(MemorySegment channel, MemorySegment channelgroup) {
        var mh$ = FMOD_Channel_SetChannelGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetChannelGroup", channel, channelgroup);
            }
            return (int)mh$.invokeExact(channel, channelgroup);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetChannelGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetChannelGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetChannelGroup(FMOD_CHANNEL *channel, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetChannelGroup$descriptor() {
        return FMOD_Channel_GetChannelGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetChannelGroup(FMOD_CHANNEL *channel, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static MethodHandle FMOD_Channel_GetChannelGroup$handle() {
        return FMOD_Channel_GetChannelGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetChannelGroup(FMOD_CHANNEL *channel, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static MemorySegment FMOD_Channel_GetChannelGroup$address() {
        return FMOD_Channel_GetChannelGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetChannelGroup(FMOD_CHANNEL *channel, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static int FMOD_Channel_GetChannelGroup(MemorySegment channel, MemorySegment channelgroup) {
        var mh$ = FMOD_Channel_GetChannelGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetChannelGroup", channel, channelgroup);
            }
            return (int)mh$.invokeExact(channel, channelgroup);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetLoopCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetLoopCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLoopCount(FMOD_CHANNEL *channel, int loopcount)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetLoopCount$descriptor() {
        return FMOD_Channel_SetLoopCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLoopCount(FMOD_CHANNEL *channel, int loopcount)
     * }
     */
    public static MethodHandle FMOD_Channel_SetLoopCount$handle() {
        return FMOD_Channel_SetLoopCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLoopCount(FMOD_CHANNEL *channel, int loopcount)
     * }
     */
    public static MemorySegment FMOD_Channel_SetLoopCount$address() {
        return FMOD_Channel_SetLoopCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLoopCount(FMOD_CHANNEL *channel, int loopcount)
     * }
     */
    public static int FMOD_Channel_SetLoopCount(MemorySegment channel, int loopcount) {
        var mh$ = FMOD_Channel_SetLoopCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetLoopCount", channel, loopcount);
            }
            return (int)mh$.invokeExact(channel, loopcount);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetLoopCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetLoopCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLoopCount(FMOD_CHANNEL *channel, int *loopcount)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetLoopCount$descriptor() {
        return FMOD_Channel_GetLoopCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLoopCount(FMOD_CHANNEL *channel, int *loopcount)
     * }
     */
    public static MethodHandle FMOD_Channel_GetLoopCount$handle() {
        return FMOD_Channel_GetLoopCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLoopCount(FMOD_CHANNEL *channel, int *loopcount)
     * }
     */
    public static MemorySegment FMOD_Channel_GetLoopCount$address() {
        return FMOD_Channel_GetLoopCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLoopCount(FMOD_CHANNEL *channel, int *loopcount)
     * }
     */
    public static int FMOD_Channel_GetLoopCount(MemorySegment channel, MemorySegment loopcount) {
        var mh$ = FMOD_Channel_GetLoopCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetLoopCount", channel, loopcount);
            }
            return (int)mh$.invokeExact(channel, loopcount);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetLoopPoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_SetLoopPoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLoopPoints(FMOD_CHANNEL *channel, unsigned int loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetLoopPoints$descriptor() {
        return FMOD_Channel_SetLoopPoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLoopPoints(FMOD_CHANNEL *channel, unsigned int loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static MethodHandle FMOD_Channel_SetLoopPoints$handle() {
        return FMOD_Channel_SetLoopPoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLoopPoints(FMOD_CHANNEL *channel, unsigned int loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static MemorySegment FMOD_Channel_SetLoopPoints$address() {
        return FMOD_Channel_SetLoopPoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLoopPoints(FMOD_CHANNEL *channel, unsigned int loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static int FMOD_Channel_SetLoopPoints(MemorySegment channel, int loopstart, int loopstarttype, int loopend, int loopendtype) {
        var mh$ = FMOD_Channel_SetLoopPoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetLoopPoints", channel, loopstart, loopstarttype, loopend, loopendtype);
            }
            return (int)mh$.invokeExact(channel, loopstart, loopstarttype, loopend, loopendtype);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetLoopPoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetLoopPoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLoopPoints(FMOD_CHANNEL *channel, unsigned int *loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetLoopPoints$descriptor() {
        return FMOD_Channel_GetLoopPoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLoopPoints(FMOD_CHANNEL *channel, unsigned int *loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static MethodHandle FMOD_Channel_GetLoopPoints$handle() {
        return FMOD_Channel_GetLoopPoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLoopPoints(FMOD_CHANNEL *channel, unsigned int *loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static MemorySegment FMOD_Channel_GetLoopPoints$address() {
        return FMOD_Channel_GetLoopPoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLoopPoints(FMOD_CHANNEL *channel, unsigned int *loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static int FMOD_Channel_GetLoopPoints(MemorySegment channel, MemorySegment loopstart, int loopstarttype, MemorySegment loopend, int loopendtype) {
        var mh$ = FMOD_Channel_GetLoopPoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetLoopPoints", channel, loopstart, loopstarttype, loopend, loopendtype);
            }
            return (int)mh$.invokeExact(channel, loopstart, loopstarttype, loopend, loopendtype);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_IsVirtual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_IsVirtual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsVirtual(FMOD_CHANNEL *channel, FMOD_BOOL *isvirtual)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_IsVirtual$descriptor() {
        return FMOD_Channel_IsVirtual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsVirtual(FMOD_CHANNEL *channel, FMOD_BOOL *isvirtual)
     * }
     */
    public static MethodHandle FMOD_Channel_IsVirtual$handle() {
        return FMOD_Channel_IsVirtual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsVirtual(FMOD_CHANNEL *channel, FMOD_BOOL *isvirtual)
     * }
     */
    public static MemorySegment FMOD_Channel_IsVirtual$address() {
        return FMOD_Channel_IsVirtual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsVirtual(FMOD_CHANNEL *channel, FMOD_BOOL *isvirtual)
     * }
     */
    public static int FMOD_Channel_IsVirtual(MemorySegment channel, MemorySegment isvirtual) {
        var mh$ = FMOD_Channel_IsVirtual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_IsVirtual", channel, isvirtual);
            }
            return (int)mh$.invokeExact(channel, isvirtual);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetCurrentSound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetCurrentSound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetCurrentSound(FMOD_CHANNEL *channel, FMOD_SOUND **sound)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetCurrentSound$descriptor() {
        return FMOD_Channel_GetCurrentSound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetCurrentSound(FMOD_CHANNEL *channel, FMOD_SOUND **sound)
     * }
     */
    public static MethodHandle FMOD_Channel_GetCurrentSound$handle() {
        return FMOD_Channel_GetCurrentSound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetCurrentSound(FMOD_CHANNEL *channel, FMOD_SOUND **sound)
     * }
     */
    public static MemorySegment FMOD_Channel_GetCurrentSound$address() {
        return FMOD_Channel_GetCurrentSound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetCurrentSound(FMOD_CHANNEL *channel, FMOD_SOUND **sound)
     * }
     */
    public static int FMOD_Channel_GetCurrentSound(MemorySegment channel, MemorySegment sound) {
        var mh$ = FMOD_Channel_GetCurrentSound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetCurrentSound", channel, sound);
            }
            return (int)mh$.invokeExact(channel, sound);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Channel_GetIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetIndex(FMOD_CHANNEL *channel, int *index)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetIndex$descriptor() {
        return FMOD_Channel_GetIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetIndex(FMOD_CHANNEL *channel, int *index)
     * }
     */
    public static MethodHandle FMOD_Channel_GetIndex$handle() {
        return FMOD_Channel_GetIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetIndex(FMOD_CHANNEL *channel, int *index)
     * }
     */
    public static MemorySegment FMOD_Channel_GetIndex$address() {
        return FMOD_Channel_GetIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetIndex(FMOD_CHANNEL *channel, int *index)
     * }
     */
    public static int FMOD_Channel_GetIndex(MemorySegment channel, MemorySegment index) {
        var mh$ = FMOD_Channel_GetIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetIndex", channel, index);
            }
            return (int)mh$.invokeExact(channel, index);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetSystemObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetSystemObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetSystemObject(FMOD_CHANNELGROUP *channelgroup, FMOD_SYSTEM **system)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetSystemObject$descriptor() {
        return FMOD_ChannelGroup_GetSystemObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetSystemObject(FMOD_CHANNELGROUP *channelgroup, FMOD_SYSTEM **system)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetSystemObject$handle() {
        return FMOD_ChannelGroup_GetSystemObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetSystemObject(FMOD_CHANNELGROUP *channelgroup, FMOD_SYSTEM **system)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetSystemObject$address() {
        return FMOD_ChannelGroup_GetSystemObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetSystemObject(FMOD_CHANNELGROUP *channelgroup, FMOD_SYSTEM **system)
     * }
     */
    public static int FMOD_ChannelGroup_GetSystemObject(MemorySegment channelgroup, MemorySegment system) {
        var mh$ = FMOD_ChannelGroup_GetSystemObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetSystemObject", channelgroup, system);
            }
            return (int)mh$.invokeExact(channelgroup, system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Stop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Stop(FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Stop$descriptor() {
        return FMOD_ChannelGroup_Stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Stop(FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Stop$handle() {
        return FMOD_ChannelGroup_Stop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Stop(FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Stop$address() {
        return FMOD_ChannelGroup_Stop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Stop(FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static int FMOD_ChannelGroup_Stop(MemorySegment channelgroup) {
        var mh$ = FMOD_ChannelGroup_Stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Stop", channelgroup);
            }
            return (int)mh$.invokeExact(channelgroup);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPaused(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetPaused$descriptor() {
        return FMOD_ChannelGroup_SetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPaused(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetPaused$handle() {
        return FMOD_ChannelGroup_SetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPaused(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetPaused$address() {
        return FMOD_ChannelGroup_SetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPaused(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused)
     * }
     */
    public static int FMOD_ChannelGroup_SetPaused(MemorySegment channelgroup, int paused) {
        var mh$ = FMOD_ChannelGroup_SetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetPaused", channelgroup, paused);
            }
            return (int)mh$.invokeExact(channelgroup, paused);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetPaused(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *paused)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetPaused$descriptor() {
        return FMOD_ChannelGroup_GetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetPaused(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *paused)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetPaused$handle() {
        return FMOD_ChannelGroup_GetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetPaused(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *paused)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetPaused$address() {
        return FMOD_ChannelGroup_GetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetPaused(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *paused)
     * }
     */
    public static int FMOD_ChannelGroup_GetPaused(MemorySegment channelgroup, MemorySegment paused) {
        var mh$ = FMOD_ChannelGroup_GetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetPaused", channelgroup, paused);
            }
            return (int)mh$.invokeExact(channelgroup, paused);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetVolume(FMOD_CHANNELGROUP *channelgroup, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetVolume$descriptor() {
        return FMOD_ChannelGroup_SetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetVolume(FMOD_CHANNELGROUP *channelgroup, float volume)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetVolume$handle() {
        return FMOD_ChannelGroup_SetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetVolume(FMOD_CHANNELGROUP *channelgroup, float volume)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetVolume$address() {
        return FMOD_ChannelGroup_SetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetVolume(FMOD_CHANNELGROUP *channelgroup, float volume)
     * }
     */
    public static int FMOD_ChannelGroup_SetVolume(MemorySegment channelgroup, float volume) {
        var mh$ = FMOD_ChannelGroup_SetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetVolume", channelgroup, volume);
            }
            return (int)mh$.invokeExact(channelgroup, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetVolume(FMOD_CHANNELGROUP *channelgroup, float *volume)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetVolume$descriptor() {
        return FMOD_ChannelGroup_GetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetVolume(FMOD_CHANNELGROUP *channelgroup, float *volume)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetVolume$handle() {
        return FMOD_ChannelGroup_GetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetVolume(FMOD_CHANNELGROUP *channelgroup, float *volume)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetVolume$address() {
        return FMOD_ChannelGroup_GetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetVolume(FMOD_CHANNELGROUP *channelgroup, float *volume)
     * }
     */
    public static int FMOD_ChannelGroup_GetVolume(MemorySegment channelgroup, MemorySegment volume) {
        var mh$ = FMOD_ChannelGroup_GetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetVolume", channelgroup, volume);
            }
            return (int)mh$.invokeExact(channelgroup, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetVolumeRamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetVolumeRamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetVolumeRamp(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL ramp)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetVolumeRamp$descriptor() {
        return FMOD_ChannelGroup_SetVolumeRamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetVolumeRamp(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL ramp)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetVolumeRamp$handle() {
        return FMOD_ChannelGroup_SetVolumeRamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetVolumeRamp(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL ramp)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetVolumeRamp$address() {
        return FMOD_ChannelGroup_SetVolumeRamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetVolumeRamp(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL ramp)
     * }
     */
    public static int FMOD_ChannelGroup_SetVolumeRamp(MemorySegment channelgroup, int ramp) {
        var mh$ = FMOD_ChannelGroup_SetVolumeRamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetVolumeRamp", channelgroup, ramp);
            }
            return (int)mh$.invokeExact(channelgroup, ramp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetVolumeRamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetVolumeRamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetVolumeRamp(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *ramp)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetVolumeRamp$descriptor() {
        return FMOD_ChannelGroup_GetVolumeRamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetVolumeRamp(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *ramp)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetVolumeRamp$handle() {
        return FMOD_ChannelGroup_GetVolumeRamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetVolumeRamp(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *ramp)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetVolumeRamp$address() {
        return FMOD_ChannelGroup_GetVolumeRamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetVolumeRamp(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *ramp)
     * }
     */
    public static int FMOD_ChannelGroup_GetVolumeRamp(MemorySegment channelgroup, MemorySegment ramp) {
        var mh$ = FMOD_ChannelGroup_GetVolumeRamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetVolumeRamp", channelgroup, ramp);
            }
            return (int)mh$.invokeExact(channelgroup, ramp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetAudibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetAudibility");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetAudibility(FMOD_CHANNELGROUP *channelgroup, float *audibility)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetAudibility$descriptor() {
        return FMOD_ChannelGroup_GetAudibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetAudibility(FMOD_CHANNELGROUP *channelgroup, float *audibility)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetAudibility$handle() {
        return FMOD_ChannelGroup_GetAudibility.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetAudibility(FMOD_CHANNELGROUP *channelgroup, float *audibility)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetAudibility$address() {
        return FMOD_ChannelGroup_GetAudibility.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetAudibility(FMOD_CHANNELGROUP *channelgroup, float *audibility)
     * }
     */
    public static int FMOD_ChannelGroup_GetAudibility(MemorySegment channelgroup, MemorySegment audibility) {
        var mh$ = FMOD_ChannelGroup_GetAudibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetAudibility", channelgroup, audibility);
            }
            return (int)mh$.invokeExact(channelgroup, audibility);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetPitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPitch(FMOD_CHANNELGROUP *channelgroup, float pitch)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetPitch$descriptor() {
        return FMOD_ChannelGroup_SetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPitch(FMOD_CHANNELGROUP *channelgroup, float pitch)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetPitch$handle() {
        return FMOD_ChannelGroup_SetPitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPitch(FMOD_CHANNELGROUP *channelgroup, float pitch)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetPitch$address() {
        return FMOD_ChannelGroup_SetPitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPitch(FMOD_CHANNELGROUP *channelgroup, float pitch)
     * }
     */
    public static int FMOD_ChannelGroup_SetPitch(MemorySegment channelgroup, float pitch) {
        var mh$ = FMOD_ChannelGroup_SetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetPitch", channelgroup, pitch);
            }
            return (int)mh$.invokeExact(channelgroup, pitch);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetPitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetPitch(FMOD_CHANNELGROUP *channelgroup, float *pitch)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetPitch$descriptor() {
        return FMOD_ChannelGroup_GetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetPitch(FMOD_CHANNELGROUP *channelgroup, float *pitch)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetPitch$handle() {
        return FMOD_ChannelGroup_GetPitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetPitch(FMOD_CHANNELGROUP *channelgroup, float *pitch)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetPitch$address() {
        return FMOD_ChannelGroup_GetPitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetPitch(FMOD_CHANNELGROUP *channelgroup, float *pitch)
     * }
     */
    public static int FMOD_ChannelGroup_GetPitch(MemorySegment channelgroup, MemorySegment pitch) {
        var mh$ = FMOD_ChannelGroup_GetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetPitch", channelgroup, pitch);
            }
            return (int)mh$.invokeExact(channelgroup, pitch);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetMute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetMute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMute(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL mute)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetMute$descriptor() {
        return FMOD_ChannelGroup_SetMute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMute(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL mute)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetMute$handle() {
        return FMOD_ChannelGroup_SetMute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMute(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL mute)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetMute$address() {
        return FMOD_ChannelGroup_SetMute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMute(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL mute)
     * }
     */
    public static int FMOD_ChannelGroup_SetMute(MemorySegment channelgroup, int mute) {
        var mh$ = FMOD_ChannelGroup_SetMute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetMute", channelgroup, mute);
            }
            return (int)mh$.invokeExact(channelgroup, mute);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetMute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetMute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMute(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *mute)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetMute$descriptor() {
        return FMOD_ChannelGroup_GetMute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMute(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *mute)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetMute$handle() {
        return FMOD_ChannelGroup_GetMute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMute(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *mute)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetMute$address() {
        return FMOD_ChannelGroup_GetMute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMute(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *mute)
     * }
     */
    public static int FMOD_ChannelGroup_GetMute(MemorySegment channelgroup, MemorySegment mute) {
        var mh$ = FMOD_ChannelGroup_GetMute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetMute", channelgroup, mute);
            }
            return (int)mh$.invokeExact(channelgroup, mute);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetReverbProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetReverbProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetReverbProperties(FMOD_CHANNELGROUP *channelgroup, int instance, float wet)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetReverbProperties$descriptor() {
        return FMOD_ChannelGroup_SetReverbProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetReverbProperties(FMOD_CHANNELGROUP *channelgroup, int instance, float wet)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetReverbProperties$handle() {
        return FMOD_ChannelGroup_SetReverbProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetReverbProperties(FMOD_CHANNELGROUP *channelgroup, int instance, float wet)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetReverbProperties$address() {
        return FMOD_ChannelGroup_SetReverbProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetReverbProperties(FMOD_CHANNELGROUP *channelgroup, int instance, float wet)
     * }
     */
    public static int FMOD_ChannelGroup_SetReverbProperties(MemorySegment channelgroup, int instance, float wet) {
        var mh$ = FMOD_ChannelGroup_SetReverbProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetReverbProperties", channelgroup, instance, wet);
            }
            return (int)mh$.invokeExact(channelgroup, instance, wet);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetReverbProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetReverbProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetReverbProperties(FMOD_CHANNELGROUP *channelgroup, int instance, float *wet)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetReverbProperties$descriptor() {
        return FMOD_ChannelGroup_GetReverbProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetReverbProperties(FMOD_CHANNELGROUP *channelgroup, int instance, float *wet)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetReverbProperties$handle() {
        return FMOD_ChannelGroup_GetReverbProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetReverbProperties(FMOD_CHANNELGROUP *channelgroup, int instance, float *wet)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetReverbProperties$address() {
        return FMOD_ChannelGroup_GetReverbProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetReverbProperties(FMOD_CHANNELGROUP *channelgroup, int instance, float *wet)
     * }
     */
    public static int FMOD_ChannelGroup_GetReverbProperties(MemorySegment channelgroup, int instance, MemorySegment wet) {
        var mh$ = FMOD_ChannelGroup_GetReverbProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetReverbProperties", channelgroup, instance, wet);
            }
            return (int)mh$.invokeExact(channelgroup, instance, wet);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetLowPassGain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetLowPassGain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetLowPassGain(FMOD_CHANNELGROUP *channelgroup, float gain)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetLowPassGain$descriptor() {
        return FMOD_ChannelGroup_SetLowPassGain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetLowPassGain(FMOD_CHANNELGROUP *channelgroup, float gain)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetLowPassGain$handle() {
        return FMOD_ChannelGroup_SetLowPassGain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetLowPassGain(FMOD_CHANNELGROUP *channelgroup, float gain)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetLowPassGain$address() {
        return FMOD_ChannelGroup_SetLowPassGain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetLowPassGain(FMOD_CHANNELGROUP *channelgroup, float gain)
     * }
     */
    public static int FMOD_ChannelGroup_SetLowPassGain(MemorySegment channelgroup, float gain) {
        var mh$ = FMOD_ChannelGroup_SetLowPassGain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetLowPassGain", channelgroup, gain);
            }
            return (int)mh$.invokeExact(channelgroup, gain);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetLowPassGain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetLowPassGain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetLowPassGain(FMOD_CHANNELGROUP *channelgroup, float *gain)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetLowPassGain$descriptor() {
        return FMOD_ChannelGroup_GetLowPassGain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetLowPassGain(FMOD_CHANNELGROUP *channelgroup, float *gain)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetLowPassGain$handle() {
        return FMOD_ChannelGroup_GetLowPassGain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetLowPassGain(FMOD_CHANNELGROUP *channelgroup, float *gain)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetLowPassGain$address() {
        return FMOD_ChannelGroup_GetLowPassGain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetLowPassGain(FMOD_CHANNELGROUP *channelgroup, float *gain)
     * }
     */
    public static int FMOD_ChannelGroup_GetLowPassGain(MemorySegment channelgroup, MemorySegment gain) {
        var mh$ = FMOD_ChannelGroup_GetLowPassGain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetLowPassGain", channelgroup, gain);
            }
            return (int)mh$.invokeExact(channelgroup, gain);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMode(FMOD_CHANNELGROUP *channelgroup, FMOD_MODE mode)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetMode$descriptor() {
        return FMOD_ChannelGroup_SetMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMode(FMOD_CHANNELGROUP *channelgroup, FMOD_MODE mode)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetMode$handle() {
        return FMOD_ChannelGroup_SetMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMode(FMOD_CHANNELGROUP *channelgroup, FMOD_MODE mode)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetMode$address() {
        return FMOD_ChannelGroup_SetMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMode(FMOD_CHANNELGROUP *channelgroup, FMOD_MODE mode)
     * }
     */
    public static int FMOD_ChannelGroup_SetMode(MemorySegment channelgroup, int mode) {
        var mh$ = FMOD_ChannelGroup_SetMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetMode", channelgroup, mode);
            }
            return (int)mh$.invokeExact(channelgroup, mode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMode(FMOD_CHANNELGROUP *channelgroup, FMOD_MODE *mode)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetMode$descriptor() {
        return FMOD_ChannelGroup_GetMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMode(FMOD_CHANNELGROUP *channelgroup, FMOD_MODE *mode)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetMode$handle() {
        return FMOD_ChannelGroup_GetMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMode(FMOD_CHANNELGROUP *channelgroup, FMOD_MODE *mode)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetMode$address() {
        return FMOD_ChannelGroup_GetMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMode(FMOD_CHANNELGROUP *channelgroup, FMOD_MODE *mode)
     * }
     */
    public static int FMOD_ChannelGroup_GetMode(MemorySegment channelgroup, MemorySegment mode) {
        var mh$ = FMOD_ChannelGroup_GetMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetMode", channelgroup, mode);
            }
            return (int)mh$.invokeExact(channelgroup, mode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetCallback(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetCallback$descriptor() {
        return FMOD_ChannelGroup_SetCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetCallback(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetCallback$handle() {
        return FMOD_ChannelGroup_SetCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetCallback(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetCallback$address() {
        return FMOD_ChannelGroup_SetCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetCallback(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static int FMOD_ChannelGroup_SetCallback(MemorySegment channelgroup, MemorySegment callback) {
        var mh$ = FMOD_ChannelGroup_SetCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetCallback", channelgroup, callback);
            }
            return (int)mh$.invokeExact(channelgroup, callback);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_IsPlaying {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_IsPlaying");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_IsPlaying(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *isplaying)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_IsPlaying$descriptor() {
        return FMOD_ChannelGroup_IsPlaying.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_IsPlaying(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *isplaying)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_IsPlaying$handle() {
        return FMOD_ChannelGroup_IsPlaying.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_IsPlaying(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *isplaying)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_IsPlaying$address() {
        return FMOD_ChannelGroup_IsPlaying.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_IsPlaying(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *isplaying)
     * }
     */
    public static int FMOD_ChannelGroup_IsPlaying(MemorySegment channelgroup, MemorySegment isplaying) {
        var mh$ = FMOD_ChannelGroup_IsPlaying.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_IsPlaying", channelgroup, isplaying);
            }
            return (int)mh$.invokeExact(channelgroup, isplaying);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetPan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetPan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPan(FMOD_CHANNELGROUP *channelgroup, float pan)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetPan$descriptor() {
        return FMOD_ChannelGroup_SetPan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPan(FMOD_CHANNELGROUP *channelgroup, float pan)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetPan$handle() {
        return FMOD_ChannelGroup_SetPan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPan(FMOD_CHANNELGROUP *channelgroup, float pan)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetPan$address() {
        return FMOD_ChannelGroup_SetPan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetPan(FMOD_CHANNELGROUP *channelgroup, float pan)
     * }
     */
    public static int FMOD_ChannelGroup_SetPan(MemorySegment channelgroup, float pan) {
        var mh$ = FMOD_ChannelGroup_SetPan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetPan", channelgroup, pan);
            }
            return (int)mh$.invokeExact(channelgroup, pan);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetMixLevelsOutput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetMixLevelsOutput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixLevelsOutput(FMOD_CHANNELGROUP *channelgroup, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetMixLevelsOutput$descriptor() {
        return FMOD_ChannelGroup_SetMixLevelsOutput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixLevelsOutput(FMOD_CHANNELGROUP *channelgroup, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetMixLevelsOutput$handle() {
        return FMOD_ChannelGroup_SetMixLevelsOutput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixLevelsOutput(FMOD_CHANNELGROUP *channelgroup, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetMixLevelsOutput$address() {
        return FMOD_ChannelGroup_SetMixLevelsOutput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixLevelsOutput(FMOD_CHANNELGROUP *channelgroup, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static int FMOD_ChannelGroup_SetMixLevelsOutput(MemorySegment channelgroup, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright) {
        var mh$ = FMOD_ChannelGroup_SetMixLevelsOutput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetMixLevelsOutput", channelgroup, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright);
            }
            return (int)mh$.invokeExact(channelgroup, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetMixLevelsInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetMixLevelsInput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixLevelsInput(FMOD_CHANNELGROUP *channelgroup, float *levels, int numlevels)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetMixLevelsInput$descriptor() {
        return FMOD_ChannelGroup_SetMixLevelsInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixLevelsInput(FMOD_CHANNELGROUP *channelgroup, float *levels, int numlevels)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetMixLevelsInput$handle() {
        return FMOD_ChannelGroup_SetMixLevelsInput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixLevelsInput(FMOD_CHANNELGROUP *channelgroup, float *levels, int numlevels)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetMixLevelsInput$address() {
        return FMOD_ChannelGroup_SetMixLevelsInput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixLevelsInput(FMOD_CHANNELGROUP *channelgroup, float *levels, int numlevels)
     * }
     */
    public static int FMOD_ChannelGroup_SetMixLevelsInput(MemorySegment channelgroup, MemorySegment levels, int numlevels) {
        var mh$ = FMOD_ChannelGroup_SetMixLevelsInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetMixLevelsInput", channelgroup, levels, numlevels);
            }
            return (int)mh$.invokeExact(channelgroup, levels, numlevels);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetMixMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetMixMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixMatrix(FMOD_CHANNELGROUP *channelgroup, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetMixMatrix$descriptor() {
        return FMOD_ChannelGroup_SetMixMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixMatrix(FMOD_CHANNELGROUP *channelgroup, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetMixMatrix$handle() {
        return FMOD_ChannelGroup_SetMixMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixMatrix(FMOD_CHANNELGROUP *channelgroup, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetMixMatrix$address() {
        return FMOD_ChannelGroup_SetMixMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetMixMatrix(FMOD_CHANNELGROUP *channelgroup, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static int FMOD_ChannelGroup_SetMixMatrix(MemorySegment channelgroup, MemorySegment matrix, int outchannels, int inchannels, int inchannel_hop) {
        var mh$ = FMOD_ChannelGroup_SetMixMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetMixMatrix", channelgroup, matrix, outchannels, inchannels, inchannel_hop);
            }
            return (int)mh$.invokeExact(channelgroup, matrix, outchannels, inchannels, inchannel_hop);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetMixMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetMixMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMixMatrix(FMOD_CHANNELGROUP *channelgroup, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetMixMatrix$descriptor() {
        return FMOD_ChannelGroup_GetMixMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMixMatrix(FMOD_CHANNELGROUP *channelgroup, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetMixMatrix$handle() {
        return FMOD_ChannelGroup_GetMixMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMixMatrix(FMOD_CHANNELGROUP *channelgroup, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetMixMatrix$address() {
        return FMOD_ChannelGroup_GetMixMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetMixMatrix(FMOD_CHANNELGROUP *channelgroup, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static int FMOD_ChannelGroup_GetMixMatrix(MemorySegment channelgroup, MemorySegment matrix, MemorySegment outchannels, MemorySegment inchannels, int inchannel_hop) {
        var mh$ = FMOD_ChannelGroup_GetMixMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetMixMatrix", channelgroup, matrix, outchannels, inchannels, inchannel_hop);
            }
            return (int)mh$.invokeExact(channelgroup, matrix, outchannels, inchannels, inchannel_hop);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetDSPClock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetDSPClock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSPClock(FMOD_CHANNELGROUP *channelgroup, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetDSPClock$descriptor() {
        return FMOD_ChannelGroup_GetDSPClock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSPClock(FMOD_CHANNELGROUP *channelgroup, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetDSPClock$handle() {
        return FMOD_ChannelGroup_GetDSPClock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSPClock(FMOD_CHANNELGROUP *channelgroup, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetDSPClock$address() {
        return FMOD_ChannelGroup_GetDSPClock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSPClock(FMOD_CHANNELGROUP *channelgroup, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static int FMOD_ChannelGroup_GetDSPClock(MemorySegment channelgroup, MemorySegment dspclock, MemorySegment parentclock) {
        var mh$ = FMOD_ChannelGroup_GetDSPClock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetDSPClock", channelgroup, dspclock, parentclock);
            }
            return (int)mh$.invokeExact(channelgroup, dspclock, parentclock);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_LONG_LONG,
            fmod_studio_h.C_LONG_LONG,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetDelay(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetDelay$descriptor() {
        return FMOD_ChannelGroup_SetDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetDelay(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetDelay$handle() {
        return FMOD_ChannelGroup_SetDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetDelay(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetDelay$address() {
        return FMOD_ChannelGroup_SetDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetDelay(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static int FMOD_ChannelGroup_SetDelay(MemorySegment channelgroup, long dspclock_start, long dspclock_end, int stopchannels) {
        var mh$ = FMOD_ChannelGroup_SetDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetDelay", channelgroup, dspclock_start, dspclock_end, stopchannels);
            }
            return (int)mh$.invokeExact(channelgroup, dspclock_start, dspclock_end, stopchannels);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDelay(FMOD_CHANNELGROUP *channelgroup, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetDelay$descriptor() {
        return FMOD_ChannelGroup_GetDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDelay(FMOD_CHANNELGROUP *channelgroup, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetDelay$handle() {
        return FMOD_ChannelGroup_GetDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDelay(FMOD_CHANNELGROUP *channelgroup, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetDelay$address() {
        return FMOD_ChannelGroup_GetDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDelay(FMOD_CHANNELGROUP *channelgroup, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static int FMOD_ChannelGroup_GetDelay(MemorySegment channelgroup, MemorySegment dspclock_start, MemorySegment dspclock_end, MemorySegment stopchannels) {
        var mh$ = FMOD_ChannelGroup_GetDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetDelay", channelgroup, dspclock_start, dspclock_end, stopchannels);
            }
            return (int)mh$.invokeExact(channelgroup, dspclock_start, dspclock_end, stopchannels);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_AddFadePoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_LONG_LONG,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_AddFadePoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddFadePoint(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_AddFadePoint$descriptor() {
        return FMOD_ChannelGroup_AddFadePoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddFadePoint(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_AddFadePoint$handle() {
        return FMOD_ChannelGroup_AddFadePoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddFadePoint(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_AddFadePoint$address() {
        return FMOD_ChannelGroup_AddFadePoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddFadePoint(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume)
     * }
     */
    public static int FMOD_ChannelGroup_AddFadePoint(MemorySegment channelgroup, long dspclock, float volume) {
        var mh$ = FMOD_ChannelGroup_AddFadePoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_AddFadePoint", channelgroup, dspclock, volume);
            }
            return (int)mh$.invokeExact(channelgroup, dspclock, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetFadePointRamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_LONG_LONG,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetFadePointRamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetFadePointRamp(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetFadePointRamp$descriptor() {
        return FMOD_ChannelGroup_SetFadePointRamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetFadePointRamp(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetFadePointRamp$handle() {
        return FMOD_ChannelGroup_SetFadePointRamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetFadePointRamp(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetFadePointRamp$address() {
        return FMOD_ChannelGroup_SetFadePointRamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetFadePointRamp(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock, float volume)
     * }
     */
    public static int FMOD_ChannelGroup_SetFadePointRamp(MemorySegment channelgroup, long dspclock, float volume) {
        var mh$ = FMOD_ChannelGroup_SetFadePointRamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetFadePointRamp", channelgroup, dspclock, volume);
            }
            return (int)mh$.invokeExact(channelgroup, dspclock, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_RemoveFadePoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_LONG_LONG,
            fmod_studio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_RemoveFadePoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_RemoveFadePoints(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_RemoveFadePoints$descriptor() {
        return FMOD_ChannelGroup_RemoveFadePoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_RemoveFadePoints(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_RemoveFadePoints$handle() {
        return FMOD_ChannelGroup_RemoveFadePoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_RemoveFadePoints(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_RemoveFadePoints$address() {
        return FMOD_ChannelGroup_RemoveFadePoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_RemoveFadePoints(FMOD_CHANNELGROUP *channelgroup, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static int FMOD_ChannelGroup_RemoveFadePoints(MemorySegment channelgroup, long dspclock_start, long dspclock_end) {
        var mh$ = FMOD_ChannelGroup_RemoveFadePoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_RemoveFadePoints", channelgroup, dspclock_start, dspclock_end);
            }
            return (int)mh$.invokeExact(channelgroup, dspclock_start, dspclock_end);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetFadePoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetFadePoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetFadePoints(FMOD_CHANNELGROUP *channelgroup, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetFadePoints$descriptor() {
        return FMOD_ChannelGroup_GetFadePoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetFadePoints(FMOD_CHANNELGROUP *channelgroup, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetFadePoints$handle() {
        return FMOD_ChannelGroup_GetFadePoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetFadePoints(FMOD_CHANNELGROUP *channelgroup, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetFadePoints$address() {
        return FMOD_ChannelGroup_GetFadePoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetFadePoints(FMOD_CHANNELGROUP *channelgroup, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static int FMOD_ChannelGroup_GetFadePoints(MemorySegment channelgroup, MemorySegment numpoints, MemorySegment point_dspclock, MemorySegment point_volume) {
        var mh$ = FMOD_ChannelGroup_GetFadePoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetFadePoints", channelgroup, numpoints, point_dspclock, point_volume);
            }
            return (int)mh$.invokeExact(channelgroup, numpoints, point_dspclock, point_volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSP(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_DSP **dsp)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetDSP$descriptor() {
        return FMOD_ChannelGroup_GetDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSP(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_DSP **dsp)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetDSP$handle() {
        return FMOD_ChannelGroup_GetDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSP(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_DSP **dsp)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetDSP$address() {
        return FMOD_ChannelGroup_GetDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSP(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_DSP **dsp)
     * }
     */
    public static int FMOD_ChannelGroup_GetDSP(MemorySegment channelgroup, int index, MemorySegment dsp) {
        var mh$ = FMOD_ChannelGroup_GetDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetDSP", channelgroup, index, dsp);
            }
            return (int)mh$.invokeExact(channelgroup, index, dsp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_AddDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_AddDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddDSP(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_DSP *dsp)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_AddDSP$descriptor() {
        return FMOD_ChannelGroup_AddDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddDSP(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_DSP *dsp)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_AddDSP$handle() {
        return FMOD_ChannelGroup_AddDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddDSP(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_DSP *dsp)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_AddDSP$address() {
        return FMOD_ChannelGroup_AddDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddDSP(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_DSP *dsp)
     * }
     */
    public static int FMOD_ChannelGroup_AddDSP(MemorySegment channelgroup, int index, MemorySegment dsp) {
        var mh$ = FMOD_ChannelGroup_AddDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_AddDSP", channelgroup, index, dsp);
            }
            return (int)mh$.invokeExact(channelgroup, index, dsp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_RemoveDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_RemoveDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_RemoveDSP(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_RemoveDSP$descriptor() {
        return FMOD_ChannelGroup_RemoveDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_RemoveDSP(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_RemoveDSP$handle() {
        return FMOD_ChannelGroup_RemoveDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_RemoveDSP(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_RemoveDSP$address() {
        return FMOD_ChannelGroup_RemoveDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_RemoveDSP(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp)
     * }
     */
    public static int FMOD_ChannelGroup_RemoveDSP(MemorySegment channelgroup, MemorySegment dsp) {
        var mh$ = FMOD_ChannelGroup_RemoveDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_RemoveDSP", channelgroup, dsp);
            }
            return (int)mh$.invokeExact(channelgroup, dsp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetNumDSPs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetNumDSPs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumDSPs(FMOD_CHANNELGROUP *channelgroup, int *numdsps)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetNumDSPs$descriptor() {
        return FMOD_ChannelGroup_GetNumDSPs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumDSPs(FMOD_CHANNELGROUP *channelgroup, int *numdsps)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetNumDSPs$handle() {
        return FMOD_ChannelGroup_GetNumDSPs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumDSPs(FMOD_CHANNELGROUP *channelgroup, int *numdsps)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetNumDSPs$address() {
        return FMOD_ChannelGroup_GetNumDSPs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumDSPs(FMOD_CHANNELGROUP *channelgroup, int *numdsps)
     * }
     */
    public static int FMOD_ChannelGroup_GetNumDSPs(MemorySegment channelgroup, MemorySegment numdsps) {
        var mh$ = FMOD_ChannelGroup_GetNumDSPs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetNumDSPs", channelgroup, numdsps);
            }
            return (int)mh$.invokeExact(channelgroup, numdsps);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetDSPIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetDSPIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetDSPIndex(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp, int index)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetDSPIndex$descriptor() {
        return FMOD_ChannelGroup_SetDSPIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetDSPIndex(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp, int index)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetDSPIndex$handle() {
        return FMOD_ChannelGroup_SetDSPIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetDSPIndex(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp, int index)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetDSPIndex$address() {
        return FMOD_ChannelGroup_SetDSPIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetDSPIndex(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp, int index)
     * }
     */
    public static int FMOD_ChannelGroup_SetDSPIndex(MemorySegment channelgroup, MemorySegment dsp, int index) {
        var mh$ = FMOD_ChannelGroup_SetDSPIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetDSPIndex", channelgroup, dsp, index);
            }
            return (int)mh$.invokeExact(channelgroup, dsp, index);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetDSPIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetDSPIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSPIndex(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp, int *index)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetDSPIndex$descriptor() {
        return FMOD_ChannelGroup_GetDSPIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSPIndex(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp, int *index)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetDSPIndex$handle() {
        return FMOD_ChannelGroup_GetDSPIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSPIndex(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp, int *index)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetDSPIndex$address() {
        return FMOD_ChannelGroup_GetDSPIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetDSPIndex(FMOD_CHANNELGROUP *channelgroup, FMOD_DSP *dsp, int *index)
     * }
     */
    public static int FMOD_ChannelGroup_GetDSPIndex(MemorySegment channelgroup, MemorySegment dsp, MemorySegment index) {
        var mh$ = FMOD_ChannelGroup_GetDSPIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetDSPIndex", channelgroup, dsp, index);
            }
            return (int)mh$.invokeExact(channelgroup, dsp, index);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Set3DAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Set3DAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DAttributes(FMOD_CHANNELGROUP *channelgroup, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Set3DAttributes$descriptor() {
        return FMOD_ChannelGroup_Set3DAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DAttributes(FMOD_CHANNELGROUP *channelgroup, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Set3DAttributes$handle() {
        return FMOD_ChannelGroup_Set3DAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DAttributes(FMOD_CHANNELGROUP *channelgroup, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Set3DAttributes$address() {
        return FMOD_ChannelGroup_Set3DAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DAttributes(FMOD_CHANNELGROUP *channelgroup, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel)
     * }
     */
    public static int FMOD_ChannelGroup_Set3DAttributes(MemorySegment channelgroup, MemorySegment pos, MemorySegment vel) {
        var mh$ = FMOD_ChannelGroup_Set3DAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Set3DAttributes", channelgroup, pos, vel);
            }
            return (int)mh$.invokeExact(channelgroup, pos, vel);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Get3DAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Get3DAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DAttributes(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *pos, FMOD_VECTOR *vel)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Get3DAttributes$descriptor() {
        return FMOD_ChannelGroup_Get3DAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DAttributes(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *pos, FMOD_VECTOR *vel)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Get3DAttributes$handle() {
        return FMOD_ChannelGroup_Get3DAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DAttributes(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *pos, FMOD_VECTOR *vel)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Get3DAttributes$address() {
        return FMOD_ChannelGroup_Get3DAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DAttributes(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *pos, FMOD_VECTOR *vel)
     * }
     */
    public static int FMOD_ChannelGroup_Get3DAttributes(MemorySegment channelgroup, MemorySegment pos, MemorySegment vel) {
        var mh$ = FMOD_ChannelGroup_Get3DAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Get3DAttributes", channelgroup, pos, vel);
            }
            return (int)mh$.invokeExact(channelgroup, pos, vel);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Set3DMinMaxDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Set3DMinMaxDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DMinMaxDistance(FMOD_CHANNELGROUP *channelgroup, float mindistance, float maxdistance)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Set3DMinMaxDistance$descriptor() {
        return FMOD_ChannelGroup_Set3DMinMaxDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DMinMaxDistance(FMOD_CHANNELGROUP *channelgroup, float mindistance, float maxdistance)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Set3DMinMaxDistance$handle() {
        return FMOD_ChannelGroup_Set3DMinMaxDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DMinMaxDistance(FMOD_CHANNELGROUP *channelgroup, float mindistance, float maxdistance)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Set3DMinMaxDistance$address() {
        return FMOD_ChannelGroup_Set3DMinMaxDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DMinMaxDistance(FMOD_CHANNELGROUP *channelgroup, float mindistance, float maxdistance)
     * }
     */
    public static int FMOD_ChannelGroup_Set3DMinMaxDistance(MemorySegment channelgroup, float mindistance, float maxdistance) {
        var mh$ = FMOD_ChannelGroup_Set3DMinMaxDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Set3DMinMaxDistance", channelgroup, mindistance, maxdistance);
            }
            return (int)mh$.invokeExact(channelgroup, mindistance, maxdistance);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Get3DMinMaxDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Get3DMinMaxDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DMinMaxDistance(FMOD_CHANNELGROUP *channelgroup, float *mindistance, float *maxdistance)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Get3DMinMaxDistance$descriptor() {
        return FMOD_ChannelGroup_Get3DMinMaxDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DMinMaxDistance(FMOD_CHANNELGROUP *channelgroup, float *mindistance, float *maxdistance)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Get3DMinMaxDistance$handle() {
        return FMOD_ChannelGroup_Get3DMinMaxDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DMinMaxDistance(FMOD_CHANNELGROUP *channelgroup, float *mindistance, float *maxdistance)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Get3DMinMaxDistance$address() {
        return FMOD_ChannelGroup_Get3DMinMaxDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DMinMaxDistance(FMOD_CHANNELGROUP *channelgroup, float *mindistance, float *maxdistance)
     * }
     */
    public static int FMOD_ChannelGroup_Get3DMinMaxDistance(MemorySegment channelgroup, MemorySegment mindistance, MemorySegment maxdistance) {
        var mh$ = FMOD_ChannelGroup_Get3DMinMaxDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Get3DMinMaxDistance", channelgroup, mindistance, maxdistance);
            }
            return (int)mh$.invokeExact(channelgroup, mindistance, maxdistance);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Set3DConeSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Set3DConeSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DConeSettings(FMOD_CHANNELGROUP *channelgroup, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Set3DConeSettings$descriptor() {
        return FMOD_ChannelGroup_Set3DConeSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DConeSettings(FMOD_CHANNELGROUP *channelgroup, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Set3DConeSettings$handle() {
        return FMOD_ChannelGroup_Set3DConeSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DConeSettings(FMOD_CHANNELGROUP *channelgroup, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Set3DConeSettings$address() {
        return FMOD_ChannelGroup_Set3DConeSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DConeSettings(FMOD_CHANNELGROUP *channelgroup, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static int FMOD_ChannelGroup_Set3DConeSettings(MemorySegment channelgroup, float insideconeangle, float outsideconeangle, float outsidevolume) {
        var mh$ = FMOD_ChannelGroup_Set3DConeSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Set3DConeSettings", channelgroup, insideconeangle, outsideconeangle, outsidevolume);
            }
            return (int)mh$.invokeExact(channelgroup, insideconeangle, outsideconeangle, outsidevolume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Get3DConeSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Get3DConeSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DConeSettings(FMOD_CHANNELGROUP *channelgroup, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Get3DConeSettings$descriptor() {
        return FMOD_ChannelGroup_Get3DConeSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DConeSettings(FMOD_CHANNELGROUP *channelgroup, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Get3DConeSettings$handle() {
        return FMOD_ChannelGroup_Get3DConeSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DConeSettings(FMOD_CHANNELGROUP *channelgroup, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Get3DConeSettings$address() {
        return FMOD_ChannelGroup_Get3DConeSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DConeSettings(FMOD_CHANNELGROUP *channelgroup, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static int FMOD_ChannelGroup_Get3DConeSettings(MemorySegment channelgroup, MemorySegment insideconeangle, MemorySegment outsideconeangle, MemorySegment outsidevolume) {
        var mh$ = FMOD_ChannelGroup_Get3DConeSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Get3DConeSettings", channelgroup, insideconeangle, outsideconeangle, outsidevolume);
            }
            return (int)mh$.invokeExact(channelgroup, insideconeangle, outsideconeangle, outsidevolume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Set3DConeOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Set3DConeOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DConeOrientation(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *orientation)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Set3DConeOrientation$descriptor() {
        return FMOD_ChannelGroup_Set3DConeOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DConeOrientation(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *orientation)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Set3DConeOrientation$handle() {
        return FMOD_ChannelGroup_Set3DConeOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DConeOrientation(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *orientation)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Set3DConeOrientation$address() {
        return FMOD_ChannelGroup_Set3DConeOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DConeOrientation(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *orientation)
     * }
     */
    public static int FMOD_ChannelGroup_Set3DConeOrientation(MemorySegment channelgroup, MemorySegment orientation) {
        var mh$ = FMOD_ChannelGroup_Set3DConeOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Set3DConeOrientation", channelgroup, orientation);
            }
            return (int)mh$.invokeExact(channelgroup, orientation);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Get3DConeOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Get3DConeOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DConeOrientation(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *orientation)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Get3DConeOrientation$descriptor() {
        return FMOD_ChannelGroup_Get3DConeOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DConeOrientation(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *orientation)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Get3DConeOrientation$handle() {
        return FMOD_ChannelGroup_Get3DConeOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DConeOrientation(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *orientation)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Get3DConeOrientation$address() {
        return FMOD_ChannelGroup_Get3DConeOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DConeOrientation(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *orientation)
     * }
     */
    public static int FMOD_ChannelGroup_Get3DConeOrientation(MemorySegment channelgroup, MemorySegment orientation) {
        var mh$ = FMOD_ChannelGroup_Get3DConeOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Get3DConeOrientation", channelgroup, orientation);
            }
            return (int)mh$.invokeExact(channelgroup, orientation);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Set3DCustomRolloff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Set3DCustomRolloff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DCustomRolloff(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Set3DCustomRolloff$descriptor() {
        return FMOD_ChannelGroup_Set3DCustomRolloff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DCustomRolloff(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Set3DCustomRolloff$handle() {
        return FMOD_ChannelGroup_Set3DCustomRolloff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DCustomRolloff(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Set3DCustomRolloff$address() {
        return FMOD_ChannelGroup_Set3DCustomRolloff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DCustomRolloff(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static int FMOD_ChannelGroup_Set3DCustomRolloff(MemorySegment channelgroup, MemorySegment points, int numpoints) {
        var mh$ = FMOD_ChannelGroup_Set3DCustomRolloff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Set3DCustomRolloff", channelgroup, points, numpoints);
            }
            return (int)mh$.invokeExact(channelgroup, points, numpoints);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Get3DCustomRolloff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Get3DCustomRolloff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DCustomRolloff(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Get3DCustomRolloff$descriptor() {
        return FMOD_ChannelGroup_Get3DCustomRolloff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DCustomRolloff(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Get3DCustomRolloff$handle() {
        return FMOD_ChannelGroup_Get3DCustomRolloff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DCustomRolloff(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Get3DCustomRolloff$address() {
        return FMOD_ChannelGroup_Get3DCustomRolloff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DCustomRolloff(FMOD_CHANNELGROUP *channelgroup, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static int FMOD_ChannelGroup_Get3DCustomRolloff(MemorySegment channelgroup, MemorySegment points, MemorySegment numpoints) {
        var mh$ = FMOD_ChannelGroup_Get3DCustomRolloff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Get3DCustomRolloff", channelgroup, points, numpoints);
            }
            return (int)mh$.invokeExact(channelgroup, points, numpoints);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Set3DOcclusion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Set3DOcclusion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DOcclusion(FMOD_CHANNELGROUP *channelgroup, float directocclusion, float reverbocclusion)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Set3DOcclusion$descriptor() {
        return FMOD_ChannelGroup_Set3DOcclusion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DOcclusion(FMOD_CHANNELGROUP *channelgroup, float directocclusion, float reverbocclusion)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Set3DOcclusion$handle() {
        return FMOD_ChannelGroup_Set3DOcclusion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DOcclusion(FMOD_CHANNELGROUP *channelgroup, float directocclusion, float reverbocclusion)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Set3DOcclusion$address() {
        return FMOD_ChannelGroup_Set3DOcclusion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DOcclusion(FMOD_CHANNELGROUP *channelgroup, float directocclusion, float reverbocclusion)
     * }
     */
    public static int FMOD_ChannelGroup_Set3DOcclusion(MemorySegment channelgroup, float directocclusion, float reverbocclusion) {
        var mh$ = FMOD_ChannelGroup_Set3DOcclusion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Set3DOcclusion", channelgroup, directocclusion, reverbocclusion);
            }
            return (int)mh$.invokeExact(channelgroup, directocclusion, reverbocclusion);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Get3DOcclusion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Get3DOcclusion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DOcclusion(FMOD_CHANNELGROUP *channelgroup, float *directocclusion, float *reverbocclusion)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Get3DOcclusion$descriptor() {
        return FMOD_ChannelGroup_Get3DOcclusion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DOcclusion(FMOD_CHANNELGROUP *channelgroup, float *directocclusion, float *reverbocclusion)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Get3DOcclusion$handle() {
        return FMOD_ChannelGroup_Get3DOcclusion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DOcclusion(FMOD_CHANNELGROUP *channelgroup, float *directocclusion, float *reverbocclusion)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Get3DOcclusion$address() {
        return FMOD_ChannelGroup_Get3DOcclusion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DOcclusion(FMOD_CHANNELGROUP *channelgroup, float *directocclusion, float *reverbocclusion)
     * }
     */
    public static int FMOD_ChannelGroup_Get3DOcclusion(MemorySegment channelgroup, MemorySegment directocclusion, MemorySegment reverbocclusion) {
        var mh$ = FMOD_ChannelGroup_Get3DOcclusion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Get3DOcclusion", channelgroup, directocclusion, reverbocclusion);
            }
            return (int)mh$.invokeExact(channelgroup, directocclusion, reverbocclusion);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Set3DSpread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Set3DSpread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DSpread(FMOD_CHANNELGROUP *channelgroup, float angle)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Set3DSpread$descriptor() {
        return FMOD_ChannelGroup_Set3DSpread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DSpread(FMOD_CHANNELGROUP *channelgroup, float angle)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Set3DSpread$handle() {
        return FMOD_ChannelGroup_Set3DSpread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DSpread(FMOD_CHANNELGROUP *channelgroup, float angle)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Set3DSpread$address() {
        return FMOD_ChannelGroup_Set3DSpread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DSpread(FMOD_CHANNELGROUP *channelgroup, float angle)
     * }
     */
    public static int FMOD_ChannelGroup_Set3DSpread(MemorySegment channelgroup, float angle) {
        var mh$ = FMOD_ChannelGroup_Set3DSpread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Set3DSpread", channelgroup, angle);
            }
            return (int)mh$.invokeExact(channelgroup, angle);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Get3DSpread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Get3DSpread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DSpread(FMOD_CHANNELGROUP *channelgroup, float *angle)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Get3DSpread$descriptor() {
        return FMOD_ChannelGroup_Get3DSpread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DSpread(FMOD_CHANNELGROUP *channelgroup, float *angle)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Get3DSpread$handle() {
        return FMOD_ChannelGroup_Get3DSpread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DSpread(FMOD_CHANNELGROUP *channelgroup, float *angle)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Get3DSpread$address() {
        return FMOD_ChannelGroup_Get3DSpread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DSpread(FMOD_CHANNELGROUP *channelgroup, float *angle)
     * }
     */
    public static int FMOD_ChannelGroup_Get3DSpread(MemorySegment channelgroup, MemorySegment angle) {
        var mh$ = FMOD_ChannelGroup_Get3DSpread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Get3DSpread", channelgroup, angle);
            }
            return (int)mh$.invokeExact(channelgroup, angle);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Set3DLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Set3DLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DLevel(FMOD_CHANNELGROUP *channelgroup, float level)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Set3DLevel$descriptor() {
        return FMOD_ChannelGroup_Set3DLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DLevel(FMOD_CHANNELGROUP *channelgroup, float level)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Set3DLevel$handle() {
        return FMOD_ChannelGroup_Set3DLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DLevel(FMOD_CHANNELGROUP *channelgroup, float level)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Set3DLevel$address() {
        return FMOD_ChannelGroup_Set3DLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DLevel(FMOD_CHANNELGROUP *channelgroup, float level)
     * }
     */
    public static int FMOD_ChannelGroup_Set3DLevel(MemorySegment channelgroup, float level) {
        var mh$ = FMOD_ChannelGroup_Set3DLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Set3DLevel", channelgroup, level);
            }
            return (int)mh$.invokeExact(channelgroup, level);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Get3DLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Get3DLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DLevel(FMOD_CHANNELGROUP *channelgroup, float *level)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Get3DLevel$descriptor() {
        return FMOD_ChannelGroup_Get3DLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DLevel(FMOD_CHANNELGROUP *channelgroup, float *level)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Get3DLevel$handle() {
        return FMOD_ChannelGroup_Get3DLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DLevel(FMOD_CHANNELGROUP *channelgroup, float *level)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Get3DLevel$address() {
        return FMOD_ChannelGroup_Get3DLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DLevel(FMOD_CHANNELGROUP *channelgroup, float *level)
     * }
     */
    public static int FMOD_ChannelGroup_Get3DLevel(MemorySegment channelgroup, MemorySegment level) {
        var mh$ = FMOD_ChannelGroup_Get3DLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Get3DLevel", channelgroup, level);
            }
            return (int)mh$.invokeExact(channelgroup, level);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Set3DDopplerLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Set3DDopplerLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DDopplerLevel(FMOD_CHANNELGROUP *channelgroup, float level)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Set3DDopplerLevel$descriptor() {
        return FMOD_ChannelGroup_Set3DDopplerLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DDopplerLevel(FMOD_CHANNELGROUP *channelgroup, float level)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Set3DDopplerLevel$handle() {
        return FMOD_ChannelGroup_Set3DDopplerLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DDopplerLevel(FMOD_CHANNELGROUP *channelgroup, float level)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Set3DDopplerLevel$address() {
        return FMOD_ChannelGroup_Set3DDopplerLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DDopplerLevel(FMOD_CHANNELGROUP *channelgroup, float level)
     * }
     */
    public static int FMOD_ChannelGroup_Set3DDopplerLevel(MemorySegment channelgroup, float level) {
        var mh$ = FMOD_ChannelGroup_Set3DDopplerLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Set3DDopplerLevel", channelgroup, level);
            }
            return (int)mh$.invokeExact(channelgroup, level);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Get3DDopplerLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Get3DDopplerLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DDopplerLevel(FMOD_CHANNELGROUP *channelgroup, float *level)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Get3DDopplerLevel$descriptor() {
        return FMOD_ChannelGroup_Get3DDopplerLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DDopplerLevel(FMOD_CHANNELGROUP *channelgroup, float *level)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Get3DDopplerLevel$handle() {
        return FMOD_ChannelGroup_Get3DDopplerLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DDopplerLevel(FMOD_CHANNELGROUP *channelgroup, float *level)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Get3DDopplerLevel$address() {
        return FMOD_ChannelGroup_Get3DDopplerLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DDopplerLevel(FMOD_CHANNELGROUP *channelgroup, float *level)
     * }
     */
    public static int FMOD_ChannelGroup_Get3DDopplerLevel(MemorySegment channelgroup, MemorySegment level) {
        var mh$ = FMOD_ChannelGroup_Get3DDopplerLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Get3DDopplerLevel", channelgroup, level);
            }
            return (int)mh$.invokeExact(channelgroup, level);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Set3DDistanceFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Set3DDistanceFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DDistanceFilter(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL custom, float customLevel, float centerFreq)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Set3DDistanceFilter$descriptor() {
        return FMOD_ChannelGroup_Set3DDistanceFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DDistanceFilter(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL custom, float customLevel, float centerFreq)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Set3DDistanceFilter$handle() {
        return FMOD_ChannelGroup_Set3DDistanceFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DDistanceFilter(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL custom, float customLevel, float centerFreq)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Set3DDistanceFilter$address() {
        return FMOD_ChannelGroup_Set3DDistanceFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Set3DDistanceFilter(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL custom, float customLevel, float centerFreq)
     * }
     */
    public static int FMOD_ChannelGroup_Set3DDistanceFilter(MemorySegment channelgroup, int custom, float customLevel, float centerFreq) {
        var mh$ = FMOD_ChannelGroup_Set3DDistanceFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Set3DDistanceFilter", channelgroup, custom, customLevel, centerFreq);
            }
            return (int)mh$.invokeExact(channelgroup, custom, customLevel, centerFreq);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Get3DDistanceFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Get3DDistanceFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DDistanceFilter(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *custom, float *customLevel, float *centerFreq)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Get3DDistanceFilter$descriptor() {
        return FMOD_ChannelGroup_Get3DDistanceFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DDistanceFilter(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *custom, float *customLevel, float *centerFreq)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Get3DDistanceFilter$handle() {
        return FMOD_ChannelGroup_Get3DDistanceFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DDistanceFilter(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *custom, float *customLevel, float *centerFreq)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Get3DDistanceFilter$address() {
        return FMOD_ChannelGroup_Get3DDistanceFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Get3DDistanceFilter(FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL *custom, float *customLevel, float *centerFreq)
     * }
     */
    public static int FMOD_ChannelGroup_Get3DDistanceFilter(MemorySegment channelgroup, MemorySegment custom, MemorySegment customLevel, MemorySegment centerFreq) {
        var mh$ = FMOD_ChannelGroup_Get3DDistanceFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Get3DDistanceFilter", channelgroup, custom, customLevel, centerFreq);
            }
            return (int)mh$.invokeExact(channelgroup, custom, customLevel, centerFreq);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetUserData(FMOD_CHANNELGROUP *channelgroup, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_SetUserData$descriptor() {
        return FMOD_ChannelGroup_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetUserData(FMOD_CHANNELGROUP *channelgroup, void *userdata)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_SetUserData$handle() {
        return FMOD_ChannelGroup_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetUserData(FMOD_CHANNELGROUP *channelgroup, void *userdata)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_SetUserData$address() {
        return FMOD_ChannelGroup_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_SetUserData(FMOD_CHANNELGROUP *channelgroup, void *userdata)
     * }
     */
    public static int FMOD_ChannelGroup_SetUserData(MemorySegment channelgroup, MemorySegment userdata) {
        var mh$ = FMOD_ChannelGroup_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_SetUserData", channelgroup, userdata);
            }
            return (int)mh$.invokeExact(channelgroup, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetUserData(FMOD_CHANNELGROUP *channelgroup, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetUserData$descriptor() {
        return FMOD_ChannelGroup_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetUserData(FMOD_CHANNELGROUP *channelgroup, void **userdata)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetUserData$handle() {
        return FMOD_ChannelGroup_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetUserData(FMOD_CHANNELGROUP *channelgroup, void **userdata)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetUserData$address() {
        return FMOD_ChannelGroup_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetUserData(FMOD_CHANNELGROUP *channelgroup, void **userdata)
     * }
     */
    public static int FMOD_ChannelGroup_GetUserData(MemorySegment channelgroup, MemorySegment userdata) {
        var mh$ = FMOD_ChannelGroup_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetUserData", channelgroup, userdata);
            }
            return (int)mh$.invokeExact(channelgroup, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Release(FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_Release$descriptor() {
        return FMOD_ChannelGroup_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Release(FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_Release$handle() {
        return FMOD_ChannelGroup_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Release(FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_Release$address() {
        return FMOD_ChannelGroup_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_Release(FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static int FMOD_ChannelGroup_Release(MemorySegment channelgroup) {
        var mh$ = FMOD_ChannelGroup_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_Release", channelgroup);
            }
            return (int)mh$.invokeExact(channelgroup);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_AddGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_AddGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddGroup(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELGROUP *group, FMOD_BOOL propagatedspclock, FMOD_DSPCONNECTION **connection)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_AddGroup$descriptor() {
        return FMOD_ChannelGroup_AddGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddGroup(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELGROUP *group, FMOD_BOOL propagatedspclock, FMOD_DSPCONNECTION **connection)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_AddGroup$handle() {
        return FMOD_ChannelGroup_AddGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddGroup(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELGROUP *group, FMOD_BOOL propagatedspclock, FMOD_DSPCONNECTION **connection)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_AddGroup$address() {
        return FMOD_ChannelGroup_AddGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_AddGroup(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELGROUP *group, FMOD_BOOL propagatedspclock, FMOD_DSPCONNECTION **connection)
     * }
     */
    public static int FMOD_ChannelGroup_AddGroup(MemorySegment channelgroup, MemorySegment group, int propagatedspclock, MemorySegment connection) {
        var mh$ = FMOD_ChannelGroup_AddGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_AddGroup", channelgroup, group, propagatedspclock, connection);
            }
            return (int)mh$.invokeExact(channelgroup, group, propagatedspclock, connection);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetNumGroups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetNumGroups");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumGroups(FMOD_CHANNELGROUP *channelgroup, int *numgroups)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetNumGroups$descriptor() {
        return FMOD_ChannelGroup_GetNumGroups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumGroups(FMOD_CHANNELGROUP *channelgroup, int *numgroups)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetNumGroups$handle() {
        return FMOD_ChannelGroup_GetNumGroups.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumGroups(FMOD_CHANNELGROUP *channelgroup, int *numgroups)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetNumGroups$address() {
        return FMOD_ChannelGroup_GetNumGroups.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumGroups(FMOD_CHANNELGROUP *channelgroup, int *numgroups)
     * }
     */
    public static int FMOD_ChannelGroup_GetNumGroups(MemorySegment channelgroup, MemorySegment numgroups) {
        var mh$ = FMOD_ChannelGroup_GetNumGroups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetNumGroups", channelgroup, numgroups);
            }
            return (int)mh$.invokeExact(channelgroup, numgroups);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetGroup(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_CHANNELGROUP **group)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetGroup$descriptor() {
        return FMOD_ChannelGroup_GetGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetGroup(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_CHANNELGROUP **group)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetGroup$handle() {
        return FMOD_ChannelGroup_GetGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetGroup(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_CHANNELGROUP **group)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetGroup$address() {
        return FMOD_ChannelGroup_GetGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetGroup(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_CHANNELGROUP **group)
     * }
     */
    public static int FMOD_ChannelGroup_GetGroup(MemorySegment channelgroup, int index, MemorySegment group) {
        var mh$ = FMOD_ChannelGroup_GetGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetGroup", channelgroup, index, group);
            }
            return (int)mh$.invokeExact(channelgroup, index, group);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetParentGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetParentGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetParentGroup(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELGROUP **group)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetParentGroup$descriptor() {
        return FMOD_ChannelGroup_GetParentGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetParentGroup(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELGROUP **group)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetParentGroup$handle() {
        return FMOD_ChannelGroup_GetParentGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetParentGroup(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELGROUP **group)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetParentGroup$address() {
        return FMOD_ChannelGroup_GetParentGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetParentGroup(FMOD_CHANNELGROUP *channelgroup, FMOD_CHANNELGROUP **group)
     * }
     */
    public static int FMOD_ChannelGroup_GetParentGroup(MemorySegment channelgroup, MemorySegment group) {
        var mh$ = FMOD_ChannelGroup_GetParentGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetParentGroup", channelgroup, group);
            }
            return (int)mh$.invokeExact(channelgroup, group);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetName(FMOD_CHANNELGROUP *channelgroup, char *name, int namelen)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetName$descriptor() {
        return FMOD_ChannelGroup_GetName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetName(FMOD_CHANNELGROUP *channelgroup, char *name, int namelen)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetName$handle() {
        return FMOD_ChannelGroup_GetName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetName(FMOD_CHANNELGROUP *channelgroup, char *name, int namelen)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetName$address() {
        return FMOD_ChannelGroup_GetName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetName(FMOD_CHANNELGROUP *channelgroup, char *name, int namelen)
     * }
     */
    public static int FMOD_ChannelGroup_GetName(MemorySegment channelgroup, MemorySegment name, int namelen) {
        var mh$ = FMOD_ChannelGroup_GetName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetName", channelgroup, name, namelen);
            }
            return (int)mh$.invokeExact(channelgroup, name, namelen);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetNumChannels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetNumChannels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumChannels(FMOD_CHANNELGROUP *channelgroup, int *numchannels)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetNumChannels$descriptor() {
        return FMOD_ChannelGroup_GetNumChannels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumChannels(FMOD_CHANNELGROUP *channelgroup, int *numchannels)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetNumChannels$handle() {
        return FMOD_ChannelGroup_GetNumChannels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumChannels(FMOD_CHANNELGROUP *channelgroup, int *numchannels)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetNumChannels$address() {
        return FMOD_ChannelGroup_GetNumChannels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetNumChannels(FMOD_CHANNELGROUP *channelgroup, int *numchannels)
     * }
     */
    public static int FMOD_ChannelGroup_GetNumChannels(MemorySegment channelgroup, MemorySegment numchannels) {
        var mh$ = FMOD_ChannelGroup_GetNumChannels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetNumChannels", channelgroup, numchannels);
            }
            return (int)mh$.invokeExact(channelgroup, numchannels);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_ChannelGroup_GetChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_ChannelGroup_GetChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetChannel(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_CHANNEL **channel)
     * }
     */
    public static FunctionDescriptor FMOD_ChannelGroup_GetChannel$descriptor() {
        return FMOD_ChannelGroup_GetChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetChannel(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_CHANNEL **channel)
     * }
     */
    public static MethodHandle FMOD_ChannelGroup_GetChannel$handle() {
        return FMOD_ChannelGroup_GetChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetChannel(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_CHANNEL **channel)
     * }
     */
    public static MemorySegment FMOD_ChannelGroup_GetChannel$address() {
        return FMOD_ChannelGroup_GetChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_ChannelGroup_GetChannel(FMOD_CHANNELGROUP *channelgroup, int index, FMOD_CHANNEL **channel)
     * }
     */
    public static int FMOD_ChannelGroup_GetChannel(MemorySegment channelgroup, int index, MemorySegment channel) {
        var mh$ = FMOD_ChannelGroup_GetChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_ChannelGroup_GetChannel", channelgroup, index, channel);
            }
            return (int)mh$.invokeExact(channelgroup, index, channel);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_Release(FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_Release$descriptor() {
        return FMOD_SoundGroup_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_Release(FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_Release$handle() {
        return FMOD_SoundGroup_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_Release(FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_Release$address() {
        return FMOD_SoundGroup_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_Release(FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static int FMOD_SoundGroup_Release(MemorySegment soundgroup) {
        var mh$ = FMOD_SoundGroup_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_Release", soundgroup);
            }
            return (int)mh$.invokeExact(soundgroup);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_GetSystemObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_GetSystemObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetSystemObject(FMOD_SOUNDGROUP *soundgroup, FMOD_SYSTEM **system)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_GetSystemObject$descriptor() {
        return FMOD_SoundGroup_GetSystemObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetSystemObject(FMOD_SOUNDGROUP *soundgroup, FMOD_SYSTEM **system)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_GetSystemObject$handle() {
        return FMOD_SoundGroup_GetSystemObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetSystemObject(FMOD_SOUNDGROUP *soundgroup, FMOD_SYSTEM **system)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_GetSystemObject$address() {
        return FMOD_SoundGroup_GetSystemObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetSystemObject(FMOD_SOUNDGROUP *soundgroup, FMOD_SYSTEM **system)
     * }
     */
    public static int FMOD_SoundGroup_GetSystemObject(MemorySegment soundgroup, MemorySegment system) {
        var mh$ = FMOD_SoundGroup_GetSystemObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_GetSystemObject", soundgroup, system);
            }
            return (int)mh$.invokeExact(soundgroup, system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_SetMaxAudible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_SetMaxAudible");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMaxAudible(FMOD_SOUNDGROUP *soundgroup, int maxaudible)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_SetMaxAudible$descriptor() {
        return FMOD_SoundGroup_SetMaxAudible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMaxAudible(FMOD_SOUNDGROUP *soundgroup, int maxaudible)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_SetMaxAudible$handle() {
        return FMOD_SoundGroup_SetMaxAudible.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMaxAudible(FMOD_SOUNDGROUP *soundgroup, int maxaudible)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_SetMaxAudible$address() {
        return FMOD_SoundGroup_SetMaxAudible.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMaxAudible(FMOD_SOUNDGROUP *soundgroup, int maxaudible)
     * }
     */
    public static int FMOD_SoundGroup_SetMaxAudible(MemorySegment soundgroup, int maxaudible) {
        var mh$ = FMOD_SoundGroup_SetMaxAudible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_SetMaxAudible", soundgroup, maxaudible);
            }
            return (int)mh$.invokeExact(soundgroup, maxaudible);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_GetMaxAudible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_GetMaxAudible");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMaxAudible(FMOD_SOUNDGROUP *soundgroup, int *maxaudible)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_GetMaxAudible$descriptor() {
        return FMOD_SoundGroup_GetMaxAudible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMaxAudible(FMOD_SOUNDGROUP *soundgroup, int *maxaudible)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_GetMaxAudible$handle() {
        return FMOD_SoundGroup_GetMaxAudible.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMaxAudible(FMOD_SOUNDGROUP *soundgroup, int *maxaudible)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_GetMaxAudible$address() {
        return FMOD_SoundGroup_GetMaxAudible.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMaxAudible(FMOD_SOUNDGROUP *soundgroup, int *maxaudible)
     * }
     */
    public static int FMOD_SoundGroup_GetMaxAudible(MemorySegment soundgroup, MemorySegment maxaudible) {
        var mh$ = FMOD_SoundGroup_GetMaxAudible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_GetMaxAudible", soundgroup, maxaudible);
            }
            return (int)mh$.invokeExact(soundgroup, maxaudible);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_SetMaxAudibleBehavior {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_SetMaxAudibleBehavior");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMaxAudibleBehavior(FMOD_SOUNDGROUP *soundgroup, FMOD_SOUNDGROUP_BEHAVIOR behavior)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_SetMaxAudibleBehavior$descriptor() {
        return FMOD_SoundGroup_SetMaxAudibleBehavior.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMaxAudibleBehavior(FMOD_SOUNDGROUP *soundgroup, FMOD_SOUNDGROUP_BEHAVIOR behavior)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_SetMaxAudibleBehavior$handle() {
        return FMOD_SoundGroup_SetMaxAudibleBehavior.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMaxAudibleBehavior(FMOD_SOUNDGROUP *soundgroup, FMOD_SOUNDGROUP_BEHAVIOR behavior)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_SetMaxAudibleBehavior$address() {
        return FMOD_SoundGroup_SetMaxAudibleBehavior.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMaxAudibleBehavior(FMOD_SOUNDGROUP *soundgroup, FMOD_SOUNDGROUP_BEHAVIOR behavior)
     * }
     */
    public static int FMOD_SoundGroup_SetMaxAudibleBehavior(MemorySegment soundgroup, int behavior) {
        var mh$ = FMOD_SoundGroup_SetMaxAudibleBehavior.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_SetMaxAudibleBehavior", soundgroup, behavior);
            }
            return (int)mh$.invokeExact(soundgroup, behavior);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_GetMaxAudibleBehavior {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_GetMaxAudibleBehavior");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMaxAudibleBehavior(FMOD_SOUNDGROUP *soundgroup, FMOD_SOUNDGROUP_BEHAVIOR *behavior)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_GetMaxAudibleBehavior$descriptor() {
        return FMOD_SoundGroup_GetMaxAudibleBehavior.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMaxAudibleBehavior(FMOD_SOUNDGROUP *soundgroup, FMOD_SOUNDGROUP_BEHAVIOR *behavior)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_GetMaxAudibleBehavior$handle() {
        return FMOD_SoundGroup_GetMaxAudibleBehavior.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMaxAudibleBehavior(FMOD_SOUNDGROUP *soundgroup, FMOD_SOUNDGROUP_BEHAVIOR *behavior)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_GetMaxAudibleBehavior$address() {
        return FMOD_SoundGroup_GetMaxAudibleBehavior.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMaxAudibleBehavior(FMOD_SOUNDGROUP *soundgroup, FMOD_SOUNDGROUP_BEHAVIOR *behavior)
     * }
     */
    public static int FMOD_SoundGroup_GetMaxAudibleBehavior(MemorySegment soundgroup, MemorySegment behavior) {
        var mh$ = FMOD_SoundGroup_GetMaxAudibleBehavior.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_GetMaxAudibleBehavior", soundgroup, behavior);
            }
            return (int)mh$.invokeExact(soundgroup, behavior);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_SetMuteFadeSpeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_SetMuteFadeSpeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMuteFadeSpeed(FMOD_SOUNDGROUP *soundgroup, float speed)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_SetMuteFadeSpeed$descriptor() {
        return FMOD_SoundGroup_SetMuteFadeSpeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMuteFadeSpeed(FMOD_SOUNDGROUP *soundgroup, float speed)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_SetMuteFadeSpeed$handle() {
        return FMOD_SoundGroup_SetMuteFadeSpeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMuteFadeSpeed(FMOD_SOUNDGROUP *soundgroup, float speed)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_SetMuteFadeSpeed$address() {
        return FMOD_SoundGroup_SetMuteFadeSpeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetMuteFadeSpeed(FMOD_SOUNDGROUP *soundgroup, float speed)
     * }
     */
    public static int FMOD_SoundGroup_SetMuteFadeSpeed(MemorySegment soundgroup, float speed) {
        var mh$ = FMOD_SoundGroup_SetMuteFadeSpeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_SetMuteFadeSpeed", soundgroup, speed);
            }
            return (int)mh$.invokeExact(soundgroup, speed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_GetMuteFadeSpeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_GetMuteFadeSpeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMuteFadeSpeed(FMOD_SOUNDGROUP *soundgroup, float *speed)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_GetMuteFadeSpeed$descriptor() {
        return FMOD_SoundGroup_GetMuteFadeSpeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMuteFadeSpeed(FMOD_SOUNDGROUP *soundgroup, float *speed)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_GetMuteFadeSpeed$handle() {
        return FMOD_SoundGroup_GetMuteFadeSpeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMuteFadeSpeed(FMOD_SOUNDGROUP *soundgroup, float *speed)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_GetMuteFadeSpeed$address() {
        return FMOD_SoundGroup_GetMuteFadeSpeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetMuteFadeSpeed(FMOD_SOUNDGROUP *soundgroup, float *speed)
     * }
     */
    public static int FMOD_SoundGroup_GetMuteFadeSpeed(MemorySegment soundgroup, MemorySegment speed) {
        var mh$ = FMOD_SoundGroup_GetMuteFadeSpeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_GetMuteFadeSpeed", soundgroup, speed);
            }
            return (int)mh$.invokeExact(soundgroup, speed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_SetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_SetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetVolume(FMOD_SOUNDGROUP *soundgroup, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_SetVolume$descriptor() {
        return FMOD_SoundGroup_SetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetVolume(FMOD_SOUNDGROUP *soundgroup, float volume)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_SetVolume$handle() {
        return FMOD_SoundGroup_SetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetVolume(FMOD_SOUNDGROUP *soundgroup, float volume)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_SetVolume$address() {
        return FMOD_SoundGroup_SetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetVolume(FMOD_SOUNDGROUP *soundgroup, float volume)
     * }
     */
    public static int FMOD_SoundGroup_SetVolume(MemorySegment soundgroup, float volume) {
        var mh$ = FMOD_SoundGroup_SetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_SetVolume", soundgroup, volume);
            }
            return (int)mh$.invokeExact(soundgroup, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_GetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_GetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetVolume(FMOD_SOUNDGROUP *soundgroup, float *volume)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_GetVolume$descriptor() {
        return FMOD_SoundGroup_GetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetVolume(FMOD_SOUNDGROUP *soundgroup, float *volume)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_GetVolume$handle() {
        return FMOD_SoundGroup_GetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetVolume(FMOD_SOUNDGROUP *soundgroup, float *volume)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_GetVolume$address() {
        return FMOD_SoundGroup_GetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetVolume(FMOD_SOUNDGROUP *soundgroup, float *volume)
     * }
     */
    public static int FMOD_SoundGroup_GetVolume(MemorySegment soundgroup, MemorySegment volume) {
        var mh$ = FMOD_SoundGroup_GetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_GetVolume", soundgroup, volume);
            }
            return (int)mh$.invokeExact(soundgroup, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_Stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_Stop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_Stop(FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_Stop$descriptor() {
        return FMOD_SoundGroup_Stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_Stop(FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_Stop$handle() {
        return FMOD_SoundGroup_Stop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_Stop(FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_Stop$address() {
        return FMOD_SoundGroup_Stop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_Stop(FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static int FMOD_SoundGroup_Stop(MemorySegment soundgroup) {
        var mh$ = FMOD_SoundGroup_Stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_Stop", soundgroup);
            }
            return (int)mh$.invokeExact(soundgroup);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_GetName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_GetName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetName(FMOD_SOUNDGROUP *soundgroup, char *name, int namelen)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_GetName$descriptor() {
        return FMOD_SoundGroup_GetName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetName(FMOD_SOUNDGROUP *soundgroup, char *name, int namelen)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_GetName$handle() {
        return FMOD_SoundGroup_GetName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetName(FMOD_SOUNDGROUP *soundgroup, char *name, int namelen)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_GetName$address() {
        return FMOD_SoundGroup_GetName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetName(FMOD_SOUNDGROUP *soundgroup, char *name, int namelen)
     * }
     */
    public static int FMOD_SoundGroup_GetName(MemorySegment soundgroup, MemorySegment name, int namelen) {
        var mh$ = FMOD_SoundGroup_GetName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_GetName", soundgroup, name, namelen);
            }
            return (int)mh$.invokeExact(soundgroup, name, namelen);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_GetNumSounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_GetNumSounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetNumSounds(FMOD_SOUNDGROUP *soundgroup, int *numsounds)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_GetNumSounds$descriptor() {
        return FMOD_SoundGroup_GetNumSounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetNumSounds(FMOD_SOUNDGROUP *soundgroup, int *numsounds)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_GetNumSounds$handle() {
        return FMOD_SoundGroup_GetNumSounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetNumSounds(FMOD_SOUNDGROUP *soundgroup, int *numsounds)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_GetNumSounds$address() {
        return FMOD_SoundGroup_GetNumSounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetNumSounds(FMOD_SOUNDGROUP *soundgroup, int *numsounds)
     * }
     */
    public static int FMOD_SoundGroup_GetNumSounds(MemorySegment soundgroup, MemorySegment numsounds) {
        var mh$ = FMOD_SoundGroup_GetNumSounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_GetNumSounds", soundgroup, numsounds);
            }
            return (int)mh$.invokeExact(soundgroup, numsounds);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_GetSound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_GetSound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetSound(FMOD_SOUNDGROUP *soundgroup, int index, FMOD_SOUND **sound)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_GetSound$descriptor() {
        return FMOD_SoundGroup_GetSound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetSound(FMOD_SOUNDGROUP *soundgroup, int index, FMOD_SOUND **sound)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_GetSound$handle() {
        return FMOD_SoundGroup_GetSound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetSound(FMOD_SOUNDGROUP *soundgroup, int index, FMOD_SOUND **sound)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_GetSound$address() {
        return FMOD_SoundGroup_GetSound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetSound(FMOD_SOUNDGROUP *soundgroup, int index, FMOD_SOUND **sound)
     * }
     */
    public static int FMOD_SoundGroup_GetSound(MemorySegment soundgroup, int index, MemorySegment sound) {
        var mh$ = FMOD_SoundGroup_GetSound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_GetSound", soundgroup, index, sound);
            }
            return (int)mh$.invokeExact(soundgroup, index, sound);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_GetNumPlaying {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_GetNumPlaying");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetNumPlaying(FMOD_SOUNDGROUP *soundgroup, int *numplaying)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_GetNumPlaying$descriptor() {
        return FMOD_SoundGroup_GetNumPlaying.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetNumPlaying(FMOD_SOUNDGROUP *soundgroup, int *numplaying)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_GetNumPlaying$handle() {
        return FMOD_SoundGroup_GetNumPlaying.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetNumPlaying(FMOD_SOUNDGROUP *soundgroup, int *numplaying)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_GetNumPlaying$address() {
        return FMOD_SoundGroup_GetNumPlaying.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetNumPlaying(FMOD_SOUNDGROUP *soundgroup, int *numplaying)
     * }
     */
    public static int FMOD_SoundGroup_GetNumPlaying(MemorySegment soundgroup, MemorySegment numplaying) {
        var mh$ = FMOD_SoundGroup_GetNumPlaying.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_GetNumPlaying", soundgroup, numplaying);
            }
            return (int)mh$.invokeExact(soundgroup, numplaying);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetUserData(FMOD_SOUNDGROUP *soundgroup, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_SetUserData$descriptor() {
        return FMOD_SoundGroup_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetUserData(FMOD_SOUNDGROUP *soundgroup, void *userdata)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_SetUserData$handle() {
        return FMOD_SoundGroup_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetUserData(FMOD_SOUNDGROUP *soundgroup, void *userdata)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_SetUserData$address() {
        return FMOD_SoundGroup_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_SetUserData(FMOD_SOUNDGROUP *soundgroup, void *userdata)
     * }
     */
    public static int FMOD_SoundGroup_SetUserData(MemorySegment soundgroup, MemorySegment userdata) {
        var mh$ = FMOD_SoundGroup_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_SetUserData", soundgroup, userdata);
            }
            return (int)mh$.invokeExact(soundgroup, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_SoundGroup_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_SoundGroup_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetUserData(FMOD_SOUNDGROUP *soundgroup, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_SoundGroup_GetUserData$descriptor() {
        return FMOD_SoundGroup_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetUserData(FMOD_SOUNDGROUP *soundgroup, void **userdata)
     * }
     */
    public static MethodHandle FMOD_SoundGroup_GetUserData$handle() {
        return FMOD_SoundGroup_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetUserData(FMOD_SOUNDGROUP *soundgroup, void **userdata)
     * }
     */
    public static MemorySegment FMOD_SoundGroup_GetUserData$address() {
        return FMOD_SoundGroup_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_SoundGroup_GetUserData(FMOD_SOUNDGROUP *soundgroup, void **userdata)
     * }
     */
    public static int FMOD_SoundGroup_GetUserData(MemorySegment soundgroup, MemorySegment userdata) {
        var mh$ = FMOD_SoundGroup_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_SoundGroup_GetUserData", soundgroup, userdata);
            }
            return (int)mh$.invokeExact(soundgroup, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_Release(FMOD_DSP *dsp)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_Release$descriptor() {
        return FMOD_DSP_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_Release(FMOD_DSP *dsp)
     * }
     */
    public static MethodHandle FMOD_DSP_Release$handle() {
        return FMOD_DSP_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_Release(FMOD_DSP *dsp)
     * }
     */
    public static MemorySegment FMOD_DSP_Release$address() {
        return FMOD_DSP_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_Release(FMOD_DSP *dsp)
     * }
     */
    public static int FMOD_DSP_Release(MemorySegment dsp) {
        var mh$ = FMOD_DSP_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_Release", dsp);
            }
            return (int)mh$.invokeExact(dsp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetSystemObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetSystemObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetSystemObject(FMOD_DSP *dsp, FMOD_SYSTEM **system)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetSystemObject$descriptor() {
        return FMOD_DSP_GetSystemObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetSystemObject(FMOD_DSP *dsp, FMOD_SYSTEM **system)
     * }
     */
    public static MethodHandle FMOD_DSP_GetSystemObject$handle() {
        return FMOD_DSP_GetSystemObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetSystemObject(FMOD_DSP *dsp, FMOD_SYSTEM **system)
     * }
     */
    public static MemorySegment FMOD_DSP_GetSystemObject$address() {
        return FMOD_DSP_GetSystemObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetSystemObject(FMOD_DSP *dsp, FMOD_SYSTEM **system)
     * }
     */
    public static int FMOD_DSP_GetSystemObject(MemorySegment dsp, MemorySegment system) {
        var mh$ = FMOD_DSP_GetSystemObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetSystemObject", dsp, system);
            }
            return (int)mh$.invokeExact(dsp, system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_AddInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_AddInput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_AddInput(FMOD_DSP *dsp, FMOD_DSP *input, FMOD_DSPCONNECTION **connection, FMOD_DSPCONNECTION_TYPE type)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_AddInput$descriptor() {
        return FMOD_DSP_AddInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_AddInput(FMOD_DSP *dsp, FMOD_DSP *input, FMOD_DSPCONNECTION **connection, FMOD_DSPCONNECTION_TYPE type)
     * }
     */
    public static MethodHandle FMOD_DSP_AddInput$handle() {
        return FMOD_DSP_AddInput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_AddInput(FMOD_DSP *dsp, FMOD_DSP *input, FMOD_DSPCONNECTION **connection, FMOD_DSPCONNECTION_TYPE type)
     * }
     */
    public static MemorySegment FMOD_DSP_AddInput$address() {
        return FMOD_DSP_AddInput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_AddInput(FMOD_DSP *dsp, FMOD_DSP *input, FMOD_DSPCONNECTION **connection, FMOD_DSPCONNECTION_TYPE type)
     * }
     */
    public static int FMOD_DSP_AddInput(MemorySegment dsp, MemorySegment input, MemorySegment connection, int type) {
        var mh$ = FMOD_DSP_AddInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_AddInput", dsp, input, connection, type);
            }
            return (int)mh$.invokeExact(dsp, input, connection, type);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_DisconnectFrom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_DisconnectFrom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_DisconnectFrom(FMOD_DSP *dsp, FMOD_DSP *target, FMOD_DSPCONNECTION *connection)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_DisconnectFrom$descriptor() {
        return FMOD_DSP_DisconnectFrom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_DisconnectFrom(FMOD_DSP *dsp, FMOD_DSP *target, FMOD_DSPCONNECTION *connection)
     * }
     */
    public static MethodHandle FMOD_DSP_DisconnectFrom$handle() {
        return FMOD_DSP_DisconnectFrom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_DisconnectFrom(FMOD_DSP *dsp, FMOD_DSP *target, FMOD_DSPCONNECTION *connection)
     * }
     */
    public static MemorySegment FMOD_DSP_DisconnectFrom$address() {
        return FMOD_DSP_DisconnectFrom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_DisconnectFrom(FMOD_DSP *dsp, FMOD_DSP *target, FMOD_DSPCONNECTION *connection)
     * }
     */
    public static int FMOD_DSP_DisconnectFrom(MemorySegment dsp, MemorySegment target, MemorySegment connection) {
        var mh$ = FMOD_DSP_DisconnectFrom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_DisconnectFrom", dsp, target, connection);
            }
            return (int)mh$.invokeExact(dsp, target, connection);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_DisconnectAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_DisconnectAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_DisconnectAll(FMOD_DSP *dsp, FMOD_BOOL inputs, FMOD_BOOL outputs)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_DisconnectAll$descriptor() {
        return FMOD_DSP_DisconnectAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_DisconnectAll(FMOD_DSP *dsp, FMOD_BOOL inputs, FMOD_BOOL outputs)
     * }
     */
    public static MethodHandle FMOD_DSP_DisconnectAll$handle() {
        return FMOD_DSP_DisconnectAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_DisconnectAll(FMOD_DSP *dsp, FMOD_BOOL inputs, FMOD_BOOL outputs)
     * }
     */
    public static MemorySegment FMOD_DSP_DisconnectAll$address() {
        return FMOD_DSP_DisconnectAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_DisconnectAll(FMOD_DSP *dsp, FMOD_BOOL inputs, FMOD_BOOL outputs)
     * }
     */
    public static int FMOD_DSP_DisconnectAll(MemorySegment dsp, int inputs, int outputs) {
        var mh$ = FMOD_DSP_DisconnectAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_DisconnectAll", dsp, inputs, outputs);
            }
            return (int)mh$.invokeExact(dsp, inputs, outputs);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetNumInputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetNumInputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumInputs(FMOD_DSP *dsp, int *numinputs)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetNumInputs$descriptor() {
        return FMOD_DSP_GetNumInputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumInputs(FMOD_DSP *dsp, int *numinputs)
     * }
     */
    public static MethodHandle FMOD_DSP_GetNumInputs$handle() {
        return FMOD_DSP_GetNumInputs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumInputs(FMOD_DSP *dsp, int *numinputs)
     * }
     */
    public static MemorySegment FMOD_DSP_GetNumInputs$address() {
        return FMOD_DSP_GetNumInputs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumInputs(FMOD_DSP *dsp, int *numinputs)
     * }
     */
    public static int FMOD_DSP_GetNumInputs(MemorySegment dsp, MemorySegment numinputs) {
        var mh$ = FMOD_DSP_GetNumInputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetNumInputs", dsp, numinputs);
            }
            return (int)mh$.invokeExact(dsp, numinputs);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetNumOutputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetNumOutputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumOutputs(FMOD_DSP *dsp, int *numoutputs)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetNumOutputs$descriptor() {
        return FMOD_DSP_GetNumOutputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumOutputs(FMOD_DSP *dsp, int *numoutputs)
     * }
     */
    public static MethodHandle FMOD_DSP_GetNumOutputs$handle() {
        return FMOD_DSP_GetNumOutputs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumOutputs(FMOD_DSP *dsp, int *numoutputs)
     * }
     */
    public static MemorySegment FMOD_DSP_GetNumOutputs$address() {
        return FMOD_DSP_GetNumOutputs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumOutputs(FMOD_DSP *dsp, int *numoutputs)
     * }
     */
    public static int FMOD_DSP_GetNumOutputs(MemorySegment dsp, MemorySegment numoutputs) {
        var mh$ = FMOD_DSP_GetNumOutputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetNumOutputs", dsp, numoutputs);
            }
            return (int)mh$.invokeExact(dsp, numoutputs);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetInput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetInput(FMOD_DSP *dsp, int index, FMOD_DSP **input, FMOD_DSPCONNECTION **inputconnection)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetInput$descriptor() {
        return FMOD_DSP_GetInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetInput(FMOD_DSP *dsp, int index, FMOD_DSP **input, FMOD_DSPCONNECTION **inputconnection)
     * }
     */
    public static MethodHandle FMOD_DSP_GetInput$handle() {
        return FMOD_DSP_GetInput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetInput(FMOD_DSP *dsp, int index, FMOD_DSP **input, FMOD_DSPCONNECTION **inputconnection)
     * }
     */
    public static MemorySegment FMOD_DSP_GetInput$address() {
        return FMOD_DSP_GetInput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetInput(FMOD_DSP *dsp, int index, FMOD_DSP **input, FMOD_DSPCONNECTION **inputconnection)
     * }
     */
    public static int FMOD_DSP_GetInput(MemorySegment dsp, int index, MemorySegment input, MemorySegment inputconnection) {
        var mh$ = FMOD_DSP_GetInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetInput", dsp, index, input, inputconnection);
            }
            return (int)mh$.invokeExact(dsp, index, input, inputconnection);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetOutput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetOutput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetOutput(FMOD_DSP *dsp, int index, FMOD_DSP **output, FMOD_DSPCONNECTION **outputconnection)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetOutput$descriptor() {
        return FMOD_DSP_GetOutput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetOutput(FMOD_DSP *dsp, int index, FMOD_DSP **output, FMOD_DSPCONNECTION **outputconnection)
     * }
     */
    public static MethodHandle FMOD_DSP_GetOutput$handle() {
        return FMOD_DSP_GetOutput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetOutput(FMOD_DSP *dsp, int index, FMOD_DSP **output, FMOD_DSPCONNECTION **outputconnection)
     * }
     */
    public static MemorySegment FMOD_DSP_GetOutput$address() {
        return FMOD_DSP_GetOutput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetOutput(FMOD_DSP *dsp, int index, FMOD_DSP **output, FMOD_DSPCONNECTION **outputconnection)
     * }
     */
    public static int FMOD_DSP_GetOutput(MemorySegment dsp, int index, MemorySegment output, MemorySegment outputconnection) {
        var mh$ = FMOD_DSP_GetOutput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetOutput", dsp, index, output, outputconnection);
            }
            return (int)mh$.invokeExact(dsp, index, output, outputconnection);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_SetActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_SetActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetActive(FMOD_DSP *dsp, FMOD_BOOL active)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_SetActive$descriptor() {
        return FMOD_DSP_SetActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetActive(FMOD_DSP *dsp, FMOD_BOOL active)
     * }
     */
    public static MethodHandle FMOD_DSP_SetActive$handle() {
        return FMOD_DSP_SetActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetActive(FMOD_DSP *dsp, FMOD_BOOL active)
     * }
     */
    public static MemorySegment FMOD_DSP_SetActive$address() {
        return FMOD_DSP_SetActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetActive(FMOD_DSP *dsp, FMOD_BOOL active)
     * }
     */
    public static int FMOD_DSP_SetActive(MemorySegment dsp, int active) {
        var mh$ = FMOD_DSP_SetActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_SetActive", dsp, active);
            }
            return (int)mh$.invokeExact(dsp, active);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetActive(FMOD_DSP *dsp, FMOD_BOOL *active)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetActive$descriptor() {
        return FMOD_DSP_GetActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetActive(FMOD_DSP *dsp, FMOD_BOOL *active)
     * }
     */
    public static MethodHandle FMOD_DSP_GetActive$handle() {
        return FMOD_DSP_GetActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetActive(FMOD_DSP *dsp, FMOD_BOOL *active)
     * }
     */
    public static MemorySegment FMOD_DSP_GetActive$address() {
        return FMOD_DSP_GetActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetActive(FMOD_DSP *dsp, FMOD_BOOL *active)
     * }
     */
    public static int FMOD_DSP_GetActive(MemorySegment dsp, MemorySegment active) {
        var mh$ = FMOD_DSP_GetActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetActive", dsp, active);
            }
            return (int)mh$.invokeExact(dsp, active);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_SetBypass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_SetBypass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetBypass(FMOD_DSP *dsp, FMOD_BOOL bypass)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_SetBypass$descriptor() {
        return FMOD_DSP_SetBypass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetBypass(FMOD_DSP *dsp, FMOD_BOOL bypass)
     * }
     */
    public static MethodHandle FMOD_DSP_SetBypass$handle() {
        return FMOD_DSP_SetBypass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetBypass(FMOD_DSP *dsp, FMOD_BOOL bypass)
     * }
     */
    public static MemorySegment FMOD_DSP_SetBypass$address() {
        return FMOD_DSP_SetBypass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetBypass(FMOD_DSP *dsp, FMOD_BOOL bypass)
     * }
     */
    public static int FMOD_DSP_SetBypass(MemorySegment dsp, int bypass) {
        var mh$ = FMOD_DSP_SetBypass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_SetBypass", dsp, bypass);
            }
            return (int)mh$.invokeExact(dsp, bypass);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetBypass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetBypass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetBypass(FMOD_DSP *dsp, FMOD_BOOL *bypass)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetBypass$descriptor() {
        return FMOD_DSP_GetBypass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetBypass(FMOD_DSP *dsp, FMOD_BOOL *bypass)
     * }
     */
    public static MethodHandle FMOD_DSP_GetBypass$handle() {
        return FMOD_DSP_GetBypass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetBypass(FMOD_DSP *dsp, FMOD_BOOL *bypass)
     * }
     */
    public static MemorySegment FMOD_DSP_GetBypass$address() {
        return FMOD_DSP_GetBypass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetBypass(FMOD_DSP *dsp, FMOD_BOOL *bypass)
     * }
     */
    public static int FMOD_DSP_GetBypass(MemorySegment dsp, MemorySegment bypass) {
        var mh$ = FMOD_DSP_GetBypass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetBypass", dsp, bypass);
            }
            return (int)mh$.invokeExact(dsp, bypass);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_SetWetDryMix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_SetWetDryMix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetWetDryMix(FMOD_DSP *dsp, float prewet, float postwet, float dry)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_SetWetDryMix$descriptor() {
        return FMOD_DSP_SetWetDryMix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetWetDryMix(FMOD_DSP *dsp, float prewet, float postwet, float dry)
     * }
     */
    public static MethodHandle FMOD_DSP_SetWetDryMix$handle() {
        return FMOD_DSP_SetWetDryMix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetWetDryMix(FMOD_DSP *dsp, float prewet, float postwet, float dry)
     * }
     */
    public static MemorySegment FMOD_DSP_SetWetDryMix$address() {
        return FMOD_DSP_SetWetDryMix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetWetDryMix(FMOD_DSP *dsp, float prewet, float postwet, float dry)
     * }
     */
    public static int FMOD_DSP_SetWetDryMix(MemorySegment dsp, float prewet, float postwet, float dry) {
        var mh$ = FMOD_DSP_SetWetDryMix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_SetWetDryMix", dsp, prewet, postwet, dry);
            }
            return (int)mh$.invokeExact(dsp, prewet, postwet, dry);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetWetDryMix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetWetDryMix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetWetDryMix(FMOD_DSP *dsp, float *prewet, float *postwet, float *dry)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetWetDryMix$descriptor() {
        return FMOD_DSP_GetWetDryMix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetWetDryMix(FMOD_DSP *dsp, float *prewet, float *postwet, float *dry)
     * }
     */
    public static MethodHandle FMOD_DSP_GetWetDryMix$handle() {
        return FMOD_DSP_GetWetDryMix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetWetDryMix(FMOD_DSP *dsp, float *prewet, float *postwet, float *dry)
     * }
     */
    public static MemorySegment FMOD_DSP_GetWetDryMix$address() {
        return FMOD_DSP_GetWetDryMix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetWetDryMix(FMOD_DSP *dsp, float *prewet, float *postwet, float *dry)
     * }
     */
    public static int FMOD_DSP_GetWetDryMix(MemorySegment dsp, MemorySegment prewet, MemorySegment postwet, MemorySegment dry) {
        var mh$ = FMOD_DSP_GetWetDryMix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetWetDryMix", dsp, prewet, postwet, dry);
            }
            return (int)mh$.invokeExact(dsp, prewet, postwet, dry);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_SetChannelFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_SetChannelFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK channelmask, int numchannels, FMOD_SPEAKERMODE source_speakermode)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_SetChannelFormat$descriptor() {
        return FMOD_DSP_SetChannelFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK channelmask, int numchannels, FMOD_SPEAKERMODE source_speakermode)
     * }
     */
    public static MethodHandle FMOD_DSP_SetChannelFormat$handle() {
        return FMOD_DSP_SetChannelFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK channelmask, int numchannels, FMOD_SPEAKERMODE source_speakermode)
     * }
     */
    public static MemorySegment FMOD_DSP_SetChannelFormat$address() {
        return FMOD_DSP_SetChannelFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK channelmask, int numchannels, FMOD_SPEAKERMODE source_speakermode)
     * }
     */
    public static int FMOD_DSP_SetChannelFormat(MemorySegment dsp, int channelmask, int numchannels, int source_speakermode) {
        var mh$ = FMOD_DSP_SetChannelFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_SetChannelFormat", dsp, channelmask, numchannels, source_speakermode);
            }
            return (int)mh$.invokeExact(dsp, channelmask, numchannels, source_speakermode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetChannelFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetChannelFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK *channelmask, int *numchannels, FMOD_SPEAKERMODE *source_speakermode)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetChannelFormat$descriptor() {
        return FMOD_DSP_GetChannelFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK *channelmask, int *numchannels, FMOD_SPEAKERMODE *source_speakermode)
     * }
     */
    public static MethodHandle FMOD_DSP_GetChannelFormat$handle() {
        return FMOD_DSP_GetChannelFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK *channelmask, int *numchannels, FMOD_SPEAKERMODE *source_speakermode)
     * }
     */
    public static MemorySegment FMOD_DSP_GetChannelFormat$address() {
        return FMOD_DSP_GetChannelFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK *channelmask, int *numchannels, FMOD_SPEAKERMODE *source_speakermode)
     * }
     */
    public static int FMOD_DSP_GetChannelFormat(MemorySegment dsp, MemorySegment channelmask, MemorySegment numchannels, MemorySegment source_speakermode) {
        var mh$ = FMOD_DSP_GetChannelFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetChannelFormat", dsp, channelmask, numchannels, source_speakermode);
            }
            return (int)mh$.invokeExact(dsp, channelmask, numchannels, source_speakermode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetOutputChannelFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetOutputChannelFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetOutputChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK inmask, int inchannels, FMOD_SPEAKERMODE inspeakermode, FMOD_CHANNELMASK *outmask, int *outchannels, FMOD_SPEAKERMODE *outspeakermode)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetOutputChannelFormat$descriptor() {
        return FMOD_DSP_GetOutputChannelFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetOutputChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK inmask, int inchannels, FMOD_SPEAKERMODE inspeakermode, FMOD_CHANNELMASK *outmask, int *outchannels, FMOD_SPEAKERMODE *outspeakermode)
     * }
     */
    public static MethodHandle FMOD_DSP_GetOutputChannelFormat$handle() {
        return FMOD_DSP_GetOutputChannelFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetOutputChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK inmask, int inchannels, FMOD_SPEAKERMODE inspeakermode, FMOD_CHANNELMASK *outmask, int *outchannels, FMOD_SPEAKERMODE *outspeakermode)
     * }
     */
    public static MemorySegment FMOD_DSP_GetOutputChannelFormat$address() {
        return FMOD_DSP_GetOutputChannelFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetOutputChannelFormat(FMOD_DSP *dsp, FMOD_CHANNELMASK inmask, int inchannels, FMOD_SPEAKERMODE inspeakermode, FMOD_CHANNELMASK *outmask, int *outchannels, FMOD_SPEAKERMODE *outspeakermode)
     * }
     */
    public static int FMOD_DSP_GetOutputChannelFormat(MemorySegment dsp, int inmask, int inchannels, int inspeakermode, MemorySegment outmask, MemorySegment outchannels, MemorySegment outspeakermode) {
        var mh$ = FMOD_DSP_GetOutputChannelFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetOutputChannelFormat", dsp, inmask, inchannels, inspeakermode, outmask, outchannels, outspeakermode);
            }
            return (int)mh$.invokeExact(dsp, inmask, inchannels, inspeakermode, outmask, outchannels, outspeakermode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_Reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_Reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_Reset(FMOD_DSP *dsp)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_Reset$descriptor() {
        return FMOD_DSP_Reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_Reset(FMOD_DSP *dsp)
     * }
     */
    public static MethodHandle FMOD_DSP_Reset$handle() {
        return FMOD_DSP_Reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_Reset(FMOD_DSP *dsp)
     * }
     */
    public static MemorySegment FMOD_DSP_Reset$address() {
        return FMOD_DSP_Reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_Reset(FMOD_DSP *dsp)
     * }
     */
    public static int FMOD_DSP_Reset(MemorySegment dsp) {
        var mh$ = FMOD_DSP_Reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_Reset", dsp);
            }
            return (int)mh$.invokeExact(dsp);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_SetCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_SetCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetCallback(FMOD_DSP *dsp, FMOD_DSP_CALLBACK callback)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_SetCallback$descriptor() {
        return FMOD_DSP_SetCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetCallback(FMOD_DSP *dsp, FMOD_DSP_CALLBACK callback)
     * }
     */
    public static MethodHandle FMOD_DSP_SetCallback$handle() {
        return FMOD_DSP_SetCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetCallback(FMOD_DSP *dsp, FMOD_DSP_CALLBACK callback)
     * }
     */
    public static MemorySegment FMOD_DSP_SetCallback$address() {
        return FMOD_DSP_SetCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetCallback(FMOD_DSP *dsp, FMOD_DSP_CALLBACK callback)
     * }
     */
    public static int FMOD_DSP_SetCallback(MemorySegment dsp, MemorySegment callback) {
        var mh$ = FMOD_DSP_SetCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_SetCallback", dsp, callback);
            }
            return (int)mh$.invokeExact(dsp, callback);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_SetParameterFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_SetParameterFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterFloat(FMOD_DSP *dsp, int index, float value)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_SetParameterFloat$descriptor() {
        return FMOD_DSP_SetParameterFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterFloat(FMOD_DSP *dsp, int index, float value)
     * }
     */
    public static MethodHandle FMOD_DSP_SetParameterFloat$handle() {
        return FMOD_DSP_SetParameterFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterFloat(FMOD_DSP *dsp, int index, float value)
     * }
     */
    public static MemorySegment FMOD_DSP_SetParameterFloat$address() {
        return FMOD_DSP_SetParameterFloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterFloat(FMOD_DSP *dsp, int index, float value)
     * }
     */
    public static int FMOD_DSP_SetParameterFloat(MemorySegment dsp, int index, float value) {
        var mh$ = FMOD_DSP_SetParameterFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_SetParameterFloat", dsp, index, value);
            }
            return (int)mh$.invokeExact(dsp, index, value);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_SetParameterInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_SetParameterInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterInt(FMOD_DSP *dsp, int index, int value)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_SetParameterInt$descriptor() {
        return FMOD_DSP_SetParameterInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterInt(FMOD_DSP *dsp, int index, int value)
     * }
     */
    public static MethodHandle FMOD_DSP_SetParameterInt$handle() {
        return FMOD_DSP_SetParameterInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterInt(FMOD_DSP *dsp, int index, int value)
     * }
     */
    public static MemorySegment FMOD_DSP_SetParameterInt$address() {
        return FMOD_DSP_SetParameterInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterInt(FMOD_DSP *dsp, int index, int value)
     * }
     */
    public static int FMOD_DSP_SetParameterInt(MemorySegment dsp, int index, int value) {
        var mh$ = FMOD_DSP_SetParameterInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_SetParameterInt", dsp, index, value);
            }
            return (int)mh$.invokeExact(dsp, index, value);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_SetParameterBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_SetParameterBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterBool(FMOD_DSP *dsp, int index, FMOD_BOOL value)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_SetParameterBool$descriptor() {
        return FMOD_DSP_SetParameterBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterBool(FMOD_DSP *dsp, int index, FMOD_BOOL value)
     * }
     */
    public static MethodHandle FMOD_DSP_SetParameterBool$handle() {
        return FMOD_DSP_SetParameterBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterBool(FMOD_DSP *dsp, int index, FMOD_BOOL value)
     * }
     */
    public static MemorySegment FMOD_DSP_SetParameterBool$address() {
        return FMOD_DSP_SetParameterBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterBool(FMOD_DSP *dsp, int index, FMOD_BOOL value)
     * }
     */
    public static int FMOD_DSP_SetParameterBool(MemorySegment dsp, int index, int value) {
        var mh$ = FMOD_DSP_SetParameterBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_SetParameterBool", dsp, index, value);
            }
            return (int)mh$.invokeExact(dsp, index, value);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_SetParameterData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_SetParameterData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterData(FMOD_DSP *dsp, int index, void *data, unsigned int length)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_SetParameterData$descriptor() {
        return FMOD_DSP_SetParameterData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterData(FMOD_DSP *dsp, int index, void *data, unsigned int length)
     * }
     */
    public static MethodHandle FMOD_DSP_SetParameterData$handle() {
        return FMOD_DSP_SetParameterData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterData(FMOD_DSP *dsp, int index, void *data, unsigned int length)
     * }
     */
    public static MemorySegment FMOD_DSP_SetParameterData$address() {
        return FMOD_DSP_SetParameterData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetParameterData(FMOD_DSP *dsp, int index, void *data, unsigned int length)
     * }
     */
    public static int FMOD_DSP_SetParameterData(MemorySegment dsp, int index, MemorySegment data, int length) {
        var mh$ = FMOD_DSP_SetParameterData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_SetParameterData", dsp, index, data, length);
            }
            return (int)mh$.invokeExact(dsp, index, data, length);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetParameterFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetParameterFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterFloat(FMOD_DSP *dsp, int index, float *value, char *valuestr, int valuestrlen)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetParameterFloat$descriptor() {
        return FMOD_DSP_GetParameterFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterFloat(FMOD_DSP *dsp, int index, float *value, char *valuestr, int valuestrlen)
     * }
     */
    public static MethodHandle FMOD_DSP_GetParameterFloat$handle() {
        return FMOD_DSP_GetParameterFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterFloat(FMOD_DSP *dsp, int index, float *value, char *valuestr, int valuestrlen)
     * }
     */
    public static MemorySegment FMOD_DSP_GetParameterFloat$address() {
        return FMOD_DSP_GetParameterFloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterFloat(FMOD_DSP *dsp, int index, float *value, char *valuestr, int valuestrlen)
     * }
     */
    public static int FMOD_DSP_GetParameterFloat(MemorySegment dsp, int index, MemorySegment value, MemorySegment valuestr, int valuestrlen) {
        var mh$ = FMOD_DSP_GetParameterFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetParameterFloat", dsp, index, value, valuestr, valuestrlen);
            }
            return (int)mh$.invokeExact(dsp, index, value, valuestr, valuestrlen);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetParameterInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetParameterInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterInt(FMOD_DSP *dsp, int index, int *value, char *valuestr, int valuestrlen)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetParameterInt$descriptor() {
        return FMOD_DSP_GetParameterInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterInt(FMOD_DSP *dsp, int index, int *value, char *valuestr, int valuestrlen)
     * }
     */
    public static MethodHandle FMOD_DSP_GetParameterInt$handle() {
        return FMOD_DSP_GetParameterInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterInt(FMOD_DSP *dsp, int index, int *value, char *valuestr, int valuestrlen)
     * }
     */
    public static MemorySegment FMOD_DSP_GetParameterInt$address() {
        return FMOD_DSP_GetParameterInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterInt(FMOD_DSP *dsp, int index, int *value, char *valuestr, int valuestrlen)
     * }
     */
    public static int FMOD_DSP_GetParameterInt(MemorySegment dsp, int index, MemorySegment value, MemorySegment valuestr, int valuestrlen) {
        var mh$ = FMOD_DSP_GetParameterInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetParameterInt", dsp, index, value, valuestr, valuestrlen);
            }
            return (int)mh$.invokeExact(dsp, index, value, valuestr, valuestrlen);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetParameterBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetParameterBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterBool(FMOD_DSP *dsp, int index, FMOD_BOOL *value, char *valuestr, int valuestrlen)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetParameterBool$descriptor() {
        return FMOD_DSP_GetParameterBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterBool(FMOD_DSP *dsp, int index, FMOD_BOOL *value, char *valuestr, int valuestrlen)
     * }
     */
    public static MethodHandle FMOD_DSP_GetParameterBool$handle() {
        return FMOD_DSP_GetParameterBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterBool(FMOD_DSP *dsp, int index, FMOD_BOOL *value, char *valuestr, int valuestrlen)
     * }
     */
    public static MemorySegment FMOD_DSP_GetParameterBool$address() {
        return FMOD_DSP_GetParameterBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterBool(FMOD_DSP *dsp, int index, FMOD_BOOL *value, char *valuestr, int valuestrlen)
     * }
     */
    public static int FMOD_DSP_GetParameterBool(MemorySegment dsp, int index, MemorySegment value, MemorySegment valuestr, int valuestrlen) {
        var mh$ = FMOD_DSP_GetParameterBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetParameterBool", dsp, index, value, valuestr, valuestrlen);
            }
            return (int)mh$.invokeExact(dsp, index, value, valuestr, valuestrlen);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetParameterData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetParameterData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterData(FMOD_DSP *dsp, int index, void **data, unsigned int *length, char *valuestr, int valuestrlen)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetParameterData$descriptor() {
        return FMOD_DSP_GetParameterData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterData(FMOD_DSP *dsp, int index, void **data, unsigned int *length, char *valuestr, int valuestrlen)
     * }
     */
    public static MethodHandle FMOD_DSP_GetParameterData$handle() {
        return FMOD_DSP_GetParameterData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterData(FMOD_DSP *dsp, int index, void **data, unsigned int *length, char *valuestr, int valuestrlen)
     * }
     */
    public static MemorySegment FMOD_DSP_GetParameterData$address() {
        return FMOD_DSP_GetParameterData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterData(FMOD_DSP *dsp, int index, void **data, unsigned int *length, char *valuestr, int valuestrlen)
     * }
     */
    public static int FMOD_DSP_GetParameterData(MemorySegment dsp, int index, MemorySegment data, MemorySegment length, MemorySegment valuestr, int valuestrlen) {
        var mh$ = FMOD_DSP_GetParameterData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetParameterData", dsp, index, data, length, valuestr, valuestrlen);
            }
            return (int)mh$.invokeExact(dsp, index, data, length, valuestr, valuestrlen);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetNumParameters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetNumParameters");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumParameters(FMOD_DSP *dsp, int *numparams)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetNumParameters$descriptor() {
        return FMOD_DSP_GetNumParameters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumParameters(FMOD_DSP *dsp, int *numparams)
     * }
     */
    public static MethodHandle FMOD_DSP_GetNumParameters$handle() {
        return FMOD_DSP_GetNumParameters.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumParameters(FMOD_DSP *dsp, int *numparams)
     * }
     */
    public static MemorySegment FMOD_DSP_GetNumParameters$address() {
        return FMOD_DSP_GetNumParameters.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetNumParameters(FMOD_DSP *dsp, int *numparams)
     * }
     */
    public static int FMOD_DSP_GetNumParameters(MemorySegment dsp, MemorySegment numparams) {
        var mh$ = FMOD_DSP_GetNumParameters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetNumParameters", dsp, numparams);
            }
            return (int)mh$.invokeExact(dsp, numparams);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetParameterInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetParameterInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterInfo(FMOD_DSP *dsp, int index, FMOD_DSP_PARAMETER_DESC **desc)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetParameterInfo$descriptor() {
        return FMOD_DSP_GetParameterInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterInfo(FMOD_DSP *dsp, int index, FMOD_DSP_PARAMETER_DESC **desc)
     * }
     */
    public static MethodHandle FMOD_DSP_GetParameterInfo$handle() {
        return FMOD_DSP_GetParameterInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterInfo(FMOD_DSP *dsp, int index, FMOD_DSP_PARAMETER_DESC **desc)
     * }
     */
    public static MemorySegment FMOD_DSP_GetParameterInfo$address() {
        return FMOD_DSP_GetParameterInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetParameterInfo(FMOD_DSP *dsp, int index, FMOD_DSP_PARAMETER_DESC **desc)
     * }
     */
    public static int FMOD_DSP_GetParameterInfo(MemorySegment dsp, int index, MemorySegment desc) {
        var mh$ = FMOD_DSP_GetParameterInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetParameterInfo", dsp, index, desc);
            }
            return (int)mh$.invokeExact(dsp, index, desc);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetDataParameterIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetDataParameterIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetDataParameterIndex(FMOD_DSP *dsp, int datatype, int *index)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetDataParameterIndex$descriptor() {
        return FMOD_DSP_GetDataParameterIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetDataParameterIndex(FMOD_DSP *dsp, int datatype, int *index)
     * }
     */
    public static MethodHandle FMOD_DSP_GetDataParameterIndex$handle() {
        return FMOD_DSP_GetDataParameterIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetDataParameterIndex(FMOD_DSP *dsp, int datatype, int *index)
     * }
     */
    public static MemorySegment FMOD_DSP_GetDataParameterIndex$address() {
        return FMOD_DSP_GetDataParameterIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetDataParameterIndex(FMOD_DSP *dsp, int datatype, int *index)
     * }
     */
    public static int FMOD_DSP_GetDataParameterIndex(MemorySegment dsp, int datatype, MemorySegment index) {
        var mh$ = FMOD_DSP_GetDataParameterIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetDataParameterIndex", dsp, datatype, index);
            }
            return (int)mh$.invokeExact(dsp, datatype, index);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_ShowConfigDialog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_ShowConfigDialog");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_ShowConfigDialog(FMOD_DSP *dsp, void *hwnd, FMOD_BOOL show)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_ShowConfigDialog$descriptor() {
        return FMOD_DSP_ShowConfigDialog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_ShowConfigDialog(FMOD_DSP *dsp, void *hwnd, FMOD_BOOL show)
     * }
     */
    public static MethodHandle FMOD_DSP_ShowConfigDialog$handle() {
        return FMOD_DSP_ShowConfigDialog.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_ShowConfigDialog(FMOD_DSP *dsp, void *hwnd, FMOD_BOOL show)
     * }
     */
    public static MemorySegment FMOD_DSP_ShowConfigDialog$address() {
        return FMOD_DSP_ShowConfigDialog.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_ShowConfigDialog(FMOD_DSP *dsp, void *hwnd, FMOD_BOOL show)
     * }
     */
    public static int FMOD_DSP_ShowConfigDialog(MemorySegment dsp, MemorySegment hwnd, int show) {
        var mh$ = FMOD_DSP_ShowConfigDialog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_ShowConfigDialog", dsp, hwnd, show);
            }
            return (int)mh$.invokeExact(dsp, hwnd, show);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetInfo(FMOD_DSP *dsp, char *name, unsigned int *version, int *channels, int *configwidth, int *configheight)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetInfo$descriptor() {
        return FMOD_DSP_GetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetInfo(FMOD_DSP *dsp, char *name, unsigned int *version, int *channels, int *configwidth, int *configheight)
     * }
     */
    public static MethodHandle FMOD_DSP_GetInfo$handle() {
        return FMOD_DSP_GetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetInfo(FMOD_DSP *dsp, char *name, unsigned int *version, int *channels, int *configwidth, int *configheight)
     * }
     */
    public static MemorySegment FMOD_DSP_GetInfo$address() {
        return FMOD_DSP_GetInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetInfo(FMOD_DSP *dsp, char *name, unsigned int *version, int *channels, int *configwidth, int *configheight)
     * }
     */
    public static int FMOD_DSP_GetInfo(MemorySegment dsp, MemorySegment name, MemorySegment version, MemorySegment channels, MemorySegment configwidth, MemorySegment configheight) {
        var mh$ = FMOD_DSP_GetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetInfo", dsp, name, version, channels, configwidth, configheight);
            }
            return (int)mh$.invokeExact(dsp, name, version, channels, configwidth, configheight);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetType(FMOD_DSP *dsp, FMOD_DSP_TYPE *type)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetType$descriptor() {
        return FMOD_DSP_GetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetType(FMOD_DSP *dsp, FMOD_DSP_TYPE *type)
     * }
     */
    public static MethodHandle FMOD_DSP_GetType$handle() {
        return FMOD_DSP_GetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetType(FMOD_DSP *dsp, FMOD_DSP_TYPE *type)
     * }
     */
    public static MemorySegment FMOD_DSP_GetType$address() {
        return FMOD_DSP_GetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetType(FMOD_DSP *dsp, FMOD_DSP_TYPE *type)
     * }
     */
    public static int FMOD_DSP_GetType(MemorySegment dsp, MemorySegment type) {
        var mh$ = FMOD_DSP_GetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetType", dsp, type);
            }
            return (int)mh$.invokeExact(dsp, type);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetIdle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetIdle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetIdle(FMOD_DSP *dsp, FMOD_BOOL *idle)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetIdle$descriptor() {
        return FMOD_DSP_GetIdle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetIdle(FMOD_DSP *dsp, FMOD_BOOL *idle)
     * }
     */
    public static MethodHandle FMOD_DSP_GetIdle$handle() {
        return FMOD_DSP_GetIdle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetIdle(FMOD_DSP *dsp, FMOD_BOOL *idle)
     * }
     */
    public static MemorySegment FMOD_DSP_GetIdle$address() {
        return FMOD_DSP_GetIdle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetIdle(FMOD_DSP *dsp, FMOD_BOOL *idle)
     * }
     */
    public static int FMOD_DSP_GetIdle(MemorySegment dsp, MemorySegment idle) {
        var mh$ = FMOD_DSP_GetIdle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetIdle", dsp, idle);
            }
            return (int)mh$.invokeExact(dsp, idle);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetUserData(FMOD_DSP *dsp, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_SetUserData$descriptor() {
        return FMOD_DSP_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetUserData(FMOD_DSP *dsp, void *userdata)
     * }
     */
    public static MethodHandle FMOD_DSP_SetUserData$handle() {
        return FMOD_DSP_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetUserData(FMOD_DSP *dsp, void *userdata)
     * }
     */
    public static MemorySegment FMOD_DSP_SetUserData$address() {
        return FMOD_DSP_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetUserData(FMOD_DSP *dsp, void *userdata)
     * }
     */
    public static int FMOD_DSP_SetUserData(MemorySegment dsp, MemorySegment userdata) {
        var mh$ = FMOD_DSP_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_SetUserData", dsp, userdata);
            }
            return (int)mh$.invokeExact(dsp, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetUserData(FMOD_DSP *dsp, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetUserData$descriptor() {
        return FMOD_DSP_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetUserData(FMOD_DSP *dsp, void **userdata)
     * }
     */
    public static MethodHandle FMOD_DSP_GetUserData$handle() {
        return FMOD_DSP_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetUserData(FMOD_DSP *dsp, void **userdata)
     * }
     */
    public static MemorySegment FMOD_DSP_GetUserData$address() {
        return FMOD_DSP_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetUserData(FMOD_DSP *dsp, void **userdata)
     * }
     */
    public static int FMOD_DSP_GetUserData(MemorySegment dsp, MemorySegment userdata) {
        var mh$ = FMOD_DSP_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetUserData", dsp, userdata);
            }
            return (int)mh$.invokeExact(dsp, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_SetMeteringEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_SetMeteringEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetMeteringEnabled(FMOD_DSP *dsp, FMOD_BOOL inputEnabled, FMOD_BOOL outputEnabled)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_SetMeteringEnabled$descriptor() {
        return FMOD_DSP_SetMeteringEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetMeteringEnabled(FMOD_DSP *dsp, FMOD_BOOL inputEnabled, FMOD_BOOL outputEnabled)
     * }
     */
    public static MethodHandle FMOD_DSP_SetMeteringEnabled$handle() {
        return FMOD_DSP_SetMeteringEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetMeteringEnabled(FMOD_DSP *dsp, FMOD_BOOL inputEnabled, FMOD_BOOL outputEnabled)
     * }
     */
    public static MemorySegment FMOD_DSP_SetMeteringEnabled$address() {
        return FMOD_DSP_SetMeteringEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_SetMeteringEnabled(FMOD_DSP *dsp, FMOD_BOOL inputEnabled, FMOD_BOOL outputEnabled)
     * }
     */
    public static int FMOD_DSP_SetMeteringEnabled(MemorySegment dsp, int inputEnabled, int outputEnabled) {
        var mh$ = FMOD_DSP_SetMeteringEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_SetMeteringEnabled", dsp, inputEnabled, outputEnabled);
            }
            return (int)mh$.invokeExact(dsp, inputEnabled, outputEnabled);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetMeteringEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetMeteringEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetMeteringEnabled(FMOD_DSP *dsp, FMOD_BOOL *inputEnabled, FMOD_BOOL *outputEnabled)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetMeteringEnabled$descriptor() {
        return FMOD_DSP_GetMeteringEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetMeteringEnabled(FMOD_DSP *dsp, FMOD_BOOL *inputEnabled, FMOD_BOOL *outputEnabled)
     * }
     */
    public static MethodHandle FMOD_DSP_GetMeteringEnabled$handle() {
        return FMOD_DSP_GetMeteringEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetMeteringEnabled(FMOD_DSP *dsp, FMOD_BOOL *inputEnabled, FMOD_BOOL *outputEnabled)
     * }
     */
    public static MemorySegment FMOD_DSP_GetMeteringEnabled$address() {
        return FMOD_DSP_GetMeteringEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetMeteringEnabled(FMOD_DSP *dsp, FMOD_BOOL *inputEnabled, FMOD_BOOL *outputEnabled)
     * }
     */
    public static int FMOD_DSP_GetMeteringEnabled(MemorySegment dsp, MemorySegment inputEnabled, MemorySegment outputEnabled) {
        var mh$ = FMOD_DSP_GetMeteringEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetMeteringEnabled", dsp, inputEnabled, outputEnabled);
            }
            return (int)mh$.invokeExact(dsp, inputEnabled, outputEnabled);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetMeteringInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetMeteringInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetMeteringInfo(FMOD_DSP *dsp, FMOD_DSP_METERING_INFO *inputInfo, FMOD_DSP_METERING_INFO *outputInfo)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetMeteringInfo$descriptor() {
        return FMOD_DSP_GetMeteringInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetMeteringInfo(FMOD_DSP *dsp, FMOD_DSP_METERING_INFO *inputInfo, FMOD_DSP_METERING_INFO *outputInfo)
     * }
     */
    public static MethodHandle FMOD_DSP_GetMeteringInfo$handle() {
        return FMOD_DSP_GetMeteringInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetMeteringInfo(FMOD_DSP *dsp, FMOD_DSP_METERING_INFO *inputInfo, FMOD_DSP_METERING_INFO *outputInfo)
     * }
     */
    public static MemorySegment FMOD_DSP_GetMeteringInfo$address() {
        return FMOD_DSP_GetMeteringInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetMeteringInfo(FMOD_DSP *dsp, FMOD_DSP_METERING_INFO *inputInfo, FMOD_DSP_METERING_INFO *outputInfo)
     * }
     */
    public static int FMOD_DSP_GetMeteringInfo(MemorySegment dsp, MemorySegment inputInfo, MemorySegment outputInfo) {
        var mh$ = FMOD_DSP_GetMeteringInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetMeteringInfo", dsp, inputInfo, outputInfo);
            }
            return (int)mh$.invokeExact(dsp, inputInfo, outputInfo);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSP_GetCPUUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSP_GetCPUUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetCPUUsage(FMOD_DSP *dsp, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static FunctionDescriptor FMOD_DSP_GetCPUUsage$descriptor() {
        return FMOD_DSP_GetCPUUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetCPUUsage(FMOD_DSP *dsp, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static MethodHandle FMOD_DSP_GetCPUUsage$handle() {
        return FMOD_DSP_GetCPUUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetCPUUsage(FMOD_DSP *dsp, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static MemorySegment FMOD_DSP_GetCPUUsage$address() {
        return FMOD_DSP_GetCPUUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSP_GetCPUUsage(FMOD_DSP *dsp, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static int FMOD_DSP_GetCPUUsage(MemorySegment dsp, MemorySegment exclusive, MemorySegment inclusive) {
        var mh$ = FMOD_DSP_GetCPUUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSP_GetCPUUsage", dsp, exclusive, inclusive);
            }
            return (int)mh$.invokeExact(dsp, exclusive, inclusive);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSPConnection_GetInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSPConnection_GetInput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetInput(FMOD_DSPCONNECTION *dspconnection, FMOD_DSP **input)
     * }
     */
    public static FunctionDescriptor FMOD_DSPConnection_GetInput$descriptor() {
        return FMOD_DSPConnection_GetInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetInput(FMOD_DSPCONNECTION *dspconnection, FMOD_DSP **input)
     * }
     */
    public static MethodHandle FMOD_DSPConnection_GetInput$handle() {
        return FMOD_DSPConnection_GetInput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetInput(FMOD_DSPCONNECTION *dspconnection, FMOD_DSP **input)
     * }
     */
    public static MemorySegment FMOD_DSPConnection_GetInput$address() {
        return FMOD_DSPConnection_GetInput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetInput(FMOD_DSPCONNECTION *dspconnection, FMOD_DSP **input)
     * }
     */
    public static int FMOD_DSPConnection_GetInput(MemorySegment dspconnection, MemorySegment input) {
        var mh$ = FMOD_DSPConnection_GetInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSPConnection_GetInput", dspconnection, input);
            }
            return (int)mh$.invokeExact(dspconnection, input);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSPConnection_GetOutput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSPConnection_GetOutput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetOutput(FMOD_DSPCONNECTION *dspconnection, FMOD_DSP **output)
     * }
     */
    public static FunctionDescriptor FMOD_DSPConnection_GetOutput$descriptor() {
        return FMOD_DSPConnection_GetOutput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetOutput(FMOD_DSPCONNECTION *dspconnection, FMOD_DSP **output)
     * }
     */
    public static MethodHandle FMOD_DSPConnection_GetOutput$handle() {
        return FMOD_DSPConnection_GetOutput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetOutput(FMOD_DSPCONNECTION *dspconnection, FMOD_DSP **output)
     * }
     */
    public static MemorySegment FMOD_DSPConnection_GetOutput$address() {
        return FMOD_DSPConnection_GetOutput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetOutput(FMOD_DSPCONNECTION *dspconnection, FMOD_DSP **output)
     * }
     */
    public static int FMOD_DSPConnection_GetOutput(MemorySegment dspconnection, MemorySegment output) {
        var mh$ = FMOD_DSPConnection_GetOutput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSPConnection_GetOutput", dspconnection, output);
            }
            return (int)mh$.invokeExact(dspconnection, output);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSPConnection_SetMix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSPConnection_SetMix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetMix(FMOD_DSPCONNECTION *dspconnection, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_DSPConnection_SetMix$descriptor() {
        return FMOD_DSPConnection_SetMix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetMix(FMOD_DSPCONNECTION *dspconnection, float volume)
     * }
     */
    public static MethodHandle FMOD_DSPConnection_SetMix$handle() {
        return FMOD_DSPConnection_SetMix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetMix(FMOD_DSPCONNECTION *dspconnection, float volume)
     * }
     */
    public static MemorySegment FMOD_DSPConnection_SetMix$address() {
        return FMOD_DSPConnection_SetMix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetMix(FMOD_DSPCONNECTION *dspconnection, float volume)
     * }
     */
    public static int FMOD_DSPConnection_SetMix(MemorySegment dspconnection, float volume) {
        var mh$ = FMOD_DSPConnection_SetMix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSPConnection_SetMix", dspconnection, volume);
            }
            return (int)mh$.invokeExact(dspconnection, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSPConnection_GetMix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSPConnection_GetMix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetMix(FMOD_DSPCONNECTION *dspconnection, float *volume)
     * }
     */
    public static FunctionDescriptor FMOD_DSPConnection_GetMix$descriptor() {
        return FMOD_DSPConnection_GetMix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetMix(FMOD_DSPCONNECTION *dspconnection, float *volume)
     * }
     */
    public static MethodHandle FMOD_DSPConnection_GetMix$handle() {
        return FMOD_DSPConnection_GetMix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetMix(FMOD_DSPCONNECTION *dspconnection, float *volume)
     * }
     */
    public static MemorySegment FMOD_DSPConnection_GetMix$address() {
        return FMOD_DSPConnection_GetMix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetMix(FMOD_DSPCONNECTION *dspconnection, float *volume)
     * }
     */
    public static int FMOD_DSPConnection_GetMix(MemorySegment dspconnection, MemorySegment volume) {
        var mh$ = FMOD_DSPConnection_GetMix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSPConnection_GetMix", dspconnection, volume);
            }
            return (int)mh$.invokeExact(dspconnection, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSPConnection_SetMixMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSPConnection_SetMixMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetMixMatrix(FMOD_DSPCONNECTION *dspconnection, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static FunctionDescriptor FMOD_DSPConnection_SetMixMatrix$descriptor() {
        return FMOD_DSPConnection_SetMixMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetMixMatrix(FMOD_DSPCONNECTION *dspconnection, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static MethodHandle FMOD_DSPConnection_SetMixMatrix$handle() {
        return FMOD_DSPConnection_SetMixMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetMixMatrix(FMOD_DSPCONNECTION *dspconnection, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static MemorySegment FMOD_DSPConnection_SetMixMatrix$address() {
        return FMOD_DSPConnection_SetMixMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetMixMatrix(FMOD_DSPCONNECTION *dspconnection, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static int FMOD_DSPConnection_SetMixMatrix(MemorySegment dspconnection, MemorySegment matrix, int outchannels, int inchannels, int inchannel_hop) {
        var mh$ = FMOD_DSPConnection_SetMixMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSPConnection_SetMixMatrix", dspconnection, matrix, outchannels, inchannels, inchannel_hop);
            }
            return (int)mh$.invokeExact(dspconnection, matrix, outchannels, inchannels, inchannel_hop);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSPConnection_GetMixMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSPConnection_GetMixMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetMixMatrix(FMOD_DSPCONNECTION *dspconnection, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static FunctionDescriptor FMOD_DSPConnection_GetMixMatrix$descriptor() {
        return FMOD_DSPConnection_GetMixMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetMixMatrix(FMOD_DSPCONNECTION *dspconnection, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static MethodHandle FMOD_DSPConnection_GetMixMatrix$handle() {
        return FMOD_DSPConnection_GetMixMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetMixMatrix(FMOD_DSPCONNECTION *dspconnection, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static MemorySegment FMOD_DSPConnection_GetMixMatrix$address() {
        return FMOD_DSPConnection_GetMixMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetMixMatrix(FMOD_DSPCONNECTION *dspconnection, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static int FMOD_DSPConnection_GetMixMatrix(MemorySegment dspconnection, MemorySegment matrix, MemorySegment outchannels, MemorySegment inchannels, int inchannel_hop) {
        var mh$ = FMOD_DSPConnection_GetMixMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSPConnection_GetMixMatrix", dspconnection, matrix, outchannels, inchannels, inchannel_hop);
            }
            return (int)mh$.invokeExact(dspconnection, matrix, outchannels, inchannels, inchannel_hop);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSPConnection_GetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSPConnection_GetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetType(FMOD_DSPCONNECTION *dspconnection, FMOD_DSPCONNECTION_TYPE *type)
     * }
     */
    public static FunctionDescriptor FMOD_DSPConnection_GetType$descriptor() {
        return FMOD_DSPConnection_GetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetType(FMOD_DSPCONNECTION *dspconnection, FMOD_DSPCONNECTION_TYPE *type)
     * }
     */
    public static MethodHandle FMOD_DSPConnection_GetType$handle() {
        return FMOD_DSPConnection_GetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetType(FMOD_DSPCONNECTION *dspconnection, FMOD_DSPCONNECTION_TYPE *type)
     * }
     */
    public static MemorySegment FMOD_DSPConnection_GetType$address() {
        return FMOD_DSPConnection_GetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetType(FMOD_DSPCONNECTION *dspconnection, FMOD_DSPCONNECTION_TYPE *type)
     * }
     */
    public static int FMOD_DSPConnection_GetType(MemorySegment dspconnection, MemorySegment type) {
        var mh$ = FMOD_DSPConnection_GetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSPConnection_GetType", dspconnection, type);
            }
            return (int)mh$.invokeExact(dspconnection, type);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSPConnection_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSPConnection_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetUserData(FMOD_DSPCONNECTION *dspconnection, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_DSPConnection_SetUserData$descriptor() {
        return FMOD_DSPConnection_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetUserData(FMOD_DSPCONNECTION *dspconnection, void *userdata)
     * }
     */
    public static MethodHandle FMOD_DSPConnection_SetUserData$handle() {
        return FMOD_DSPConnection_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetUserData(FMOD_DSPCONNECTION *dspconnection, void *userdata)
     * }
     */
    public static MemorySegment FMOD_DSPConnection_SetUserData$address() {
        return FMOD_DSPConnection_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_SetUserData(FMOD_DSPCONNECTION *dspconnection, void *userdata)
     * }
     */
    public static int FMOD_DSPConnection_SetUserData(MemorySegment dspconnection, MemorySegment userdata) {
        var mh$ = FMOD_DSPConnection_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSPConnection_SetUserData", dspconnection, userdata);
            }
            return (int)mh$.invokeExact(dspconnection, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_DSPConnection_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_DSPConnection_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetUserData(FMOD_DSPCONNECTION *dspconnection, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_DSPConnection_GetUserData$descriptor() {
        return FMOD_DSPConnection_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetUserData(FMOD_DSPCONNECTION *dspconnection, void **userdata)
     * }
     */
    public static MethodHandle FMOD_DSPConnection_GetUserData$handle() {
        return FMOD_DSPConnection_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetUserData(FMOD_DSPCONNECTION *dspconnection, void **userdata)
     * }
     */
    public static MemorySegment FMOD_DSPConnection_GetUserData$address() {
        return FMOD_DSPConnection_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_DSPConnection_GetUserData(FMOD_DSPCONNECTION *dspconnection, void **userdata)
     * }
     */
    public static int FMOD_DSPConnection_GetUserData(MemorySegment dspconnection, MemorySegment userdata) {
        var mh$ = FMOD_DSPConnection_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_DSPConnection_GetUserData", dspconnection, userdata);
            }
            return (int)mh$.invokeExact(dspconnection, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_Release(FMOD_GEOMETRY *geometry)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_Release$descriptor() {
        return FMOD_Geometry_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_Release(FMOD_GEOMETRY *geometry)
     * }
     */
    public static MethodHandle FMOD_Geometry_Release$handle() {
        return FMOD_Geometry_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_Release(FMOD_GEOMETRY *geometry)
     * }
     */
    public static MemorySegment FMOD_Geometry_Release$address() {
        return FMOD_Geometry_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_Release(FMOD_GEOMETRY *geometry)
     * }
     */
    public static int FMOD_Geometry_Release(MemorySegment geometry) {
        var mh$ = FMOD_Geometry_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_Release", geometry);
            }
            return (int)mh$.invokeExact(geometry);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_AddPolygon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_AddPolygon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_AddPolygon(FMOD_GEOMETRY *geometry, float directocclusion, float reverbocclusion, FMOD_BOOL doublesided, int numvertices, const FMOD_VECTOR *vertices, int *polygonindex)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_AddPolygon$descriptor() {
        return FMOD_Geometry_AddPolygon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_AddPolygon(FMOD_GEOMETRY *geometry, float directocclusion, float reverbocclusion, FMOD_BOOL doublesided, int numvertices, const FMOD_VECTOR *vertices, int *polygonindex)
     * }
     */
    public static MethodHandle FMOD_Geometry_AddPolygon$handle() {
        return FMOD_Geometry_AddPolygon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_AddPolygon(FMOD_GEOMETRY *geometry, float directocclusion, float reverbocclusion, FMOD_BOOL doublesided, int numvertices, const FMOD_VECTOR *vertices, int *polygonindex)
     * }
     */
    public static MemorySegment FMOD_Geometry_AddPolygon$address() {
        return FMOD_Geometry_AddPolygon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_AddPolygon(FMOD_GEOMETRY *geometry, float directocclusion, float reverbocclusion, FMOD_BOOL doublesided, int numvertices, const FMOD_VECTOR *vertices, int *polygonindex)
     * }
     */
    public static int FMOD_Geometry_AddPolygon(MemorySegment geometry, float directocclusion, float reverbocclusion, int doublesided, int numvertices, MemorySegment vertices, MemorySegment polygonindex) {
        var mh$ = FMOD_Geometry_AddPolygon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_AddPolygon", geometry, directocclusion, reverbocclusion, doublesided, numvertices, vertices, polygonindex);
            }
            return (int)mh$.invokeExact(geometry, directocclusion, reverbocclusion, doublesided, numvertices, vertices, polygonindex);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_GetNumPolygons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_GetNumPolygons");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetNumPolygons(FMOD_GEOMETRY *geometry, int *numpolygons)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_GetNumPolygons$descriptor() {
        return FMOD_Geometry_GetNumPolygons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetNumPolygons(FMOD_GEOMETRY *geometry, int *numpolygons)
     * }
     */
    public static MethodHandle FMOD_Geometry_GetNumPolygons$handle() {
        return FMOD_Geometry_GetNumPolygons.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetNumPolygons(FMOD_GEOMETRY *geometry, int *numpolygons)
     * }
     */
    public static MemorySegment FMOD_Geometry_GetNumPolygons$address() {
        return FMOD_Geometry_GetNumPolygons.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetNumPolygons(FMOD_GEOMETRY *geometry, int *numpolygons)
     * }
     */
    public static int FMOD_Geometry_GetNumPolygons(MemorySegment geometry, MemorySegment numpolygons) {
        var mh$ = FMOD_Geometry_GetNumPolygons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_GetNumPolygons", geometry, numpolygons);
            }
            return (int)mh$.invokeExact(geometry, numpolygons);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_GetMaxPolygons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_GetMaxPolygons");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetMaxPolygons(FMOD_GEOMETRY *geometry, int *maxpolygons, int *maxvertices)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_GetMaxPolygons$descriptor() {
        return FMOD_Geometry_GetMaxPolygons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetMaxPolygons(FMOD_GEOMETRY *geometry, int *maxpolygons, int *maxvertices)
     * }
     */
    public static MethodHandle FMOD_Geometry_GetMaxPolygons$handle() {
        return FMOD_Geometry_GetMaxPolygons.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetMaxPolygons(FMOD_GEOMETRY *geometry, int *maxpolygons, int *maxvertices)
     * }
     */
    public static MemorySegment FMOD_Geometry_GetMaxPolygons$address() {
        return FMOD_Geometry_GetMaxPolygons.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetMaxPolygons(FMOD_GEOMETRY *geometry, int *maxpolygons, int *maxvertices)
     * }
     */
    public static int FMOD_Geometry_GetMaxPolygons(MemorySegment geometry, MemorySegment maxpolygons, MemorySegment maxvertices) {
        var mh$ = FMOD_Geometry_GetMaxPolygons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_GetMaxPolygons", geometry, maxpolygons, maxvertices);
            }
            return (int)mh$.invokeExact(geometry, maxpolygons, maxvertices);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_GetPolygonNumVertices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_GetPolygonNumVertices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonNumVertices(FMOD_GEOMETRY *geometry, int index, int *numvertices)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_GetPolygonNumVertices$descriptor() {
        return FMOD_Geometry_GetPolygonNumVertices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonNumVertices(FMOD_GEOMETRY *geometry, int index, int *numvertices)
     * }
     */
    public static MethodHandle FMOD_Geometry_GetPolygonNumVertices$handle() {
        return FMOD_Geometry_GetPolygonNumVertices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonNumVertices(FMOD_GEOMETRY *geometry, int index, int *numvertices)
     * }
     */
    public static MemorySegment FMOD_Geometry_GetPolygonNumVertices$address() {
        return FMOD_Geometry_GetPolygonNumVertices.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonNumVertices(FMOD_GEOMETRY *geometry, int index, int *numvertices)
     * }
     */
    public static int FMOD_Geometry_GetPolygonNumVertices(MemorySegment geometry, int index, MemorySegment numvertices) {
        var mh$ = FMOD_Geometry_GetPolygonNumVertices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_GetPolygonNumVertices", geometry, index, numvertices);
            }
            return (int)mh$.invokeExact(geometry, index, numvertices);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_SetPolygonVertex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_SetPolygonVertex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPolygonVertex(FMOD_GEOMETRY *geometry, int index, int vertexindex, const FMOD_VECTOR *vertex)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_SetPolygonVertex$descriptor() {
        return FMOD_Geometry_SetPolygonVertex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPolygonVertex(FMOD_GEOMETRY *geometry, int index, int vertexindex, const FMOD_VECTOR *vertex)
     * }
     */
    public static MethodHandle FMOD_Geometry_SetPolygonVertex$handle() {
        return FMOD_Geometry_SetPolygonVertex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPolygonVertex(FMOD_GEOMETRY *geometry, int index, int vertexindex, const FMOD_VECTOR *vertex)
     * }
     */
    public static MemorySegment FMOD_Geometry_SetPolygonVertex$address() {
        return FMOD_Geometry_SetPolygonVertex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPolygonVertex(FMOD_GEOMETRY *geometry, int index, int vertexindex, const FMOD_VECTOR *vertex)
     * }
     */
    public static int FMOD_Geometry_SetPolygonVertex(MemorySegment geometry, int index, int vertexindex, MemorySegment vertex) {
        var mh$ = FMOD_Geometry_SetPolygonVertex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_SetPolygonVertex", geometry, index, vertexindex, vertex);
            }
            return (int)mh$.invokeExact(geometry, index, vertexindex, vertex);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_GetPolygonVertex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_GetPolygonVertex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonVertex(FMOD_GEOMETRY *geometry, int index, int vertexindex, FMOD_VECTOR *vertex)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_GetPolygonVertex$descriptor() {
        return FMOD_Geometry_GetPolygonVertex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonVertex(FMOD_GEOMETRY *geometry, int index, int vertexindex, FMOD_VECTOR *vertex)
     * }
     */
    public static MethodHandle FMOD_Geometry_GetPolygonVertex$handle() {
        return FMOD_Geometry_GetPolygonVertex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonVertex(FMOD_GEOMETRY *geometry, int index, int vertexindex, FMOD_VECTOR *vertex)
     * }
     */
    public static MemorySegment FMOD_Geometry_GetPolygonVertex$address() {
        return FMOD_Geometry_GetPolygonVertex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonVertex(FMOD_GEOMETRY *geometry, int index, int vertexindex, FMOD_VECTOR *vertex)
     * }
     */
    public static int FMOD_Geometry_GetPolygonVertex(MemorySegment geometry, int index, int vertexindex, MemorySegment vertex) {
        var mh$ = FMOD_Geometry_GetPolygonVertex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_GetPolygonVertex", geometry, index, vertexindex, vertex);
            }
            return (int)mh$.invokeExact(geometry, index, vertexindex, vertex);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_SetPolygonAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_SetPolygonAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPolygonAttributes(FMOD_GEOMETRY *geometry, int index, float directocclusion, float reverbocclusion, FMOD_BOOL doublesided)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_SetPolygonAttributes$descriptor() {
        return FMOD_Geometry_SetPolygonAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPolygonAttributes(FMOD_GEOMETRY *geometry, int index, float directocclusion, float reverbocclusion, FMOD_BOOL doublesided)
     * }
     */
    public static MethodHandle FMOD_Geometry_SetPolygonAttributes$handle() {
        return FMOD_Geometry_SetPolygonAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPolygonAttributes(FMOD_GEOMETRY *geometry, int index, float directocclusion, float reverbocclusion, FMOD_BOOL doublesided)
     * }
     */
    public static MemorySegment FMOD_Geometry_SetPolygonAttributes$address() {
        return FMOD_Geometry_SetPolygonAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPolygonAttributes(FMOD_GEOMETRY *geometry, int index, float directocclusion, float reverbocclusion, FMOD_BOOL doublesided)
     * }
     */
    public static int FMOD_Geometry_SetPolygonAttributes(MemorySegment geometry, int index, float directocclusion, float reverbocclusion, int doublesided) {
        var mh$ = FMOD_Geometry_SetPolygonAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_SetPolygonAttributes", geometry, index, directocclusion, reverbocclusion, doublesided);
            }
            return (int)mh$.invokeExact(geometry, index, directocclusion, reverbocclusion, doublesided);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_GetPolygonAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_GetPolygonAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonAttributes(FMOD_GEOMETRY *geometry, int index, float *directocclusion, float *reverbocclusion, FMOD_BOOL *doublesided)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_GetPolygonAttributes$descriptor() {
        return FMOD_Geometry_GetPolygonAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonAttributes(FMOD_GEOMETRY *geometry, int index, float *directocclusion, float *reverbocclusion, FMOD_BOOL *doublesided)
     * }
     */
    public static MethodHandle FMOD_Geometry_GetPolygonAttributes$handle() {
        return FMOD_Geometry_GetPolygonAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonAttributes(FMOD_GEOMETRY *geometry, int index, float *directocclusion, float *reverbocclusion, FMOD_BOOL *doublesided)
     * }
     */
    public static MemorySegment FMOD_Geometry_GetPolygonAttributes$address() {
        return FMOD_Geometry_GetPolygonAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPolygonAttributes(FMOD_GEOMETRY *geometry, int index, float *directocclusion, float *reverbocclusion, FMOD_BOOL *doublesided)
     * }
     */
    public static int FMOD_Geometry_GetPolygonAttributes(MemorySegment geometry, int index, MemorySegment directocclusion, MemorySegment reverbocclusion, MemorySegment doublesided) {
        var mh$ = FMOD_Geometry_GetPolygonAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_GetPolygonAttributes", geometry, index, directocclusion, reverbocclusion, doublesided);
            }
            return (int)mh$.invokeExact(geometry, index, directocclusion, reverbocclusion, doublesided);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_SetActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_SetActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetActive(FMOD_GEOMETRY *geometry, FMOD_BOOL active)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_SetActive$descriptor() {
        return FMOD_Geometry_SetActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetActive(FMOD_GEOMETRY *geometry, FMOD_BOOL active)
     * }
     */
    public static MethodHandle FMOD_Geometry_SetActive$handle() {
        return FMOD_Geometry_SetActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetActive(FMOD_GEOMETRY *geometry, FMOD_BOOL active)
     * }
     */
    public static MemorySegment FMOD_Geometry_SetActive$address() {
        return FMOD_Geometry_SetActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetActive(FMOD_GEOMETRY *geometry, FMOD_BOOL active)
     * }
     */
    public static int FMOD_Geometry_SetActive(MemorySegment geometry, int active) {
        var mh$ = FMOD_Geometry_SetActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_SetActive", geometry, active);
            }
            return (int)mh$.invokeExact(geometry, active);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_GetActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_GetActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetActive(FMOD_GEOMETRY *geometry, FMOD_BOOL *active)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_GetActive$descriptor() {
        return FMOD_Geometry_GetActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetActive(FMOD_GEOMETRY *geometry, FMOD_BOOL *active)
     * }
     */
    public static MethodHandle FMOD_Geometry_GetActive$handle() {
        return FMOD_Geometry_GetActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetActive(FMOD_GEOMETRY *geometry, FMOD_BOOL *active)
     * }
     */
    public static MemorySegment FMOD_Geometry_GetActive$address() {
        return FMOD_Geometry_GetActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetActive(FMOD_GEOMETRY *geometry, FMOD_BOOL *active)
     * }
     */
    public static int FMOD_Geometry_GetActive(MemorySegment geometry, MemorySegment active) {
        var mh$ = FMOD_Geometry_GetActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_GetActive", geometry, active);
            }
            return (int)mh$.invokeExact(geometry, active);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_SetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_SetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetRotation(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *forward, const FMOD_VECTOR *up)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_SetRotation$descriptor() {
        return FMOD_Geometry_SetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetRotation(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *forward, const FMOD_VECTOR *up)
     * }
     */
    public static MethodHandle FMOD_Geometry_SetRotation$handle() {
        return FMOD_Geometry_SetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetRotation(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *forward, const FMOD_VECTOR *up)
     * }
     */
    public static MemorySegment FMOD_Geometry_SetRotation$address() {
        return FMOD_Geometry_SetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetRotation(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *forward, const FMOD_VECTOR *up)
     * }
     */
    public static int FMOD_Geometry_SetRotation(MemorySegment geometry, MemorySegment forward, MemorySegment up) {
        var mh$ = FMOD_Geometry_SetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_SetRotation", geometry, forward, up);
            }
            return (int)mh$.invokeExact(geometry, forward, up);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_GetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_GetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetRotation(FMOD_GEOMETRY *geometry, FMOD_VECTOR *forward, FMOD_VECTOR *up)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_GetRotation$descriptor() {
        return FMOD_Geometry_GetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetRotation(FMOD_GEOMETRY *geometry, FMOD_VECTOR *forward, FMOD_VECTOR *up)
     * }
     */
    public static MethodHandle FMOD_Geometry_GetRotation$handle() {
        return FMOD_Geometry_GetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetRotation(FMOD_GEOMETRY *geometry, FMOD_VECTOR *forward, FMOD_VECTOR *up)
     * }
     */
    public static MemorySegment FMOD_Geometry_GetRotation$address() {
        return FMOD_Geometry_GetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetRotation(FMOD_GEOMETRY *geometry, FMOD_VECTOR *forward, FMOD_VECTOR *up)
     * }
     */
    public static int FMOD_Geometry_GetRotation(MemorySegment geometry, MemorySegment forward, MemorySegment up) {
        var mh$ = FMOD_Geometry_GetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_GetRotation", geometry, forward, up);
            }
            return (int)mh$.invokeExact(geometry, forward, up);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_SetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_SetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPosition(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *position)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_SetPosition$descriptor() {
        return FMOD_Geometry_SetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPosition(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *position)
     * }
     */
    public static MethodHandle FMOD_Geometry_SetPosition$handle() {
        return FMOD_Geometry_SetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPosition(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *position)
     * }
     */
    public static MemorySegment FMOD_Geometry_SetPosition$address() {
        return FMOD_Geometry_SetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetPosition(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *position)
     * }
     */
    public static int FMOD_Geometry_SetPosition(MemorySegment geometry, MemorySegment position) {
        var mh$ = FMOD_Geometry_SetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_SetPosition", geometry, position);
            }
            return (int)mh$.invokeExact(geometry, position);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_GetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_GetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPosition(FMOD_GEOMETRY *geometry, FMOD_VECTOR *position)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_GetPosition$descriptor() {
        return FMOD_Geometry_GetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPosition(FMOD_GEOMETRY *geometry, FMOD_VECTOR *position)
     * }
     */
    public static MethodHandle FMOD_Geometry_GetPosition$handle() {
        return FMOD_Geometry_GetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPosition(FMOD_GEOMETRY *geometry, FMOD_VECTOR *position)
     * }
     */
    public static MemorySegment FMOD_Geometry_GetPosition$address() {
        return FMOD_Geometry_GetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetPosition(FMOD_GEOMETRY *geometry, FMOD_VECTOR *position)
     * }
     */
    public static int FMOD_Geometry_GetPosition(MemorySegment geometry, MemorySegment position) {
        var mh$ = FMOD_Geometry_GetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_GetPosition", geometry, position);
            }
            return (int)mh$.invokeExact(geometry, position);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_SetScale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_SetScale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetScale(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *scale)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_SetScale$descriptor() {
        return FMOD_Geometry_SetScale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetScale(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *scale)
     * }
     */
    public static MethodHandle FMOD_Geometry_SetScale$handle() {
        return FMOD_Geometry_SetScale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetScale(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *scale)
     * }
     */
    public static MemorySegment FMOD_Geometry_SetScale$address() {
        return FMOD_Geometry_SetScale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetScale(FMOD_GEOMETRY *geometry, const FMOD_VECTOR *scale)
     * }
     */
    public static int FMOD_Geometry_SetScale(MemorySegment geometry, MemorySegment scale) {
        var mh$ = FMOD_Geometry_SetScale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_SetScale", geometry, scale);
            }
            return (int)mh$.invokeExact(geometry, scale);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_GetScale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_GetScale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetScale(FMOD_GEOMETRY *geometry, FMOD_VECTOR *scale)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_GetScale$descriptor() {
        return FMOD_Geometry_GetScale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetScale(FMOD_GEOMETRY *geometry, FMOD_VECTOR *scale)
     * }
     */
    public static MethodHandle FMOD_Geometry_GetScale$handle() {
        return FMOD_Geometry_GetScale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetScale(FMOD_GEOMETRY *geometry, FMOD_VECTOR *scale)
     * }
     */
    public static MemorySegment FMOD_Geometry_GetScale$address() {
        return FMOD_Geometry_GetScale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetScale(FMOD_GEOMETRY *geometry, FMOD_VECTOR *scale)
     * }
     */
    public static int FMOD_Geometry_GetScale(MemorySegment geometry, MemorySegment scale) {
        var mh$ = FMOD_Geometry_GetScale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_GetScale", geometry, scale);
            }
            return (int)mh$.invokeExact(geometry, scale);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_Save {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_Save");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_Save(FMOD_GEOMETRY *geometry, void *data, int *datasize)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_Save$descriptor() {
        return FMOD_Geometry_Save.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_Save(FMOD_GEOMETRY *geometry, void *data, int *datasize)
     * }
     */
    public static MethodHandle FMOD_Geometry_Save$handle() {
        return FMOD_Geometry_Save.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_Save(FMOD_GEOMETRY *geometry, void *data, int *datasize)
     * }
     */
    public static MemorySegment FMOD_Geometry_Save$address() {
        return FMOD_Geometry_Save.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_Save(FMOD_GEOMETRY *geometry, void *data, int *datasize)
     * }
     */
    public static int FMOD_Geometry_Save(MemorySegment geometry, MemorySegment data, MemorySegment datasize) {
        var mh$ = FMOD_Geometry_Save.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_Save", geometry, data, datasize);
            }
            return (int)mh$.invokeExact(geometry, data, datasize);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetUserData(FMOD_GEOMETRY *geometry, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_SetUserData$descriptor() {
        return FMOD_Geometry_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetUserData(FMOD_GEOMETRY *geometry, void *userdata)
     * }
     */
    public static MethodHandle FMOD_Geometry_SetUserData$handle() {
        return FMOD_Geometry_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetUserData(FMOD_GEOMETRY *geometry, void *userdata)
     * }
     */
    public static MemorySegment FMOD_Geometry_SetUserData$address() {
        return FMOD_Geometry_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_SetUserData(FMOD_GEOMETRY *geometry, void *userdata)
     * }
     */
    public static int FMOD_Geometry_SetUserData(MemorySegment geometry, MemorySegment userdata) {
        var mh$ = FMOD_Geometry_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_SetUserData", geometry, userdata);
            }
            return (int)mh$.invokeExact(geometry, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Geometry_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Geometry_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetUserData(FMOD_GEOMETRY *geometry, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Geometry_GetUserData$descriptor() {
        return FMOD_Geometry_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetUserData(FMOD_GEOMETRY *geometry, void **userdata)
     * }
     */
    public static MethodHandle FMOD_Geometry_GetUserData$handle() {
        return FMOD_Geometry_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetUserData(FMOD_GEOMETRY *geometry, void **userdata)
     * }
     */
    public static MemorySegment FMOD_Geometry_GetUserData$address() {
        return FMOD_Geometry_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Geometry_GetUserData(FMOD_GEOMETRY *geometry, void **userdata)
     * }
     */
    public static int FMOD_Geometry_GetUserData(MemorySegment geometry, MemorySegment userdata) {
        var mh$ = FMOD_Geometry_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Geometry_GetUserData", geometry, userdata);
            }
            return (int)mh$.invokeExact(geometry, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Reverb3D_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Reverb3D_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Release(FMOD_REVERB3D *reverb3d)
     * }
     */
    public static FunctionDescriptor FMOD_Reverb3D_Release$descriptor() {
        return FMOD_Reverb3D_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Release(FMOD_REVERB3D *reverb3d)
     * }
     */
    public static MethodHandle FMOD_Reverb3D_Release$handle() {
        return FMOD_Reverb3D_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Release(FMOD_REVERB3D *reverb3d)
     * }
     */
    public static MemorySegment FMOD_Reverb3D_Release$address() {
        return FMOD_Reverb3D_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Release(FMOD_REVERB3D *reverb3d)
     * }
     */
    public static int FMOD_Reverb3D_Release(MemorySegment reverb3d) {
        var mh$ = FMOD_Reverb3D_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Reverb3D_Release", reverb3d);
            }
            return (int)mh$.invokeExact(reverb3d);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Reverb3D_Set3DAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Reverb3D_Set3DAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Set3DAttributes(FMOD_REVERB3D *reverb3d, const FMOD_VECTOR *position, float mindistance, float maxdistance)
     * }
     */
    public static FunctionDescriptor FMOD_Reverb3D_Set3DAttributes$descriptor() {
        return FMOD_Reverb3D_Set3DAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Set3DAttributes(FMOD_REVERB3D *reverb3d, const FMOD_VECTOR *position, float mindistance, float maxdistance)
     * }
     */
    public static MethodHandle FMOD_Reverb3D_Set3DAttributes$handle() {
        return FMOD_Reverb3D_Set3DAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Set3DAttributes(FMOD_REVERB3D *reverb3d, const FMOD_VECTOR *position, float mindistance, float maxdistance)
     * }
     */
    public static MemorySegment FMOD_Reverb3D_Set3DAttributes$address() {
        return FMOD_Reverb3D_Set3DAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Set3DAttributes(FMOD_REVERB3D *reverb3d, const FMOD_VECTOR *position, float mindistance, float maxdistance)
     * }
     */
    public static int FMOD_Reverb3D_Set3DAttributes(MemorySegment reverb3d, MemorySegment position, float mindistance, float maxdistance) {
        var mh$ = FMOD_Reverb3D_Set3DAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Reverb3D_Set3DAttributes", reverb3d, position, mindistance, maxdistance);
            }
            return (int)mh$.invokeExact(reverb3d, position, mindistance, maxdistance);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Reverb3D_Get3DAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Reverb3D_Get3DAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Get3DAttributes(FMOD_REVERB3D *reverb3d, FMOD_VECTOR *position, float *mindistance, float *maxdistance)
     * }
     */
    public static FunctionDescriptor FMOD_Reverb3D_Get3DAttributes$descriptor() {
        return FMOD_Reverb3D_Get3DAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Get3DAttributes(FMOD_REVERB3D *reverb3d, FMOD_VECTOR *position, float *mindistance, float *maxdistance)
     * }
     */
    public static MethodHandle FMOD_Reverb3D_Get3DAttributes$handle() {
        return FMOD_Reverb3D_Get3DAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Get3DAttributes(FMOD_REVERB3D *reverb3d, FMOD_VECTOR *position, float *mindistance, float *maxdistance)
     * }
     */
    public static MemorySegment FMOD_Reverb3D_Get3DAttributes$address() {
        return FMOD_Reverb3D_Get3DAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_Get3DAttributes(FMOD_REVERB3D *reverb3d, FMOD_VECTOR *position, float *mindistance, float *maxdistance)
     * }
     */
    public static int FMOD_Reverb3D_Get3DAttributes(MemorySegment reverb3d, MemorySegment position, MemorySegment mindistance, MemorySegment maxdistance) {
        var mh$ = FMOD_Reverb3D_Get3DAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Reverb3D_Get3DAttributes", reverb3d, position, mindistance, maxdistance);
            }
            return (int)mh$.invokeExact(reverb3d, position, mindistance, maxdistance);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Reverb3D_SetProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Reverb3D_SetProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetProperties(FMOD_REVERB3D *reverb3d, const FMOD_REVERB_PROPERTIES *properties)
     * }
     */
    public static FunctionDescriptor FMOD_Reverb3D_SetProperties$descriptor() {
        return FMOD_Reverb3D_SetProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetProperties(FMOD_REVERB3D *reverb3d, const FMOD_REVERB_PROPERTIES *properties)
     * }
     */
    public static MethodHandle FMOD_Reverb3D_SetProperties$handle() {
        return FMOD_Reverb3D_SetProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetProperties(FMOD_REVERB3D *reverb3d, const FMOD_REVERB_PROPERTIES *properties)
     * }
     */
    public static MemorySegment FMOD_Reverb3D_SetProperties$address() {
        return FMOD_Reverb3D_SetProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetProperties(FMOD_REVERB3D *reverb3d, const FMOD_REVERB_PROPERTIES *properties)
     * }
     */
    public static int FMOD_Reverb3D_SetProperties(MemorySegment reverb3d, MemorySegment properties) {
        var mh$ = FMOD_Reverb3D_SetProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Reverb3D_SetProperties", reverb3d, properties);
            }
            return (int)mh$.invokeExact(reverb3d, properties);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Reverb3D_GetProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Reverb3D_GetProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetProperties(FMOD_REVERB3D *reverb3d, FMOD_REVERB_PROPERTIES *properties)
     * }
     */
    public static FunctionDescriptor FMOD_Reverb3D_GetProperties$descriptor() {
        return FMOD_Reverb3D_GetProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetProperties(FMOD_REVERB3D *reverb3d, FMOD_REVERB_PROPERTIES *properties)
     * }
     */
    public static MethodHandle FMOD_Reverb3D_GetProperties$handle() {
        return FMOD_Reverb3D_GetProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetProperties(FMOD_REVERB3D *reverb3d, FMOD_REVERB_PROPERTIES *properties)
     * }
     */
    public static MemorySegment FMOD_Reverb3D_GetProperties$address() {
        return FMOD_Reverb3D_GetProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetProperties(FMOD_REVERB3D *reverb3d, FMOD_REVERB_PROPERTIES *properties)
     * }
     */
    public static int FMOD_Reverb3D_GetProperties(MemorySegment reverb3d, MemorySegment properties) {
        var mh$ = FMOD_Reverb3D_GetProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Reverb3D_GetProperties", reverb3d, properties);
            }
            return (int)mh$.invokeExact(reverb3d, properties);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Reverb3D_SetActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Reverb3D_SetActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetActive(FMOD_REVERB3D *reverb3d, FMOD_BOOL active)
     * }
     */
    public static FunctionDescriptor FMOD_Reverb3D_SetActive$descriptor() {
        return FMOD_Reverb3D_SetActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetActive(FMOD_REVERB3D *reverb3d, FMOD_BOOL active)
     * }
     */
    public static MethodHandle FMOD_Reverb3D_SetActive$handle() {
        return FMOD_Reverb3D_SetActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetActive(FMOD_REVERB3D *reverb3d, FMOD_BOOL active)
     * }
     */
    public static MemorySegment FMOD_Reverb3D_SetActive$address() {
        return FMOD_Reverb3D_SetActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetActive(FMOD_REVERB3D *reverb3d, FMOD_BOOL active)
     * }
     */
    public static int FMOD_Reverb3D_SetActive(MemorySegment reverb3d, int active) {
        var mh$ = FMOD_Reverb3D_SetActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Reverb3D_SetActive", reverb3d, active);
            }
            return (int)mh$.invokeExact(reverb3d, active);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Reverb3D_GetActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Reverb3D_GetActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetActive(FMOD_REVERB3D *reverb3d, FMOD_BOOL *active)
     * }
     */
    public static FunctionDescriptor FMOD_Reverb3D_GetActive$descriptor() {
        return FMOD_Reverb3D_GetActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetActive(FMOD_REVERB3D *reverb3d, FMOD_BOOL *active)
     * }
     */
    public static MethodHandle FMOD_Reverb3D_GetActive$handle() {
        return FMOD_Reverb3D_GetActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetActive(FMOD_REVERB3D *reverb3d, FMOD_BOOL *active)
     * }
     */
    public static MemorySegment FMOD_Reverb3D_GetActive$address() {
        return FMOD_Reverb3D_GetActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetActive(FMOD_REVERB3D *reverb3d, FMOD_BOOL *active)
     * }
     */
    public static int FMOD_Reverb3D_GetActive(MemorySegment reverb3d, MemorySegment active) {
        var mh$ = FMOD_Reverb3D_GetActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Reverb3D_GetActive", reverb3d, active);
            }
            return (int)mh$.invokeExact(reverb3d, active);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Reverb3D_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Reverb3D_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetUserData(FMOD_REVERB3D *reverb3d, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Reverb3D_SetUserData$descriptor() {
        return FMOD_Reverb3D_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetUserData(FMOD_REVERB3D *reverb3d, void *userdata)
     * }
     */
    public static MethodHandle FMOD_Reverb3D_SetUserData$handle() {
        return FMOD_Reverb3D_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetUserData(FMOD_REVERB3D *reverb3d, void *userdata)
     * }
     */
    public static MemorySegment FMOD_Reverb3D_SetUserData$address() {
        return FMOD_Reverb3D_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_SetUserData(FMOD_REVERB3D *reverb3d, void *userdata)
     * }
     */
    public static int FMOD_Reverb3D_SetUserData(MemorySegment reverb3d, MemorySegment userdata) {
        var mh$ = FMOD_Reverb3D_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Reverb3D_SetUserData", reverb3d, userdata);
            }
            return (int)mh$.invokeExact(reverb3d, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Reverb3D_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Reverb3D_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetUserData(FMOD_REVERB3D *reverb3d, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Reverb3D_GetUserData$descriptor() {
        return FMOD_Reverb3D_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetUserData(FMOD_REVERB3D *reverb3d, void **userdata)
     * }
     */
    public static MethodHandle FMOD_Reverb3D_GetUserData$handle() {
        return FMOD_Reverb3D_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetUserData(FMOD_REVERB3D *reverb3d, void **userdata)
     * }
     */
    public static MemorySegment FMOD_Reverb3D_GetUserData$address() {
        return FMOD_Reverb3D_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Reverb3D_GetUserData(FMOD_REVERB3D *reverb3d, void **userdata)
     * }
     */
    public static int FMOD_Reverb3D_GetUserData(MemorySegment reverb3d, MemorySegment userdata) {
        var mh$ = FMOD_Reverb3D_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Reverb3D_GetUserData", reverb3d, userdata);
            }
            return (int)mh$.invokeExact(reverb3d, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_STUDIO_INITFLAGS
     * }
     */
    public static final OfInt FMOD_STUDIO_INITFLAGS = fmod_studio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_STUDIO_PARAMETER_FLAGS
     * }
     */
    public static final OfInt FMOD_STUDIO_PARAMETER_FLAGS = fmod_studio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_STUDIO_SYSTEM_CALLBACK_TYPE
     * }
     */
    public static final OfInt FMOD_STUDIO_SYSTEM_CALLBACK_TYPE = fmod_studio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_STUDIO_EVENT_CALLBACK_TYPE
     * }
     */
    public static final OfInt FMOD_STUDIO_EVENT_CALLBACK_TYPE = fmod_studio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_STUDIO_LOAD_BANK_FLAGS
     * }
     */
    public static final OfInt FMOD_STUDIO_LOAD_BANK_FLAGS = fmod_studio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_STUDIO_COMMANDCAPTURE_FLAGS
     * }
     */
    public static final OfInt FMOD_STUDIO_COMMANDCAPTURE_FLAGS = fmod_studio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_STUDIO_COMMANDREPLAY_FLAGS
     * }
     */
    public static final OfInt FMOD_STUDIO_COMMANDREPLAY_FLAGS = fmod_studio_h.C_INT;
    private static final int FMOD_STUDIO_LOADING_STATE_UNLOADING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_LOADING_STATE.FMOD_STUDIO_LOADING_STATE_UNLOADING = 0
     * }
     */
    public static int FMOD_STUDIO_LOADING_STATE_UNLOADING() {
        return FMOD_STUDIO_LOADING_STATE_UNLOADING;
    }
    private static final int FMOD_STUDIO_LOADING_STATE_UNLOADED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_LOADING_STATE.FMOD_STUDIO_LOADING_STATE_UNLOADED = 1
     * }
     */
    public static int FMOD_STUDIO_LOADING_STATE_UNLOADED() {
        return FMOD_STUDIO_LOADING_STATE_UNLOADED;
    }
    private static final int FMOD_STUDIO_LOADING_STATE_LOADING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_LOADING_STATE.FMOD_STUDIO_LOADING_STATE_LOADING = 2
     * }
     */
    public static int FMOD_STUDIO_LOADING_STATE_LOADING() {
        return FMOD_STUDIO_LOADING_STATE_LOADING;
    }
    private static final int FMOD_STUDIO_LOADING_STATE_LOADED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_LOADING_STATE.FMOD_STUDIO_LOADING_STATE_LOADED = 3
     * }
     */
    public static int FMOD_STUDIO_LOADING_STATE_LOADED() {
        return FMOD_STUDIO_LOADING_STATE_LOADED;
    }
    private static final int FMOD_STUDIO_LOADING_STATE_ERROR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_LOADING_STATE.FMOD_STUDIO_LOADING_STATE_ERROR = 4
     * }
     */
    public static int FMOD_STUDIO_LOADING_STATE_ERROR() {
        return FMOD_STUDIO_LOADING_STATE_ERROR;
    }
    private static final int FMOD_STUDIO_LOADING_STATE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_LOADING_STATE.FMOD_STUDIO_LOADING_STATE_FORCEINT = 65536
     * }
     */
    public static int FMOD_STUDIO_LOADING_STATE_FORCEINT() {
        return FMOD_STUDIO_LOADING_STATE_FORCEINT;
    }
    private static final int FMOD_STUDIO_LOAD_MEMORY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_LOAD_MEMORY_MODE.FMOD_STUDIO_LOAD_MEMORY = 0
     * }
     */
    public static int FMOD_STUDIO_LOAD_MEMORY() {
        return FMOD_STUDIO_LOAD_MEMORY;
    }
    private static final int FMOD_STUDIO_LOAD_MEMORY_POINT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_LOAD_MEMORY_MODE.FMOD_STUDIO_LOAD_MEMORY_POINT = 1
     * }
     */
    public static int FMOD_STUDIO_LOAD_MEMORY_POINT() {
        return FMOD_STUDIO_LOAD_MEMORY_POINT;
    }
    private static final int FMOD_STUDIO_LOAD_MEMORY_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_LOAD_MEMORY_MODE.FMOD_STUDIO_LOAD_MEMORY_FORCEINT = 65536
     * }
     */
    public static int FMOD_STUDIO_LOAD_MEMORY_FORCEINT() {
        return FMOD_STUDIO_LOAD_MEMORY_FORCEINT;
    }
    private static final int FMOD_STUDIO_PARAMETER_GAME_CONTROLLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_GAME_CONTROLLED = 0
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_GAME_CONTROLLED() {
        return FMOD_STUDIO_PARAMETER_GAME_CONTROLLED;
    }
    private static final int FMOD_STUDIO_PARAMETER_AUTOMATIC_DISTANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_AUTOMATIC_DISTANCE = 1
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_AUTOMATIC_DISTANCE() {
        return FMOD_STUDIO_PARAMETER_AUTOMATIC_DISTANCE;
    }
    private static final int FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_CONE_ANGLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_CONE_ANGLE = 2
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_CONE_ANGLE() {
        return FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_CONE_ANGLE;
    }
    private static final int FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_ORIENTATION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_ORIENTATION = 3
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_ORIENTATION() {
        return FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_ORIENTATION;
    }
    private static final int FMOD_STUDIO_PARAMETER_AUTOMATIC_DIRECTION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_AUTOMATIC_DIRECTION = 4
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_AUTOMATIC_DIRECTION() {
        return FMOD_STUDIO_PARAMETER_AUTOMATIC_DIRECTION;
    }
    private static final int FMOD_STUDIO_PARAMETER_AUTOMATIC_ELEVATION = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_AUTOMATIC_ELEVATION = 5
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_AUTOMATIC_ELEVATION() {
        return FMOD_STUDIO_PARAMETER_AUTOMATIC_ELEVATION;
    }
    private static final int FMOD_STUDIO_PARAMETER_AUTOMATIC_LISTENER_ORIENTATION = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_AUTOMATIC_LISTENER_ORIENTATION = 6
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_AUTOMATIC_LISTENER_ORIENTATION() {
        return FMOD_STUDIO_PARAMETER_AUTOMATIC_LISTENER_ORIENTATION;
    }
    private static final int FMOD_STUDIO_PARAMETER_AUTOMATIC_SPEED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_AUTOMATIC_SPEED = 7
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_AUTOMATIC_SPEED() {
        return FMOD_STUDIO_PARAMETER_AUTOMATIC_SPEED;
    }
    private static final int FMOD_STUDIO_PARAMETER_AUTOMATIC_SPEED_ABSOLUTE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_AUTOMATIC_SPEED_ABSOLUTE = 8
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_AUTOMATIC_SPEED_ABSOLUTE() {
        return FMOD_STUDIO_PARAMETER_AUTOMATIC_SPEED_ABSOLUTE;
    }
    private static final int FMOD_STUDIO_PARAMETER_AUTOMATIC_DISTANCE_NORMALIZED = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_AUTOMATIC_DISTANCE_NORMALIZED = 9
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_AUTOMATIC_DISTANCE_NORMALIZED() {
        return FMOD_STUDIO_PARAMETER_AUTOMATIC_DISTANCE_NORMALIZED;
    }
    private static final int FMOD_STUDIO_PARAMETER_MAX = (int)10L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_MAX = 10
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_MAX() {
        return FMOD_STUDIO_PARAMETER_MAX;
    }
    private static final int FMOD_STUDIO_PARAMETER_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PARAMETER_TYPE.FMOD_STUDIO_PARAMETER_FORCEINT = 65536
     * }
     */
    public static int FMOD_STUDIO_PARAMETER_FORCEINT() {
        return FMOD_STUDIO_PARAMETER_FORCEINT;
    }
    private static final int FMOD_STUDIO_USER_PROPERTY_TYPE_INTEGER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_USER_PROPERTY_TYPE.FMOD_STUDIO_USER_PROPERTY_TYPE_INTEGER = 0
     * }
     */
    public static int FMOD_STUDIO_USER_PROPERTY_TYPE_INTEGER() {
        return FMOD_STUDIO_USER_PROPERTY_TYPE_INTEGER;
    }
    private static final int FMOD_STUDIO_USER_PROPERTY_TYPE_BOOLEAN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_USER_PROPERTY_TYPE.FMOD_STUDIO_USER_PROPERTY_TYPE_BOOLEAN = 1
     * }
     */
    public static int FMOD_STUDIO_USER_PROPERTY_TYPE_BOOLEAN() {
        return FMOD_STUDIO_USER_PROPERTY_TYPE_BOOLEAN;
    }
    private static final int FMOD_STUDIO_USER_PROPERTY_TYPE_FLOAT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_USER_PROPERTY_TYPE.FMOD_STUDIO_USER_PROPERTY_TYPE_FLOAT = 2
     * }
     */
    public static int FMOD_STUDIO_USER_PROPERTY_TYPE_FLOAT() {
        return FMOD_STUDIO_USER_PROPERTY_TYPE_FLOAT;
    }
    private static final int FMOD_STUDIO_USER_PROPERTY_TYPE_STRING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_USER_PROPERTY_TYPE.FMOD_STUDIO_USER_PROPERTY_TYPE_STRING = 3
     * }
     */
    public static int FMOD_STUDIO_USER_PROPERTY_TYPE_STRING() {
        return FMOD_STUDIO_USER_PROPERTY_TYPE_STRING;
    }
    private static final int FMOD_STUDIO_USER_PROPERTY_TYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_USER_PROPERTY_TYPE.FMOD_STUDIO_USER_PROPERTY_TYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_STUDIO_USER_PROPERTY_TYPE_FORCEINT() {
        return FMOD_STUDIO_USER_PROPERTY_TYPE_FORCEINT;
    }
    private static final int FMOD_STUDIO_EVENT_PROPERTY_CHANNELPRIORITY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_EVENT_PROPERTY.FMOD_STUDIO_EVENT_PROPERTY_CHANNELPRIORITY = 0
     * }
     */
    public static int FMOD_STUDIO_EVENT_PROPERTY_CHANNELPRIORITY() {
        return FMOD_STUDIO_EVENT_PROPERTY_CHANNELPRIORITY;
    }
    private static final int FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_DELAY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_EVENT_PROPERTY.FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_DELAY = 1
     * }
     */
    public static int FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_DELAY() {
        return FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_DELAY;
    }
    private static final int FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_LOOKAHEAD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_EVENT_PROPERTY.FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_LOOKAHEAD = 2
     * }
     */
    public static int FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_LOOKAHEAD() {
        return FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_LOOKAHEAD;
    }
    private static final int FMOD_STUDIO_EVENT_PROPERTY_MINIMUM_DISTANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_EVENT_PROPERTY.FMOD_STUDIO_EVENT_PROPERTY_MINIMUM_DISTANCE = 3
     * }
     */
    public static int FMOD_STUDIO_EVENT_PROPERTY_MINIMUM_DISTANCE() {
        return FMOD_STUDIO_EVENT_PROPERTY_MINIMUM_DISTANCE;
    }
    private static final int FMOD_STUDIO_EVENT_PROPERTY_MAXIMUM_DISTANCE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_EVENT_PROPERTY.FMOD_STUDIO_EVENT_PROPERTY_MAXIMUM_DISTANCE = 4
     * }
     */
    public static int FMOD_STUDIO_EVENT_PROPERTY_MAXIMUM_DISTANCE() {
        return FMOD_STUDIO_EVENT_PROPERTY_MAXIMUM_DISTANCE;
    }
    private static final int FMOD_STUDIO_EVENT_PROPERTY_COOLDOWN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_EVENT_PROPERTY.FMOD_STUDIO_EVENT_PROPERTY_COOLDOWN = 5
     * }
     */
    public static int FMOD_STUDIO_EVENT_PROPERTY_COOLDOWN() {
        return FMOD_STUDIO_EVENT_PROPERTY_COOLDOWN;
    }
    private static final int FMOD_STUDIO_EVENT_PROPERTY_MAX = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_EVENT_PROPERTY.FMOD_STUDIO_EVENT_PROPERTY_MAX = 6
     * }
     */
    public static int FMOD_STUDIO_EVENT_PROPERTY_MAX() {
        return FMOD_STUDIO_EVENT_PROPERTY_MAX;
    }
    private static final int FMOD_STUDIO_EVENT_PROPERTY_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_EVENT_PROPERTY.FMOD_STUDIO_EVENT_PROPERTY_FORCEINT = 65536
     * }
     */
    public static int FMOD_STUDIO_EVENT_PROPERTY_FORCEINT() {
        return FMOD_STUDIO_EVENT_PROPERTY_FORCEINT;
    }
    private static final int FMOD_STUDIO_PLAYBACK_PLAYING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PLAYBACK_STATE.FMOD_STUDIO_PLAYBACK_PLAYING = 0
     * }
     */
    public static int FMOD_STUDIO_PLAYBACK_PLAYING() {
        return FMOD_STUDIO_PLAYBACK_PLAYING;
    }
    private static final int FMOD_STUDIO_PLAYBACK_SUSTAINING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PLAYBACK_STATE.FMOD_STUDIO_PLAYBACK_SUSTAINING = 1
     * }
     */
    public static int FMOD_STUDIO_PLAYBACK_SUSTAINING() {
        return FMOD_STUDIO_PLAYBACK_SUSTAINING;
    }
    private static final int FMOD_STUDIO_PLAYBACK_STOPPED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PLAYBACK_STATE.FMOD_STUDIO_PLAYBACK_STOPPED = 2
     * }
     */
    public static int FMOD_STUDIO_PLAYBACK_STOPPED() {
        return FMOD_STUDIO_PLAYBACK_STOPPED;
    }
    private static final int FMOD_STUDIO_PLAYBACK_STARTING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PLAYBACK_STATE.FMOD_STUDIO_PLAYBACK_STARTING = 3
     * }
     */
    public static int FMOD_STUDIO_PLAYBACK_STARTING() {
        return FMOD_STUDIO_PLAYBACK_STARTING;
    }
    private static final int FMOD_STUDIO_PLAYBACK_STOPPING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PLAYBACK_STATE.FMOD_STUDIO_PLAYBACK_STOPPING = 4
     * }
     */
    public static int FMOD_STUDIO_PLAYBACK_STOPPING() {
        return FMOD_STUDIO_PLAYBACK_STOPPING;
    }
    private static final int FMOD_STUDIO_PLAYBACK_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_PLAYBACK_STATE.FMOD_STUDIO_PLAYBACK_FORCEINT = 65536
     * }
     */
    public static int FMOD_STUDIO_PLAYBACK_FORCEINT() {
        return FMOD_STUDIO_PLAYBACK_FORCEINT;
    }
    private static final int FMOD_STUDIO_STOP_ALLOWFADEOUT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_STOP_MODE.FMOD_STUDIO_STOP_ALLOWFADEOUT = 0
     * }
     */
    public static int FMOD_STUDIO_STOP_ALLOWFADEOUT() {
        return FMOD_STUDIO_STOP_ALLOWFADEOUT;
    }
    private static final int FMOD_STUDIO_STOP_IMMEDIATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_STOP_MODE.FMOD_STUDIO_STOP_IMMEDIATE = 1
     * }
     */
    public static int FMOD_STUDIO_STOP_IMMEDIATE() {
        return FMOD_STUDIO_STOP_IMMEDIATE;
    }
    private static final int FMOD_STUDIO_STOP_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_STOP_MODE.FMOD_STUDIO_STOP_FORCEINT = 65536
     * }
     */
    public static int FMOD_STUDIO_STOP_FORCEINT() {
        return FMOD_STUDIO_STOP_FORCEINT;
    }
    private static final int FMOD_STUDIO_INSTANCETYPE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_INSTANCETYPE.FMOD_STUDIO_INSTANCETYPE_NONE = 0
     * }
     */
    public static int FMOD_STUDIO_INSTANCETYPE_NONE() {
        return FMOD_STUDIO_INSTANCETYPE_NONE;
    }
    private static final int FMOD_STUDIO_INSTANCETYPE_SYSTEM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_INSTANCETYPE.FMOD_STUDIO_INSTANCETYPE_SYSTEM = 1
     * }
     */
    public static int FMOD_STUDIO_INSTANCETYPE_SYSTEM() {
        return FMOD_STUDIO_INSTANCETYPE_SYSTEM;
    }
    private static final int FMOD_STUDIO_INSTANCETYPE_EVENTDESCRIPTION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_INSTANCETYPE.FMOD_STUDIO_INSTANCETYPE_EVENTDESCRIPTION = 2
     * }
     */
    public static int FMOD_STUDIO_INSTANCETYPE_EVENTDESCRIPTION() {
        return FMOD_STUDIO_INSTANCETYPE_EVENTDESCRIPTION;
    }
    private static final int FMOD_STUDIO_INSTANCETYPE_EVENTINSTANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_INSTANCETYPE.FMOD_STUDIO_INSTANCETYPE_EVENTINSTANCE = 3
     * }
     */
    public static int FMOD_STUDIO_INSTANCETYPE_EVENTINSTANCE() {
        return FMOD_STUDIO_INSTANCETYPE_EVENTINSTANCE;
    }
    private static final int FMOD_STUDIO_INSTANCETYPE_PARAMETERINSTANCE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_INSTANCETYPE.FMOD_STUDIO_INSTANCETYPE_PARAMETERINSTANCE = 4
     * }
     */
    public static int FMOD_STUDIO_INSTANCETYPE_PARAMETERINSTANCE() {
        return FMOD_STUDIO_INSTANCETYPE_PARAMETERINSTANCE;
    }
    private static final int FMOD_STUDIO_INSTANCETYPE_BUS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_INSTANCETYPE.FMOD_STUDIO_INSTANCETYPE_BUS = 5
     * }
     */
    public static int FMOD_STUDIO_INSTANCETYPE_BUS() {
        return FMOD_STUDIO_INSTANCETYPE_BUS;
    }
    private static final int FMOD_STUDIO_INSTANCETYPE_VCA = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_INSTANCETYPE.FMOD_STUDIO_INSTANCETYPE_VCA = 6
     * }
     */
    public static int FMOD_STUDIO_INSTANCETYPE_VCA() {
        return FMOD_STUDIO_INSTANCETYPE_VCA;
    }
    private static final int FMOD_STUDIO_INSTANCETYPE_BANK = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_INSTANCETYPE.FMOD_STUDIO_INSTANCETYPE_BANK = 7
     * }
     */
    public static int FMOD_STUDIO_INSTANCETYPE_BANK() {
        return FMOD_STUDIO_INSTANCETYPE_BANK;
    }
    private static final int FMOD_STUDIO_INSTANCETYPE_COMMANDREPLAY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_INSTANCETYPE.FMOD_STUDIO_INSTANCETYPE_COMMANDREPLAY = 8
     * }
     */
    public static int FMOD_STUDIO_INSTANCETYPE_COMMANDREPLAY() {
        return FMOD_STUDIO_INSTANCETYPE_COMMANDREPLAY;
    }
    private static final int FMOD_STUDIO_INSTANCETYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_STUDIO_INSTANCETYPE.FMOD_STUDIO_INSTANCETYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_STUDIO_INSTANCETYPE_FORCEINT() {
        return FMOD_STUDIO_INSTANCETYPE_FORCEINT;
    }

    private static class FMOD_Studio_ParseID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_ParseID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_ParseID(const char *idstring, FMOD_GUID *id)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_ParseID$descriptor() {
        return FMOD_Studio_ParseID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_ParseID(const char *idstring, FMOD_GUID *id)
     * }
     */
    public static MethodHandle FMOD_Studio_ParseID$handle() {
        return FMOD_Studio_ParseID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_ParseID(const char *idstring, FMOD_GUID *id)
     * }
     */
    public static MemorySegment FMOD_Studio_ParseID$address() {
        return FMOD_Studio_ParseID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_ParseID(const char *idstring, FMOD_GUID *id)
     * }
     */
    public static int FMOD_Studio_ParseID(MemorySegment idstring, MemorySegment id) {
        var mh$ = FMOD_Studio_ParseID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_ParseID", idstring, id);
            }
            return (int)mh$.invokeExact(idstring, id);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Create(FMOD_STUDIO_SYSTEM **system, unsigned int headerversion)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_Create$descriptor() {
        return FMOD_Studio_System_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Create(FMOD_STUDIO_SYSTEM **system, unsigned int headerversion)
     * }
     */
    public static MethodHandle FMOD_Studio_System_Create$handle() {
        return FMOD_Studio_System_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Create(FMOD_STUDIO_SYSTEM **system, unsigned int headerversion)
     * }
     */
    public static MemorySegment FMOD_Studio_System_Create$address() {
        return FMOD_Studio_System_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Create(FMOD_STUDIO_SYSTEM **system, unsigned int headerversion)
     * }
     */
    public static int FMOD_Studio_System_Create(MemorySegment system, int headerversion) {
        var mh$ = FMOD_Studio_System_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_Create", system, headerversion);
            }
            return (int)mh$.invokeExact(system, headerversion);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_IsValid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_IsValid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_System_IsValid(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_IsValid$descriptor() {
        return FMOD_Studio_System_IsValid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_System_IsValid(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_Studio_System_IsValid$handle() {
        return FMOD_Studio_System_IsValid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_System_IsValid(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_Studio_System_IsValid$address() {
        return FMOD_Studio_System_IsValid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_System_IsValid(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static int FMOD_Studio_System_IsValid(MemorySegment system) {
        var mh$ = FMOD_Studio_System_IsValid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_IsValid", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_SetAdvancedSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_SetAdvancedSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetAdvancedSettings(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_ADVANCEDSETTINGS *settings)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_SetAdvancedSettings$descriptor() {
        return FMOD_Studio_System_SetAdvancedSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetAdvancedSettings(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_ADVANCEDSETTINGS *settings)
     * }
     */
    public static MethodHandle FMOD_Studio_System_SetAdvancedSettings$handle() {
        return FMOD_Studio_System_SetAdvancedSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetAdvancedSettings(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_ADVANCEDSETTINGS *settings)
     * }
     */
    public static MemorySegment FMOD_Studio_System_SetAdvancedSettings$address() {
        return FMOD_Studio_System_SetAdvancedSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetAdvancedSettings(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_ADVANCEDSETTINGS *settings)
     * }
     */
    public static int FMOD_Studio_System_SetAdvancedSettings(MemorySegment system, MemorySegment settings) {
        var mh$ = FMOD_Studio_System_SetAdvancedSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_SetAdvancedSettings", system, settings);
            }
            return (int)mh$.invokeExact(system, settings);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetAdvancedSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetAdvancedSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetAdvancedSettings(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_ADVANCEDSETTINGS *settings)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetAdvancedSettings$descriptor() {
        return FMOD_Studio_System_GetAdvancedSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetAdvancedSettings(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_ADVANCEDSETTINGS *settings)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetAdvancedSettings$handle() {
        return FMOD_Studio_System_GetAdvancedSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetAdvancedSettings(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_ADVANCEDSETTINGS *settings)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetAdvancedSettings$address() {
        return FMOD_Studio_System_GetAdvancedSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetAdvancedSettings(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_ADVANCEDSETTINGS *settings)
     * }
     */
    public static int FMOD_Studio_System_GetAdvancedSettings(MemorySegment system, MemorySegment settings) {
        var mh$ = FMOD_Studio_System_GetAdvancedSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetAdvancedSettings", system, settings);
            }
            return (int)mh$.invokeExact(system, settings);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_Initialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_Initialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Initialize(FMOD_STUDIO_SYSTEM *system, int maxchannels, FMOD_STUDIO_INITFLAGS studioflags, FMOD_INITFLAGS flags, void *extradriverdata)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_Initialize$descriptor() {
        return FMOD_Studio_System_Initialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Initialize(FMOD_STUDIO_SYSTEM *system, int maxchannels, FMOD_STUDIO_INITFLAGS studioflags, FMOD_INITFLAGS flags, void *extradriverdata)
     * }
     */
    public static MethodHandle FMOD_Studio_System_Initialize$handle() {
        return FMOD_Studio_System_Initialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Initialize(FMOD_STUDIO_SYSTEM *system, int maxchannels, FMOD_STUDIO_INITFLAGS studioflags, FMOD_INITFLAGS flags, void *extradriverdata)
     * }
     */
    public static MemorySegment FMOD_Studio_System_Initialize$address() {
        return FMOD_Studio_System_Initialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Initialize(FMOD_STUDIO_SYSTEM *system, int maxchannels, FMOD_STUDIO_INITFLAGS studioflags, FMOD_INITFLAGS flags, void *extradriverdata)
     * }
     */
    public static int FMOD_Studio_System_Initialize(MemorySegment system, int maxchannels, int studioflags, int flags, MemorySegment extradriverdata) {
        var mh$ = FMOD_Studio_System_Initialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_Initialize", system, maxchannels, studioflags, flags, extradriverdata);
            }
            return (int)mh$.invokeExact(system, maxchannels, studioflags, flags, extradriverdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Release(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_Release$descriptor() {
        return FMOD_Studio_System_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Release(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_Studio_System_Release$handle() {
        return FMOD_Studio_System_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Release(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_Studio_System_Release$address() {
        return FMOD_Studio_System_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Release(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static int FMOD_Studio_System_Release(MemorySegment system) {
        var mh$ = FMOD_Studio_System_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_Release", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_Update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_Update");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Update(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_Update$descriptor() {
        return FMOD_Studio_System_Update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Update(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_Studio_System_Update$handle() {
        return FMOD_Studio_System_Update.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Update(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_Studio_System_Update$address() {
        return FMOD_Studio_System_Update.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_Update(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static int FMOD_Studio_System_Update(MemorySegment system) {
        var mh$ = FMOD_Studio_System_Update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_Update", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetCoreSystem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetCoreSystem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetCoreSystem(FMOD_STUDIO_SYSTEM *system, FMOD_SYSTEM **coresystem)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetCoreSystem$descriptor() {
        return FMOD_Studio_System_GetCoreSystem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetCoreSystem(FMOD_STUDIO_SYSTEM *system, FMOD_SYSTEM **coresystem)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetCoreSystem$handle() {
        return FMOD_Studio_System_GetCoreSystem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetCoreSystem(FMOD_STUDIO_SYSTEM *system, FMOD_SYSTEM **coresystem)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetCoreSystem$address() {
        return FMOD_Studio_System_GetCoreSystem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetCoreSystem(FMOD_STUDIO_SYSTEM *system, FMOD_SYSTEM **coresystem)
     * }
     */
    public static int FMOD_Studio_System_GetCoreSystem(MemorySegment system, MemorySegment coresystem) {
        var mh$ = FMOD_Studio_System_GetCoreSystem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetCoreSystem", system, coresystem);
            }
            return (int)mh$.invokeExact(system, coresystem);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetEvent(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_EVENTDESCRIPTION **event)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetEvent$descriptor() {
        return FMOD_Studio_System_GetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetEvent(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_EVENTDESCRIPTION **event)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetEvent$handle() {
        return FMOD_Studio_System_GetEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetEvent(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_EVENTDESCRIPTION **event)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetEvent$address() {
        return FMOD_Studio_System_GetEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetEvent(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_EVENTDESCRIPTION **event)
     * }
     */
    public static int FMOD_Studio_System_GetEvent(MemorySegment system, MemorySegment pathOrID, MemorySegment event) {
        var mh$ = FMOD_Studio_System_GetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetEvent", system, pathOrID, event);
            }
            return (int)mh$.invokeExact(system, pathOrID, event);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetBus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetBus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBus(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_BUS **bus)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetBus$descriptor() {
        return FMOD_Studio_System_GetBus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBus(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_BUS **bus)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetBus$handle() {
        return FMOD_Studio_System_GetBus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBus(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_BUS **bus)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetBus$address() {
        return FMOD_Studio_System_GetBus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBus(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_BUS **bus)
     * }
     */
    public static int FMOD_Studio_System_GetBus(MemorySegment system, MemorySegment pathOrID, MemorySegment bus) {
        var mh$ = FMOD_Studio_System_GetBus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetBus", system, pathOrID, bus);
            }
            return (int)mh$.invokeExact(system, pathOrID, bus);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetVCA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetVCA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetVCA(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_VCA **vca)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetVCA$descriptor() {
        return FMOD_Studio_System_GetVCA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetVCA(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_VCA **vca)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetVCA$handle() {
        return FMOD_Studio_System_GetVCA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetVCA(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_VCA **vca)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetVCA$address() {
        return FMOD_Studio_System_GetVCA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetVCA(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_VCA **vca)
     * }
     */
    public static int FMOD_Studio_System_GetVCA(MemorySegment system, MemorySegment pathOrID, MemorySegment vca) {
        var mh$ = FMOD_Studio_System_GetVCA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetVCA", system, pathOrID, vca);
            }
            return (int)mh$.invokeExact(system, pathOrID, vca);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetBank {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetBank");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBank(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetBank$descriptor() {
        return FMOD_Studio_System_GetBank.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBank(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetBank$handle() {
        return FMOD_Studio_System_GetBank.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBank(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetBank$address() {
        return FMOD_Studio_System_GetBank.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBank(FMOD_STUDIO_SYSTEM *system, const char *pathOrID, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static int FMOD_Studio_System_GetBank(MemorySegment system, MemorySegment pathOrID, MemorySegment bank) {
        var mh$ = FMOD_Studio_System_GetBank.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetBank", system, pathOrID, bank);
            }
            return (int)mh$.invokeExact(system, pathOrID, bank);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetEventByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetEventByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetEventByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_EVENTDESCRIPTION **event)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetEventByID$descriptor() {
        return FMOD_Studio_System_GetEventByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetEventByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_EVENTDESCRIPTION **event)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetEventByID$handle() {
        return FMOD_Studio_System_GetEventByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetEventByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_EVENTDESCRIPTION **event)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetEventByID$address() {
        return FMOD_Studio_System_GetEventByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetEventByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_EVENTDESCRIPTION **event)
     * }
     */
    public static int FMOD_Studio_System_GetEventByID(MemorySegment system, MemorySegment id, MemorySegment event) {
        var mh$ = FMOD_Studio_System_GetEventByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetEventByID", system, id, event);
            }
            return (int)mh$.invokeExact(system, id, event);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetBusByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetBusByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBusByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_BUS **bus)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetBusByID$descriptor() {
        return FMOD_Studio_System_GetBusByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBusByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_BUS **bus)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetBusByID$handle() {
        return FMOD_Studio_System_GetBusByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBusByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_BUS **bus)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetBusByID$address() {
        return FMOD_Studio_System_GetBusByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBusByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_BUS **bus)
     * }
     */
    public static int FMOD_Studio_System_GetBusByID(MemorySegment system, MemorySegment id, MemorySegment bus) {
        var mh$ = FMOD_Studio_System_GetBusByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetBusByID", system, id, bus);
            }
            return (int)mh$.invokeExact(system, id, bus);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetVCAByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetVCAByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetVCAByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_VCA **vca)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetVCAByID$descriptor() {
        return FMOD_Studio_System_GetVCAByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetVCAByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_VCA **vca)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetVCAByID$handle() {
        return FMOD_Studio_System_GetVCAByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetVCAByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_VCA **vca)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetVCAByID$address() {
        return FMOD_Studio_System_GetVCAByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetVCAByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_VCA **vca)
     * }
     */
    public static int FMOD_Studio_System_GetVCAByID(MemorySegment system, MemorySegment id, MemorySegment vca) {
        var mh$ = FMOD_Studio_System_GetVCAByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetVCAByID", system, id, vca);
            }
            return (int)mh$.invokeExact(system, id, vca);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetBankByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetBankByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetBankByID$descriptor() {
        return FMOD_Studio_System_GetBankByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetBankByID$handle() {
        return FMOD_Studio_System_GetBankByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetBankByID$address() {
        return FMOD_Studio_System_GetBankByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankByID(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static int FMOD_Studio_System_GetBankByID(MemorySegment system, MemorySegment id, MemorySegment bank) {
        var mh$ = FMOD_Studio_System_GetBankByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetBankByID", system, id, bank);
            }
            return (int)mh$.invokeExact(system, id, bank);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetSoundInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetSoundInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetSoundInfo(FMOD_STUDIO_SYSTEM *system, const char *key, FMOD_STUDIO_SOUND_INFO *info)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetSoundInfo$descriptor() {
        return FMOD_Studio_System_GetSoundInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetSoundInfo(FMOD_STUDIO_SYSTEM *system, const char *key, FMOD_STUDIO_SOUND_INFO *info)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetSoundInfo$handle() {
        return FMOD_Studio_System_GetSoundInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetSoundInfo(FMOD_STUDIO_SYSTEM *system, const char *key, FMOD_STUDIO_SOUND_INFO *info)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetSoundInfo$address() {
        return FMOD_Studio_System_GetSoundInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetSoundInfo(FMOD_STUDIO_SYSTEM *system, const char *key, FMOD_STUDIO_SOUND_INFO *info)
     * }
     */
    public static int FMOD_Studio_System_GetSoundInfo(MemorySegment system, MemorySegment key, MemorySegment info) {
        var mh$ = FMOD_Studio_System_GetSoundInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetSoundInfo", system, key, info);
            }
            return (int)mh$.invokeExact(system, key, info);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetParameterDescriptionByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetParameterDescriptionByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionByName(FMOD_STUDIO_SYSTEM *system, const char *name, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetParameterDescriptionByName$descriptor() {
        return FMOD_Studio_System_GetParameterDescriptionByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionByName(FMOD_STUDIO_SYSTEM *system, const char *name, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetParameterDescriptionByName$handle() {
        return FMOD_Studio_System_GetParameterDescriptionByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionByName(FMOD_STUDIO_SYSTEM *system, const char *name, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetParameterDescriptionByName$address() {
        return FMOD_Studio_System_GetParameterDescriptionByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionByName(FMOD_STUDIO_SYSTEM *system, const char *name, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static int FMOD_Studio_System_GetParameterDescriptionByName(MemorySegment system, MemorySegment name, MemorySegment parameter) {
        var mh$ = FMOD_Studio_System_GetParameterDescriptionByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetParameterDescriptionByName", system, name, parameter);
            }
            return (int)mh$.invokeExact(system, name, parameter);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetParameterDescriptionByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            FMOD_STUDIO_PARAMETER_ID.layout(),
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetParameterDescriptionByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetParameterDescriptionByID$descriptor() {
        return FMOD_Studio_System_GetParameterDescriptionByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetParameterDescriptionByID$handle() {
        return FMOD_Studio_System_GetParameterDescriptionByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetParameterDescriptionByID$address() {
        return FMOD_Studio_System_GetParameterDescriptionByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static int FMOD_Studio_System_GetParameterDescriptionByID(MemorySegment system, MemorySegment id, MemorySegment parameter) {
        var mh$ = FMOD_Studio_System_GetParameterDescriptionByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetParameterDescriptionByID", system, id, parameter);
            }
            return (int)mh$.invokeExact(system, id, parameter);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetParameterLabelByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetParameterLabelByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterLabelByName(FMOD_STUDIO_SYSTEM *system, const char *name, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetParameterLabelByName$descriptor() {
        return FMOD_Studio_System_GetParameterLabelByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterLabelByName(FMOD_STUDIO_SYSTEM *system, const char *name, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetParameterLabelByName$handle() {
        return FMOD_Studio_System_GetParameterLabelByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterLabelByName(FMOD_STUDIO_SYSTEM *system, const char *name, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetParameterLabelByName$address() {
        return FMOD_Studio_System_GetParameterLabelByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterLabelByName(FMOD_STUDIO_SYSTEM *system, const char *name, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static int FMOD_Studio_System_GetParameterLabelByName(MemorySegment system, MemorySegment name, int labelindex, MemorySegment label, int size, MemorySegment retrieved) {
        var mh$ = FMOD_Studio_System_GetParameterLabelByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetParameterLabelByName", system, name, labelindex, label, size, retrieved);
            }
            return (int)mh$.invokeExact(system, name, labelindex, label, size, retrieved);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetParameterLabelByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            FMOD_STUDIO_PARAMETER_ID.layout(),
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetParameterLabelByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterLabelByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetParameterLabelByID$descriptor() {
        return FMOD_Studio_System_GetParameterLabelByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterLabelByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetParameterLabelByID$handle() {
        return FMOD_Studio_System_GetParameterLabelByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterLabelByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetParameterLabelByID$address() {
        return FMOD_Studio_System_GetParameterLabelByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterLabelByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static int FMOD_Studio_System_GetParameterLabelByID(MemorySegment system, MemorySegment id, int labelindex, MemorySegment label, int size, MemorySegment retrieved) {
        var mh$ = FMOD_Studio_System_GetParameterLabelByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetParameterLabelByID", system, id, labelindex, label, size, retrieved);
            }
            return (int)mh$.invokeExact(system, id, labelindex, label, size, retrieved);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetParameterByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            FMOD_STUDIO_PARAMETER_ID.layout(),
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetParameterByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, float *value, float *finalvalue)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetParameterByID$descriptor() {
        return FMOD_Studio_System_GetParameterByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, float *value, float *finalvalue)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetParameterByID$handle() {
        return FMOD_Studio_System_GetParameterByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, float *value, float *finalvalue)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetParameterByID$address() {
        return FMOD_Studio_System_GetParameterByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, float *value, float *finalvalue)
     * }
     */
    public static int FMOD_Studio_System_GetParameterByID(MemorySegment system, MemorySegment id, MemorySegment value, MemorySegment finalvalue) {
        var mh$ = FMOD_Studio_System_GetParameterByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetParameterByID", system, id, value, finalvalue);
            }
            return (int)mh$.invokeExact(system, id, value, finalvalue);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_SetParameterByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            FMOD_STUDIO_PARAMETER_ID.layout(),
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_SetParameterByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_SetParameterByID$descriptor() {
        return FMOD_Studio_System_SetParameterByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MethodHandle FMOD_Studio_System_SetParameterByID$handle() {
        return FMOD_Studio_System_SetParameterByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MemorySegment FMOD_Studio_System_SetParameterByID$address() {
        return FMOD_Studio_System_SetParameterByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByID(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static int FMOD_Studio_System_SetParameterByID(MemorySegment system, MemorySegment id, float value, int ignoreseekspeed) {
        var mh$ = FMOD_Studio_System_SetParameterByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_SetParameterByID", system, id, value, ignoreseekspeed);
            }
            return (int)mh$.invokeExact(system, id, value, ignoreseekspeed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_SetParameterByIDWithLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            FMOD_STUDIO_PARAMETER_ID.layout(),
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_SetParameterByIDWithLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByIDWithLabel(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_SetParameterByIDWithLabel$descriptor() {
        return FMOD_Studio_System_SetParameterByIDWithLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByIDWithLabel(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MethodHandle FMOD_Studio_System_SetParameterByIDWithLabel$handle() {
        return FMOD_Studio_System_SetParameterByIDWithLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByIDWithLabel(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MemorySegment FMOD_Studio_System_SetParameterByIDWithLabel$address() {
        return FMOD_Studio_System_SetParameterByIDWithLabel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByIDWithLabel(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_ID id, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static int FMOD_Studio_System_SetParameterByIDWithLabel(MemorySegment system, MemorySegment id, MemorySegment label, int ignoreseekspeed) {
        var mh$ = FMOD_Studio_System_SetParameterByIDWithLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_SetParameterByIDWithLabel", system, id, label, ignoreseekspeed);
            }
            return (int)mh$.invokeExact(system, id, label, ignoreseekspeed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_SetParametersByIDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_SetParametersByIDs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParametersByIDs(FMOD_STUDIO_SYSTEM *system, const FMOD_STUDIO_PARAMETER_ID *ids, float *values, int count, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_SetParametersByIDs$descriptor() {
        return FMOD_Studio_System_SetParametersByIDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParametersByIDs(FMOD_STUDIO_SYSTEM *system, const FMOD_STUDIO_PARAMETER_ID *ids, float *values, int count, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MethodHandle FMOD_Studio_System_SetParametersByIDs$handle() {
        return FMOD_Studio_System_SetParametersByIDs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParametersByIDs(FMOD_STUDIO_SYSTEM *system, const FMOD_STUDIO_PARAMETER_ID *ids, float *values, int count, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MemorySegment FMOD_Studio_System_SetParametersByIDs$address() {
        return FMOD_Studio_System_SetParametersByIDs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParametersByIDs(FMOD_STUDIO_SYSTEM *system, const FMOD_STUDIO_PARAMETER_ID *ids, float *values, int count, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static int FMOD_Studio_System_SetParametersByIDs(MemorySegment system, MemorySegment ids, MemorySegment values, int count, int ignoreseekspeed) {
        var mh$ = FMOD_Studio_System_SetParametersByIDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_SetParametersByIDs", system, ids, values, count, ignoreseekspeed);
            }
            return (int)mh$.invokeExact(system, ids, values, count, ignoreseekspeed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetParameterByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetParameterByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterByName(FMOD_STUDIO_SYSTEM *system, const char *name, float *value, float *finalvalue)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetParameterByName$descriptor() {
        return FMOD_Studio_System_GetParameterByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterByName(FMOD_STUDIO_SYSTEM *system, const char *name, float *value, float *finalvalue)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetParameterByName$handle() {
        return FMOD_Studio_System_GetParameterByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterByName(FMOD_STUDIO_SYSTEM *system, const char *name, float *value, float *finalvalue)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetParameterByName$address() {
        return FMOD_Studio_System_GetParameterByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterByName(FMOD_STUDIO_SYSTEM *system, const char *name, float *value, float *finalvalue)
     * }
     */
    public static int FMOD_Studio_System_GetParameterByName(MemorySegment system, MemorySegment name, MemorySegment value, MemorySegment finalvalue) {
        var mh$ = FMOD_Studio_System_GetParameterByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetParameterByName", system, name, value, finalvalue);
            }
            return (int)mh$.invokeExact(system, name, value, finalvalue);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_SetParameterByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_SetParameterByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByName(FMOD_STUDIO_SYSTEM *system, const char *name, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_SetParameterByName$descriptor() {
        return FMOD_Studio_System_SetParameterByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByName(FMOD_STUDIO_SYSTEM *system, const char *name, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MethodHandle FMOD_Studio_System_SetParameterByName$handle() {
        return FMOD_Studio_System_SetParameterByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByName(FMOD_STUDIO_SYSTEM *system, const char *name, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MemorySegment FMOD_Studio_System_SetParameterByName$address() {
        return FMOD_Studio_System_SetParameterByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByName(FMOD_STUDIO_SYSTEM *system, const char *name, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static int FMOD_Studio_System_SetParameterByName(MemorySegment system, MemorySegment name, float value, int ignoreseekspeed) {
        var mh$ = FMOD_Studio_System_SetParameterByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_SetParameterByName", system, name, value, ignoreseekspeed);
            }
            return (int)mh$.invokeExact(system, name, value, ignoreseekspeed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_SetParameterByNameWithLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_SetParameterByNameWithLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByNameWithLabel(FMOD_STUDIO_SYSTEM *system, const char *name, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_SetParameterByNameWithLabel$descriptor() {
        return FMOD_Studio_System_SetParameterByNameWithLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByNameWithLabel(FMOD_STUDIO_SYSTEM *system, const char *name, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MethodHandle FMOD_Studio_System_SetParameterByNameWithLabel$handle() {
        return FMOD_Studio_System_SetParameterByNameWithLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByNameWithLabel(FMOD_STUDIO_SYSTEM *system, const char *name, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MemorySegment FMOD_Studio_System_SetParameterByNameWithLabel$address() {
        return FMOD_Studio_System_SetParameterByNameWithLabel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetParameterByNameWithLabel(FMOD_STUDIO_SYSTEM *system, const char *name, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static int FMOD_Studio_System_SetParameterByNameWithLabel(MemorySegment system, MemorySegment name, MemorySegment label, int ignoreseekspeed) {
        var mh$ = FMOD_Studio_System_SetParameterByNameWithLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_SetParameterByNameWithLabel", system, name, label, ignoreseekspeed);
            }
            return (int)mh$.invokeExact(system, name, label, ignoreseekspeed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_LookupID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_LookupID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LookupID(FMOD_STUDIO_SYSTEM *system, const char *path, FMOD_GUID *id)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_LookupID$descriptor() {
        return FMOD_Studio_System_LookupID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LookupID(FMOD_STUDIO_SYSTEM *system, const char *path, FMOD_GUID *id)
     * }
     */
    public static MethodHandle FMOD_Studio_System_LookupID$handle() {
        return FMOD_Studio_System_LookupID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LookupID(FMOD_STUDIO_SYSTEM *system, const char *path, FMOD_GUID *id)
     * }
     */
    public static MemorySegment FMOD_Studio_System_LookupID$address() {
        return FMOD_Studio_System_LookupID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LookupID(FMOD_STUDIO_SYSTEM *system, const char *path, FMOD_GUID *id)
     * }
     */
    public static int FMOD_Studio_System_LookupID(MemorySegment system, MemorySegment path, MemorySegment id) {
        var mh$ = FMOD_Studio_System_LookupID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_LookupID", system, path, id);
            }
            return (int)mh$.invokeExact(system, path, id);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_LookupPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_LookupPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LookupPath(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, char *path, int size, int *retrieved)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_LookupPath$descriptor() {
        return FMOD_Studio_System_LookupPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LookupPath(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, char *path, int size, int *retrieved)
     * }
     */
    public static MethodHandle FMOD_Studio_System_LookupPath$handle() {
        return FMOD_Studio_System_LookupPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LookupPath(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, char *path, int size, int *retrieved)
     * }
     */
    public static MemorySegment FMOD_Studio_System_LookupPath$address() {
        return FMOD_Studio_System_LookupPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LookupPath(FMOD_STUDIO_SYSTEM *system, const FMOD_GUID *id, char *path, int size, int *retrieved)
     * }
     */
    public static int FMOD_Studio_System_LookupPath(MemorySegment system, MemorySegment id, MemorySegment path, int size, MemorySegment retrieved) {
        var mh$ = FMOD_Studio_System_LookupPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_LookupPath", system, id, path, size, retrieved);
            }
            return (int)mh$.invokeExact(system, id, path, size, retrieved);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetNumListeners {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetNumListeners");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetNumListeners(FMOD_STUDIO_SYSTEM *system, int *numlisteners)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetNumListeners$descriptor() {
        return FMOD_Studio_System_GetNumListeners.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetNumListeners(FMOD_STUDIO_SYSTEM *system, int *numlisteners)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetNumListeners$handle() {
        return FMOD_Studio_System_GetNumListeners.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetNumListeners(FMOD_STUDIO_SYSTEM *system, int *numlisteners)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetNumListeners$address() {
        return FMOD_Studio_System_GetNumListeners.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetNumListeners(FMOD_STUDIO_SYSTEM *system, int *numlisteners)
     * }
     */
    public static int FMOD_Studio_System_GetNumListeners(MemorySegment system, MemorySegment numlisteners) {
        var mh$ = FMOD_Studio_System_GetNumListeners.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetNumListeners", system, numlisteners);
            }
            return (int)mh$.invokeExact(system, numlisteners);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_SetNumListeners {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_SetNumListeners");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetNumListeners(FMOD_STUDIO_SYSTEM *system, int numlisteners)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_SetNumListeners$descriptor() {
        return FMOD_Studio_System_SetNumListeners.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetNumListeners(FMOD_STUDIO_SYSTEM *system, int numlisteners)
     * }
     */
    public static MethodHandle FMOD_Studio_System_SetNumListeners$handle() {
        return FMOD_Studio_System_SetNumListeners.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetNumListeners(FMOD_STUDIO_SYSTEM *system, int numlisteners)
     * }
     */
    public static MemorySegment FMOD_Studio_System_SetNumListeners$address() {
        return FMOD_Studio_System_SetNumListeners.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetNumListeners(FMOD_STUDIO_SYSTEM *system, int numlisteners)
     * }
     */
    public static int FMOD_Studio_System_SetNumListeners(MemorySegment system, int numlisteners) {
        var mh$ = FMOD_Studio_System_SetNumListeners.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_SetNumListeners", system, numlisteners);
            }
            return (int)mh$.invokeExact(system, numlisteners);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetListenerAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetListenerAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetListenerAttributes(FMOD_STUDIO_SYSTEM *system, int index, FMOD_3D_ATTRIBUTES *attributes, FMOD_VECTOR *attenuationposition)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetListenerAttributes$descriptor() {
        return FMOD_Studio_System_GetListenerAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetListenerAttributes(FMOD_STUDIO_SYSTEM *system, int index, FMOD_3D_ATTRIBUTES *attributes, FMOD_VECTOR *attenuationposition)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetListenerAttributes$handle() {
        return FMOD_Studio_System_GetListenerAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetListenerAttributes(FMOD_STUDIO_SYSTEM *system, int index, FMOD_3D_ATTRIBUTES *attributes, FMOD_VECTOR *attenuationposition)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetListenerAttributes$address() {
        return FMOD_Studio_System_GetListenerAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetListenerAttributes(FMOD_STUDIO_SYSTEM *system, int index, FMOD_3D_ATTRIBUTES *attributes, FMOD_VECTOR *attenuationposition)
     * }
     */
    public static int FMOD_Studio_System_GetListenerAttributes(MemorySegment system, int index, MemorySegment attributes, MemorySegment attenuationposition) {
        var mh$ = FMOD_Studio_System_GetListenerAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetListenerAttributes", system, index, attributes, attenuationposition);
            }
            return (int)mh$.invokeExact(system, index, attributes, attenuationposition);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_SetListenerAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_SetListenerAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetListenerAttributes(FMOD_STUDIO_SYSTEM *system, int index, const FMOD_3D_ATTRIBUTES *attributes, const FMOD_VECTOR *attenuationposition)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_SetListenerAttributes$descriptor() {
        return FMOD_Studio_System_SetListenerAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetListenerAttributes(FMOD_STUDIO_SYSTEM *system, int index, const FMOD_3D_ATTRIBUTES *attributes, const FMOD_VECTOR *attenuationposition)
     * }
     */
    public static MethodHandle FMOD_Studio_System_SetListenerAttributes$handle() {
        return FMOD_Studio_System_SetListenerAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetListenerAttributes(FMOD_STUDIO_SYSTEM *system, int index, const FMOD_3D_ATTRIBUTES *attributes, const FMOD_VECTOR *attenuationposition)
     * }
     */
    public static MemorySegment FMOD_Studio_System_SetListenerAttributes$address() {
        return FMOD_Studio_System_SetListenerAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetListenerAttributes(FMOD_STUDIO_SYSTEM *system, int index, const FMOD_3D_ATTRIBUTES *attributes, const FMOD_VECTOR *attenuationposition)
     * }
     */
    public static int FMOD_Studio_System_SetListenerAttributes(MemorySegment system, int index, MemorySegment attributes, MemorySegment attenuationposition) {
        var mh$ = FMOD_Studio_System_SetListenerAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_SetListenerAttributes", system, index, attributes, attenuationposition);
            }
            return (int)mh$.invokeExact(system, index, attributes, attenuationposition);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetListenerWeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetListenerWeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetListenerWeight(FMOD_STUDIO_SYSTEM *system, int index, float *weight)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetListenerWeight$descriptor() {
        return FMOD_Studio_System_GetListenerWeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetListenerWeight(FMOD_STUDIO_SYSTEM *system, int index, float *weight)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetListenerWeight$handle() {
        return FMOD_Studio_System_GetListenerWeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetListenerWeight(FMOD_STUDIO_SYSTEM *system, int index, float *weight)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetListenerWeight$address() {
        return FMOD_Studio_System_GetListenerWeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetListenerWeight(FMOD_STUDIO_SYSTEM *system, int index, float *weight)
     * }
     */
    public static int FMOD_Studio_System_GetListenerWeight(MemorySegment system, int index, MemorySegment weight) {
        var mh$ = FMOD_Studio_System_GetListenerWeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetListenerWeight", system, index, weight);
            }
            return (int)mh$.invokeExact(system, index, weight);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_SetListenerWeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_SetListenerWeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetListenerWeight(FMOD_STUDIO_SYSTEM *system, int index, float weight)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_SetListenerWeight$descriptor() {
        return FMOD_Studio_System_SetListenerWeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetListenerWeight(FMOD_STUDIO_SYSTEM *system, int index, float weight)
     * }
     */
    public static MethodHandle FMOD_Studio_System_SetListenerWeight$handle() {
        return FMOD_Studio_System_SetListenerWeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetListenerWeight(FMOD_STUDIO_SYSTEM *system, int index, float weight)
     * }
     */
    public static MemorySegment FMOD_Studio_System_SetListenerWeight$address() {
        return FMOD_Studio_System_SetListenerWeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetListenerWeight(FMOD_STUDIO_SYSTEM *system, int index, float weight)
     * }
     */
    public static int FMOD_Studio_System_SetListenerWeight(MemorySegment system, int index, float weight) {
        var mh$ = FMOD_Studio_System_SetListenerWeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_SetListenerWeight", system, index, weight);
            }
            return (int)mh$.invokeExact(system, index, weight);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_LoadBankFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_LoadBankFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankFile(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_LoadBankFile$descriptor() {
        return FMOD_Studio_System_LoadBankFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankFile(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static MethodHandle FMOD_Studio_System_LoadBankFile$handle() {
        return FMOD_Studio_System_LoadBankFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankFile(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static MemorySegment FMOD_Studio_System_LoadBankFile$address() {
        return FMOD_Studio_System_LoadBankFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankFile(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static int FMOD_Studio_System_LoadBankFile(MemorySegment system, MemorySegment filename, int flags, MemorySegment bank) {
        var mh$ = FMOD_Studio_System_LoadBankFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_LoadBankFile", system, filename, flags, bank);
            }
            return (int)mh$.invokeExact(system, filename, flags, bank);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_LoadBankMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_LoadBankMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankMemory(FMOD_STUDIO_SYSTEM *system, const char *buffer, int length, FMOD_STUDIO_LOAD_MEMORY_MODE mode, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_LoadBankMemory$descriptor() {
        return FMOD_Studio_System_LoadBankMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankMemory(FMOD_STUDIO_SYSTEM *system, const char *buffer, int length, FMOD_STUDIO_LOAD_MEMORY_MODE mode, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static MethodHandle FMOD_Studio_System_LoadBankMemory$handle() {
        return FMOD_Studio_System_LoadBankMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankMemory(FMOD_STUDIO_SYSTEM *system, const char *buffer, int length, FMOD_STUDIO_LOAD_MEMORY_MODE mode, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static MemorySegment FMOD_Studio_System_LoadBankMemory$address() {
        return FMOD_Studio_System_LoadBankMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankMemory(FMOD_STUDIO_SYSTEM *system, const char *buffer, int length, FMOD_STUDIO_LOAD_MEMORY_MODE mode, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static int FMOD_Studio_System_LoadBankMemory(MemorySegment system, MemorySegment buffer, int length, int mode, int flags, MemorySegment bank) {
        var mh$ = FMOD_Studio_System_LoadBankMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_LoadBankMemory", system, buffer, length, mode, flags, bank);
            }
            return (int)mh$.invokeExact(system, buffer, length, mode, flags, bank);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_LoadBankCustom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_LoadBankCustom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankCustom(FMOD_STUDIO_SYSTEM *system, const FMOD_STUDIO_BANK_INFO *info, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_LoadBankCustom$descriptor() {
        return FMOD_Studio_System_LoadBankCustom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankCustom(FMOD_STUDIO_SYSTEM *system, const FMOD_STUDIO_BANK_INFO *info, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static MethodHandle FMOD_Studio_System_LoadBankCustom$handle() {
        return FMOD_Studio_System_LoadBankCustom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankCustom(FMOD_STUDIO_SYSTEM *system, const FMOD_STUDIO_BANK_INFO *info, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static MemorySegment FMOD_Studio_System_LoadBankCustom$address() {
        return FMOD_Studio_System_LoadBankCustom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadBankCustom(FMOD_STUDIO_SYSTEM *system, const FMOD_STUDIO_BANK_INFO *info, FMOD_STUDIO_LOAD_BANK_FLAGS flags, FMOD_STUDIO_BANK **bank)
     * }
     */
    public static int FMOD_Studio_System_LoadBankCustom(MemorySegment system, MemorySegment info, int flags, MemorySegment bank) {
        var mh$ = FMOD_Studio_System_LoadBankCustom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_LoadBankCustom", system, info, flags, bank);
            }
            return (int)mh$.invokeExact(system, info, flags, bank);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_RegisterPlugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_RegisterPlugin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_RegisterPlugin(FMOD_STUDIO_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_RegisterPlugin$descriptor() {
        return FMOD_Studio_System_RegisterPlugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_RegisterPlugin(FMOD_STUDIO_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description)
     * }
     */
    public static MethodHandle FMOD_Studio_System_RegisterPlugin$handle() {
        return FMOD_Studio_System_RegisterPlugin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_RegisterPlugin(FMOD_STUDIO_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description)
     * }
     */
    public static MemorySegment FMOD_Studio_System_RegisterPlugin$address() {
        return FMOD_Studio_System_RegisterPlugin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_RegisterPlugin(FMOD_STUDIO_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description)
     * }
     */
    public static int FMOD_Studio_System_RegisterPlugin(MemorySegment system, MemorySegment description) {
        var mh$ = FMOD_Studio_System_RegisterPlugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_RegisterPlugin", system, description);
            }
            return (int)mh$.invokeExact(system, description);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_UnregisterPlugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_UnregisterPlugin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_UnregisterPlugin(FMOD_STUDIO_SYSTEM *system, const char *name)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_UnregisterPlugin$descriptor() {
        return FMOD_Studio_System_UnregisterPlugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_UnregisterPlugin(FMOD_STUDIO_SYSTEM *system, const char *name)
     * }
     */
    public static MethodHandle FMOD_Studio_System_UnregisterPlugin$handle() {
        return FMOD_Studio_System_UnregisterPlugin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_UnregisterPlugin(FMOD_STUDIO_SYSTEM *system, const char *name)
     * }
     */
    public static MemorySegment FMOD_Studio_System_UnregisterPlugin$address() {
        return FMOD_Studio_System_UnregisterPlugin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_UnregisterPlugin(FMOD_STUDIO_SYSTEM *system, const char *name)
     * }
     */
    public static int FMOD_Studio_System_UnregisterPlugin(MemorySegment system, MemorySegment name) {
        var mh$ = FMOD_Studio_System_UnregisterPlugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_UnregisterPlugin", system, name);
            }
            return (int)mh$.invokeExact(system, name);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_UnloadAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_UnloadAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_UnloadAll(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_UnloadAll$descriptor() {
        return FMOD_Studio_System_UnloadAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_UnloadAll(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_Studio_System_UnloadAll$handle() {
        return FMOD_Studio_System_UnloadAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_UnloadAll(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_Studio_System_UnloadAll$address() {
        return FMOD_Studio_System_UnloadAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_UnloadAll(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static int FMOD_Studio_System_UnloadAll(MemorySegment system) {
        var mh$ = FMOD_Studio_System_UnloadAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_UnloadAll", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_FlushCommands {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_FlushCommands");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_FlushCommands(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_FlushCommands$descriptor() {
        return FMOD_Studio_System_FlushCommands.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_FlushCommands(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_Studio_System_FlushCommands$handle() {
        return FMOD_Studio_System_FlushCommands.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_FlushCommands(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_Studio_System_FlushCommands$address() {
        return FMOD_Studio_System_FlushCommands.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_FlushCommands(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static int FMOD_Studio_System_FlushCommands(MemorySegment system) {
        var mh$ = FMOD_Studio_System_FlushCommands.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_FlushCommands", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_FlushSampleLoading {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_FlushSampleLoading");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_FlushSampleLoading(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_FlushSampleLoading$descriptor() {
        return FMOD_Studio_System_FlushSampleLoading.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_FlushSampleLoading(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_Studio_System_FlushSampleLoading$handle() {
        return FMOD_Studio_System_FlushSampleLoading.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_FlushSampleLoading(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_Studio_System_FlushSampleLoading$address() {
        return FMOD_Studio_System_FlushSampleLoading.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_FlushSampleLoading(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static int FMOD_Studio_System_FlushSampleLoading(MemorySegment system) {
        var mh$ = FMOD_Studio_System_FlushSampleLoading.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_FlushSampleLoading", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_StartCommandCapture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_StartCommandCapture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_StartCommandCapture(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_COMMANDCAPTURE_FLAGS flags)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_StartCommandCapture$descriptor() {
        return FMOD_Studio_System_StartCommandCapture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_StartCommandCapture(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_COMMANDCAPTURE_FLAGS flags)
     * }
     */
    public static MethodHandle FMOD_Studio_System_StartCommandCapture$handle() {
        return FMOD_Studio_System_StartCommandCapture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_StartCommandCapture(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_COMMANDCAPTURE_FLAGS flags)
     * }
     */
    public static MemorySegment FMOD_Studio_System_StartCommandCapture$address() {
        return FMOD_Studio_System_StartCommandCapture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_StartCommandCapture(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_COMMANDCAPTURE_FLAGS flags)
     * }
     */
    public static int FMOD_Studio_System_StartCommandCapture(MemorySegment system, MemorySegment filename, int flags) {
        var mh$ = FMOD_Studio_System_StartCommandCapture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_StartCommandCapture", system, filename, flags);
            }
            return (int)mh$.invokeExact(system, filename, flags);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_StopCommandCapture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_StopCommandCapture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_StopCommandCapture(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_StopCommandCapture$descriptor() {
        return FMOD_Studio_System_StopCommandCapture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_StopCommandCapture(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_Studio_System_StopCommandCapture$handle() {
        return FMOD_Studio_System_StopCommandCapture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_StopCommandCapture(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_Studio_System_StopCommandCapture$address() {
        return FMOD_Studio_System_StopCommandCapture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_StopCommandCapture(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static int FMOD_Studio_System_StopCommandCapture(MemorySegment system) {
        var mh$ = FMOD_Studio_System_StopCommandCapture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_StopCommandCapture", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_LoadCommandReplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_LoadCommandReplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadCommandReplay(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_COMMANDREPLAY_FLAGS flags, FMOD_STUDIO_COMMANDREPLAY **replay)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_LoadCommandReplay$descriptor() {
        return FMOD_Studio_System_LoadCommandReplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadCommandReplay(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_COMMANDREPLAY_FLAGS flags, FMOD_STUDIO_COMMANDREPLAY **replay)
     * }
     */
    public static MethodHandle FMOD_Studio_System_LoadCommandReplay$handle() {
        return FMOD_Studio_System_LoadCommandReplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadCommandReplay(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_COMMANDREPLAY_FLAGS flags, FMOD_STUDIO_COMMANDREPLAY **replay)
     * }
     */
    public static MemorySegment FMOD_Studio_System_LoadCommandReplay$address() {
        return FMOD_Studio_System_LoadCommandReplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_LoadCommandReplay(FMOD_STUDIO_SYSTEM *system, const char *filename, FMOD_STUDIO_COMMANDREPLAY_FLAGS flags, FMOD_STUDIO_COMMANDREPLAY **replay)
     * }
     */
    public static int FMOD_Studio_System_LoadCommandReplay(MemorySegment system, MemorySegment filename, int flags, MemorySegment replay) {
        var mh$ = FMOD_Studio_System_LoadCommandReplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_LoadCommandReplay", system, filename, flags, replay);
            }
            return (int)mh$.invokeExact(system, filename, flags, replay);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetBankCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetBankCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankCount(FMOD_STUDIO_SYSTEM *system, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetBankCount$descriptor() {
        return FMOD_Studio_System_GetBankCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankCount(FMOD_STUDIO_SYSTEM *system, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetBankCount$handle() {
        return FMOD_Studio_System_GetBankCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankCount(FMOD_STUDIO_SYSTEM *system, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetBankCount$address() {
        return FMOD_Studio_System_GetBankCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankCount(FMOD_STUDIO_SYSTEM *system, int *count)
     * }
     */
    public static int FMOD_Studio_System_GetBankCount(MemorySegment system, MemorySegment count) {
        var mh$ = FMOD_Studio_System_GetBankCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetBankCount", system, count);
            }
            return (int)mh$.invokeExact(system, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetBankList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetBankList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankList(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_BANK **array, int capacity, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetBankList$descriptor() {
        return FMOD_Studio_System_GetBankList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankList(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_BANK **array, int capacity, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetBankList$handle() {
        return FMOD_Studio_System_GetBankList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankList(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_BANK **array, int capacity, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetBankList$address() {
        return FMOD_Studio_System_GetBankList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBankList(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_BANK **array, int capacity, int *count)
     * }
     */
    public static int FMOD_Studio_System_GetBankList(MemorySegment system, MemorySegment array, int capacity, MemorySegment count) {
        var mh$ = FMOD_Studio_System_GetBankList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetBankList", system, array, capacity, count);
            }
            return (int)mh$.invokeExact(system, array, capacity, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetParameterDescriptionCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetParameterDescriptionCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionCount(FMOD_STUDIO_SYSTEM *system, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetParameterDescriptionCount$descriptor() {
        return FMOD_Studio_System_GetParameterDescriptionCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionCount(FMOD_STUDIO_SYSTEM *system, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetParameterDescriptionCount$handle() {
        return FMOD_Studio_System_GetParameterDescriptionCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionCount(FMOD_STUDIO_SYSTEM *system, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetParameterDescriptionCount$address() {
        return FMOD_Studio_System_GetParameterDescriptionCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionCount(FMOD_STUDIO_SYSTEM *system, int *count)
     * }
     */
    public static int FMOD_Studio_System_GetParameterDescriptionCount(MemorySegment system, MemorySegment count) {
        var mh$ = FMOD_Studio_System_GetParameterDescriptionCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetParameterDescriptionCount", system, count);
            }
            return (int)mh$.invokeExact(system, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetParameterDescriptionList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetParameterDescriptionList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionList(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_DESCRIPTION *array, int capacity, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetParameterDescriptionList$descriptor() {
        return FMOD_Studio_System_GetParameterDescriptionList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionList(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_DESCRIPTION *array, int capacity, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetParameterDescriptionList$handle() {
        return FMOD_Studio_System_GetParameterDescriptionList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionList(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_DESCRIPTION *array, int capacity, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetParameterDescriptionList$address() {
        return FMOD_Studio_System_GetParameterDescriptionList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetParameterDescriptionList(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_PARAMETER_DESCRIPTION *array, int capacity, int *count)
     * }
     */
    public static int FMOD_Studio_System_GetParameterDescriptionList(MemorySegment system, MemorySegment array, int capacity, MemorySegment count) {
        var mh$ = FMOD_Studio_System_GetParameterDescriptionList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetParameterDescriptionList", system, array, capacity, count);
            }
            return (int)mh$.invokeExact(system, array, capacity, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetCPUUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetCPUUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetCPUUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_CPU_USAGE *usage, FMOD_CPU_USAGE *usage_core)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetCPUUsage$descriptor() {
        return FMOD_Studio_System_GetCPUUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetCPUUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_CPU_USAGE *usage, FMOD_CPU_USAGE *usage_core)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetCPUUsage$handle() {
        return FMOD_Studio_System_GetCPUUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetCPUUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_CPU_USAGE *usage, FMOD_CPU_USAGE *usage_core)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetCPUUsage$address() {
        return FMOD_Studio_System_GetCPUUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetCPUUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_CPU_USAGE *usage, FMOD_CPU_USAGE *usage_core)
     * }
     */
    public static int FMOD_Studio_System_GetCPUUsage(MemorySegment system, MemorySegment usage, MemorySegment usage_core) {
        var mh$ = FMOD_Studio_System_GetCPUUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetCPUUsage", system, usage, usage_core);
            }
            return (int)mh$.invokeExact(system, usage, usage_core);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetBufferUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetBufferUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBufferUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_BUFFER_USAGE *usage)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetBufferUsage$descriptor() {
        return FMOD_Studio_System_GetBufferUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBufferUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_BUFFER_USAGE *usage)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetBufferUsage$handle() {
        return FMOD_Studio_System_GetBufferUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBufferUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_BUFFER_USAGE *usage)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetBufferUsage$address() {
        return FMOD_Studio_System_GetBufferUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetBufferUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_BUFFER_USAGE *usage)
     * }
     */
    public static int FMOD_Studio_System_GetBufferUsage(MemorySegment system, MemorySegment usage) {
        var mh$ = FMOD_Studio_System_GetBufferUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetBufferUsage", system, usage);
            }
            return (int)mh$.invokeExact(system, usage);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_ResetBufferUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_ResetBufferUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_ResetBufferUsage(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_ResetBufferUsage$descriptor() {
        return FMOD_Studio_System_ResetBufferUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_ResetBufferUsage(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_Studio_System_ResetBufferUsage$handle() {
        return FMOD_Studio_System_ResetBufferUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_ResetBufferUsage(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_Studio_System_ResetBufferUsage$address() {
        return FMOD_Studio_System_ResetBufferUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_ResetBufferUsage(FMOD_STUDIO_SYSTEM *system)
     * }
     */
    public static int FMOD_Studio_System_ResetBufferUsage(MemorySegment system) {
        var mh$ = FMOD_Studio_System_ResetBufferUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_ResetBufferUsage", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_SetCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_SetCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetCallback(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_SYSTEM_CALLBACK callback, FMOD_STUDIO_SYSTEM_CALLBACK_TYPE callbackmask)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_SetCallback$descriptor() {
        return FMOD_Studio_System_SetCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetCallback(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_SYSTEM_CALLBACK callback, FMOD_STUDIO_SYSTEM_CALLBACK_TYPE callbackmask)
     * }
     */
    public static MethodHandle FMOD_Studio_System_SetCallback$handle() {
        return FMOD_Studio_System_SetCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetCallback(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_SYSTEM_CALLBACK callback, FMOD_STUDIO_SYSTEM_CALLBACK_TYPE callbackmask)
     * }
     */
    public static MemorySegment FMOD_Studio_System_SetCallback$address() {
        return FMOD_Studio_System_SetCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetCallback(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_SYSTEM_CALLBACK callback, FMOD_STUDIO_SYSTEM_CALLBACK_TYPE callbackmask)
     * }
     */
    public static int FMOD_Studio_System_SetCallback(MemorySegment system, MemorySegment callback, int callbackmask) {
        var mh$ = FMOD_Studio_System_SetCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_SetCallback", system, callback, callbackmask);
            }
            return (int)mh$.invokeExact(system, callback, callbackmask);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetUserData(FMOD_STUDIO_SYSTEM *system, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_SetUserData$descriptor() {
        return FMOD_Studio_System_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetUserData(FMOD_STUDIO_SYSTEM *system, void *userdata)
     * }
     */
    public static MethodHandle FMOD_Studio_System_SetUserData$handle() {
        return FMOD_Studio_System_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetUserData(FMOD_STUDIO_SYSTEM *system, void *userdata)
     * }
     */
    public static MemorySegment FMOD_Studio_System_SetUserData$address() {
        return FMOD_Studio_System_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_SetUserData(FMOD_STUDIO_SYSTEM *system, void *userdata)
     * }
     */
    public static int FMOD_Studio_System_SetUserData(MemorySegment system, MemorySegment userdata) {
        var mh$ = FMOD_Studio_System_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_SetUserData", system, userdata);
            }
            return (int)mh$.invokeExact(system, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetUserData(FMOD_STUDIO_SYSTEM *system, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetUserData$descriptor() {
        return FMOD_Studio_System_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetUserData(FMOD_STUDIO_SYSTEM *system, void **userdata)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetUserData$handle() {
        return FMOD_Studio_System_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetUserData(FMOD_STUDIO_SYSTEM *system, void **userdata)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetUserData$address() {
        return FMOD_Studio_System_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetUserData(FMOD_STUDIO_SYSTEM *system, void **userdata)
     * }
     */
    public static int FMOD_Studio_System_GetUserData(MemorySegment system, MemorySegment userdata) {
        var mh$ = FMOD_Studio_System_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetUserData", system, userdata);
            }
            return (int)mh$.invokeExact(system, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_System_GetMemoryUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_System_GetMemoryUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetMemoryUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_System_GetMemoryUsage$descriptor() {
        return FMOD_Studio_System_GetMemoryUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetMemoryUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static MethodHandle FMOD_Studio_System_GetMemoryUsage$handle() {
        return FMOD_Studio_System_GetMemoryUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetMemoryUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static MemorySegment FMOD_Studio_System_GetMemoryUsage$address() {
        return FMOD_Studio_System_GetMemoryUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_System_GetMemoryUsage(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static int FMOD_Studio_System_GetMemoryUsage(MemorySegment system, MemorySegment memoryusage) {
        var mh$ = FMOD_Studio_System_GetMemoryUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_System_GetMemoryUsage", system, memoryusage);
            }
            return (int)mh$.invokeExact(system, memoryusage);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_IsValid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_IsValid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_EventDescription_IsValid(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_IsValid$descriptor() {
        return FMOD_Studio_EventDescription_IsValid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_EventDescription_IsValid(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_IsValid$handle() {
        return FMOD_Studio_EventDescription_IsValid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_EventDescription_IsValid(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_IsValid$address() {
        return FMOD_Studio_EventDescription_IsValid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_EventDescription_IsValid(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static int FMOD_Studio_EventDescription_IsValid(MemorySegment eventdescription) {
        var mh$ = FMOD_Studio_EventDescription_IsValid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_IsValid", eventdescription);
            }
            return (int)mh$.invokeExact(eventdescription);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_GUID *id)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetID$descriptor() {
        return FMOD_Studio_EventDescription_GetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_GUID *id)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetID$handle() {
        return FMOD_Studio_EventDescription_GetID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_GUID *id)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetID$address() {
        return FMOD_Studio_EventDescription_GetID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_GUID *id)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetID(MemorySegment eventdescription, MemorySegment id) {
        var mh$ = FMOD_Studio_EventDescription_GetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetID", eventdescription, id);
            }
            return (int)mh$.invokeExact(eventdescription, id);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetPath(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, char *path, int size, int *retrieved)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetPath$descriptor() {
        return FMOD_Studio_EventDescription_GetPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetPath(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, char *path, int size, int *retrieved)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetPath$handle() {
        return FMOD_Studio_EventDescription_GetPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetPath(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, char *path, int size, int *retrieved)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetPath$address() {
        return FMOD_Studio_EventDescription_GetPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetPath(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, char *path, int size, int *retrieved)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetPath(MemorySegment eventdescription, MemorySegment path, int size, MemorySegment retrieved) {
        var mh$ = FMOD_Studio_EventDescription_GetPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetPath", eventdescription, path, size, retrieved);
            }
            return (int)mh$.invokeExact(eventdescription, path, size, retrieved);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetParameterDescriptionCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetParameterDescriptionCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetParameterDescriptionCount$descriptor() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetParameterDescriptionCount$handle() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetParameterDescriptionCount$address() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetParameterDescriptionCount(MemorySegment eventdescription, MemorySegment count) {
        var mh$ = FMOD_Studio_EventDescription_GetParameterDescriptionCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetParameterDescriptionCount", eventdescription, count);
            }
            return (int)mh$.invokeExact(eventdescription, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetParameterDescriptionByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetParameterDescriptionByIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetParameterDescriptionByIndex$descriptor() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetParameterDescriptionByIndex$handle() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionByIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetParameterDescriptionByIndex$address() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionByIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetParameterDescriptionByIndex(MemorySegment eventdescription, int index, MemorySegment parameter) {
        var mh$ = FMOD_Studio_EventDescription_GetParameterDescriptionByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetParameterDescriptionByIndex", eventdescription, index, parameter);
            }
            return (int)mh$.invokeExact(eventdescription, index, parameter);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetParameterDescriptionByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetParameterDescriptionByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByName(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetParameterDescriptionByName$descriptor() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByName(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetParameterDescriptionByName$handle() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByName(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetParameterDescriptionByName$address() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByName(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetParameterDescriptionByName(MemorySegment eventdescription, MemorySegment name, MemorySegment parameter) {
        var mh$ = FMOD_Studio_EventDescription_GetParameterDescriptionByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetParameterDescriptionByName", eventdescription, name, parameter);
            }
            return (int)mh$.invokeExact(eventdescription, name, parameter);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetParameterDescriptionByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            FMOD_STUDIO_PARAMETER_ID.layout(),
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetParameterDescriptionByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_PARAMETER_ID id, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetParameterDescriptionByID$descriptor() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_PARAMETER_ID id, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetParameterDescriptionByID$handle() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_PARAMETER_ID id, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetParameterDescriptionByID$address() {
        return FMOD_Studio_EventDescription_GetParameterDescriptionByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterDescriptionByID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_PARAMETER_ID id, FMOD_STUDIO_PARAMETER_DESCRIPTION *parameter)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetParameterDescriptionByID(MemorySegment eventdescription, MemorySegment id, MemorySegment parameter) {
        var mh$ = FMOD_Studio_EventDescription_GetParameterDescriptionByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetParameterDescriptionByID", eventdescription, id, parameter);
            }
            return (int)mh$.invokeExact(eventdescription, id, parameter);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetParameterLabelByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetParameterLabelByIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetParameterLabelByIndex$descriptor() {
        return FMOD_Studio_EventDescription_GetParameterLabelByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetParameterLabelByIndex$handle() {
        return FMOD_Studio_EventDescription_GetParameterLabelByIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetParameterLabelByIndex$address() {
        return FMOD_Studio_EventDescription_GetParameterLabelByIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetParameterLabelByIndex(MemorySegment eventdescription, int index, int labelindex, MemorySegment label, int size, MemorySegment retrieved) {
        var mh$ = FMOD_Studio_EventDescription_GetParameterLabelByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetParameterLabelByIndex", eventdescription, index, labelindex, label, size, retrieved);
            }
            return (int)mh$.invokeExact(eventdescription, index, labelindex, label, size, retrieved);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetParameterLabelByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetParameterLabelByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByName(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetParameterLabelByName$descriptor() {
        return FMOD_Studio_EventDescription_GetParameterLabelByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByName(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetParameterLabelByName$handle() {
        return FMOD_Studio_EventDescription_GetParameterLabelByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByName(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetParameterLabelByName$address() {
        return FMOD_Studio_EventDescription_GetParameterLabelByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByName(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetParameterLabelByName(MemorySegment eventdescription, MemorySegment name, int labelindex, MemorySegment label, int size, MemorySegment retrieved) {
        var mh$ = FMOD_Studio_EventDescription_GetParameterLabelByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetParameterLabelByName", eventdescription, name, labelindex, label, size, retrieved);
            }
            return (int)mh$.invokeExact(eventdescription, name, labelindex, label, size, retrieved);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetParameterLabelByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            FMOD_STUDIO_PARAMETER_ID.layout(),
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetParameterLabelByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_PARAMETER_ID id, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetParameterLabelByID$descriptor() {
        return FMOD_Studio_EventDescription_GetParameterLabelByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_PARAMETER_ID id, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetParameterLabelByID$handle() {
        return FMOD_Studio_EventDescription_GetParameterLabelByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_PARAMETER_ID id, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetParameterLabelByID$address() {
        return FMOD_Studio_EventDescription_GetParameterLabelByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetParameterLabelByID(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_PARAMETER_ID id, int labelindex, char *label, int size, int *retrieved)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetParameterLabelByID(MemorySegment eventdescription, MemorySegment id, int labelindex, MemorySegment label, int size, MemorySegment retrieved) {
        var mh$ = FMOD_Studio_EventDescription_GetParameterLabelByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetParameterLabelByID", eventdescription, id, labelindex, label, size, retrieved);
            }
            return (int)mh$.invokeExact(eventdescription, id, labelindex, label, size, retrieved);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetUserPropertyCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetUserPropertyCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserPropertyCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetUserPropertyCount$descriptor() {
        return FMOD_Studio_EventDescription_GetUserPropertyCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserPropertyCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetUserPropertyCount$handle() {
        return FMOD_Studio_EventDescription_GetUserPropertyCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserPropertyCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetUserPropertyCount$address() {
        return FMOD_Studio_EventDescription_GetUserPropertyCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserPropertyCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetUserPropertyCount(MemorySegment eventdescription, MemorySegment count) {
        var mh$ = FMOD_Studio_EventDescription_GetUserPropertyCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetUserPropertyCount", eventdescription, count);
            }
            return (int)mh$.invokeExact(eventdescription, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetUserPropertyByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetUserPropertyByIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserPropertyByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, FMOD_STUDIO_USER_PROPERTY *property)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetUserPropertyByIndex$descriptor() {
        return FMOD_Studio_EventDescription_GetUserPropertyByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserPropertyByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, FMOD_STUDIO_USER_PROPERTY *property)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetUserPropertyByIndex$handle() {
        return FMOD_Studio_EventDescription_GetUserPropertyByIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserPropertyByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, FMOD_STUDIO_USER_PROPERTY *property)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetUserPropertyByIndex$address() {
        return FMOD_Studio_EventDescription_GetUserPropertyByIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserPropertyByIndex(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int index, FMOD_STUDIO_USER_PROPERTY *property)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetUserPropertyByIndex(MemorySegment eventdescription, int index, MemorySegment property) {
        var mh$ = FMOD_Studio_EventDescription_GetUserPropertyByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetUserPropertyByIndex", eventdescription, index, property);
            }
            return (int)mh$.invokeExact(eventdescription, index, property);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetUserProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetUserProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserProperty(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, FMOD_STUDIO_USER_PROPERTY *property)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetUserProperty$descriptor() {
        return FMOD_Studio_EventDescription_GetUserProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserProperty(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, FMOD_STUDIO_USER_PROPERTY *property)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetUserProperty$handle() {
        return FMOD_Studio_EventDescription_GetUserProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserProperty(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, FMOD_STUDIO_USER_PROPERTY *property)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetUserProperty$address() {
        return FMOD_Studio_EventDescription_GetUserProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserProperty(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, const char *name, FMOD_STUDIO_USER_PROPERTY *property)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetUserProperty(MemorySegment eventdescription, MemorySegment name, MemorySegment property) {
        var mh$ = FMOD_Studio_EventDescription_GetUserProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetUserProperty", eventdescription, name, property);
            }
            return (int)mh$.invokeExact(eventdescription, name, property);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetLength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetLength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetLength(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *length)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetLength$descriptor() {
        return FMOD_Studio_EventDescription_GetLength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetLength(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *length)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetLength$handle() {
        return FMOD_Studio_EventDescription_GetLength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetLength(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *length)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetLength$address() {
        return FMOD_Studio_EventDescription_GetLength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetLength(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *length)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetLength(MemorySegment eventdescription, MemorySegment length) {
        var mh$ = FMOD_Studio_EventDescription_GetLength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetLength", eventdescription, length);
            }
            return (int)mh$.invokeExact(eventdescription, length);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetMinMaxDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetMinMaxDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetMinMaxDistance(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, float *min, float *max)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetMinMaxDistance$descriptor() {
        return FMOD_Studio_EventDescription_GetMinMaxDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetMinMaxDistance(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, float *min, float *max)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetMinMaxDistance$handle() {
        return FMOD_Studio_EventDescription_GetMinMaxDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetMinMaxDistance(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, float *min, float *max)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetMinMaxDistance$address() {
        return FMOD_Studio_EventDescription_GetMinMaxDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetMinMaxDistance(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, float *min, float *max)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetMinMaxDistance(MemorySegment eventdescription, MemorySegment min, MemorySegment max) {
        var mh$ = FMOD_Studio_EventDescription_GetMinMaxDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetMinMaxDistance", eventdescription, min, max);
            }
            return (int)mh$.invokeExact(eventdescription, min, max);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetSoundSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetSoundSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetSoundSize(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, float *size)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetSoundSize$descriptor() {
        return FMOD_Studio_EventDescription_GetSoundSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetSoundSize(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, float *size)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetSoundSize$handle() {
        return FMOD_Studio_EventDescription_GetSoundSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetSoundSize(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, float *size)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetSoundSize$address() {
        return FMOD_Studio_EventDescription_GetSoundSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetSoundSize(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, float *size)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetSoundSize(MemorySegment eventdescription, MemorySegment size) {
        var mh$ = FMOD_Studio_EventDescription_GetSoundSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetSoundSize", eventdescription, size);
            }
            return (int)mh$.invokeExact(eventdescription, size);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_IsSnapshot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_IsSnapshot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsSnapshot(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *snapshot)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_IsSnapshot$descriptor() {
        return FMOD_Studio_EventDescription_IsSnapshot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsSnapshot(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *snapshot)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_IsSnapshot$handle() {
        return FMOD_Studio_EventDescription_IsSnapshot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsSnapshot(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *snapshot)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_IsSnapshot$address() {
        return FMOD_Studio_EventDescription_IsSnapshot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsSnapshot(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *snapshot)
     * }
     */
    public static int FMOD_Studio_EventDescription_IsSnapshot(MemorySegment eventdescription, MemorySegment snapshot) {
        var mh$ = FMOD_Studio_EventDescription_IsSnapshot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_IsSnapshot", eventdescription, snapshot);
            }
            return (int)mh$.invokeExact(eventdescription, snapshot);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_IsOneshot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_IsOneshot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsOneshot(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *oneshot)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_IsOneshot$descriptor() {
        return FMOD_Studio_EventDescription_IsOneshot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsOneshot(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *oneshot)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_IsOneshot$handle() {
        return FMOD_Studio_EventDescription_IsOneshot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsOneshot(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *oneshot)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_IsOneshot$address() {
        return FMOD_Studio_EventDescription_IsOneshot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsOneshot(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *oneshot)
     * }
     */
    public static int FMOD_Studio_EventDescription_IsOneshot(MemorySegment eventdescription, MemorySegment oneshot) {
        var mh$ = FMOD_Studio_EventDescription_IsOneshot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_IsOneshot", eventdescription, oneshot);
            }
            return (int)mh$.invokeExact(eventdescription, oneshot);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_IsStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_IsStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsStream(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *isStream)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_IsStream$descriptor() {
        return FMOD_Studio_EventDescription_IsStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsStream(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *isStream)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_IsStream$handle() {
        return FMOD_Studio_EventDescription_IsStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsStream(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *isStream)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_IsStream$address() {
        return FMOD_Studio_EventDescription_IsStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsStream(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *isStream)
     * }
     */
    public static int FMOD_Studio_EventDescription_IsStream(MemorySegment eventdescription, MemorySegment isStream) {
        var mh$ = FMOD_Studio_EventDescription_IsStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_IsStream", eventdescription, isStream);
            }
            return (int)mh$.invokeExact(eventdescription, isStream);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_Is3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_Is3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_Is3D(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *is3D)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_Is3D$descriptor() {
        return FMOD_Studio_EventDescription_Is3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_Is3D(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *is3D)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_Is3D$handle() {
        return FMOD_Studio_EventDescription_Is3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_Is3D(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *is3D)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_Is3D$address() {
        return FMOD_Studio_EventDescription_Is3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_Is3D(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *is3D)
     * }
     */
    public static int FMOD_Studio_EventDescription_Is3D(MemorySegment eventdescription, MemorySegment is3D) {
        var mh$ = FMOD_Studio_EventDescription_Is3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_Is3D", eventdescription, is3D);
            }
            return (int)mh$.invokeExact(eventdescription, is3D);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_IsDopplerEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_IsDopplerEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsDopplerEnabled(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *doppler)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_IsDopplerEnabled$descriptor() {
        return FMOD_Studio_EventDescription_IsDopplerEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsDopplerEnabled(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *doppler)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_IsDopplerEnabled$handle() {
        return FMOD_Studio_EventDescription_IsDopplerEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsDopplerEnabled(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *doppler)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_IsDopplerEnabled$address() {
        return FMOD_Studio_EventDescription_IsDopplerEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_IsDopplerEnabled(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *doppler)
     * }
     */
    public static int FMOD_Studio_EventDescription_IsDopplerEnabled(MemorySegment eventdescription, MemorySegment doppler) {
        var mh$ = FMOD_Studio_EventDescription_IsDopplerEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_IsDopplerEnabled", eventdescription, doppler);
            }
            return (int)mh$.invokeExact(eventdescription, doppler);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_HasSustainPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_HasSustainPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_HasSustainPoint(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *sustainPoint)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_HasSustainPoint$descriptor() {
        return FMOD_Studio_EventDescription_HasSustainPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_HasSustainPoint(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *sustainPoint)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_HasSustainPoint$handle() {
        return FMOD_Studio_EventDescription_HasSustainPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_HasSustainPoint(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *sustainPoint)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_HasSustainPoint$address() {
        return FMOD_Studio_EventDescription_HasSustainPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_HasSustainPoint(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_BOOL *sustainPoint)
     * }
     */
    public static int FMOD_Studio_EventDescription_HasSustainPoint(MemorySegment eventdescription, MemorySegment sustainPoint) {
        var mh$ = FMOD_Studio_EventDescription_HasSustainPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_HasSustainPoint", eventdescription, sustainPoint);
            }
            return (int)mh$.invokeExact(eventdescription, sustainPoint);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_CreateInstance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_CreateInstance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_CreateInstance(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENTINSTANCE **instance)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_CreateInstance$descriptor() {
        return FMOD_Studio_EventDescription_CreateInstance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_CreateInstance(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENTINSTANCE **instance)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_CreateInstance$handle() {
        return FMOD_Studio_EventDescription_CreateInstance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_CreateInstance(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENTINSTANCE **instance)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_CreateInstance$address() {
        return FMOD_Studio_EventDescription_CreateInstance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_CreateInstance(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENTINSTANCE **instance)
     * }
     */
    public static int FMOD_Studio_EventDescription_CreateInstance(MemorySegment eventdescription, MemorySegment instance) {
        var mh$ = FMOD_Studio_EventDescription_CreateInstance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_CreateInstance", eventdescription, instance);
            }
            return (int)mh$.invokeExact(eventdescription, instance);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetInstanceCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetInstanceCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetInstanceCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetInstanceCount$descriptor() {
        return FMOD_Studio_EventDescription_GetInstanceCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetInstanceCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetInstanceCount$handle() {
        return FMOD_Studio_EventDescription_GetInstanceCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetInstanceCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetInstanceCount$address() {
        return FMOD_Studio_EventDescription_GetInstanceCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetInstanceCount(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, int *count)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetInstanceCount(MemorySegment eventdescription, MemorySegment count) {
        var mh$ = FMOD_Studio_EventDescription_GetInstanceCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetInstanceCount", eventdescription, count);
            }
            return (int)mh$.invokeExact(eventdescription, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetInstanceList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetInstanceList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetInstanceList(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENTINSTANCE **array, int capacity, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetInstanceList$descriptor() {
        return FMOD_Studio_EventDescription_GetInstanceList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetInstanceList(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENTINSTANCE **array, int capacity, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetInstanceList$handle() {
        return FMOD_Studio_EventDescription_GetInstanceList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetInstanceList(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENTINSTANCE **array, int capacity, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetInstanceList$address() {
        return FMOD_Studio_EventDescription_GetInstanceList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetInstanceList(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENTINSTANCE **array, int capacity, int *count)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetInstanceList(MemorySegment eventdescription, MemorySegment array, int capacity, MemorySegment count) {
        var mh$ = FMOD_Studio_EventDescription_GetInstanceList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetInstanceList", eventdescription, array, capacity, count);
            }
            return (int)mh$.invokeExact(eventdescription, array, capacity, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_LoadSampleData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_LoadSampleData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_LoadSampleData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_LoadSampleData$descriptor() {
        return FMOD_Studio_EventDescription_LoadSampleData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_LoadSampleData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_LoadSampleData$handle() {
        return FMOD_Studio_EventDescription_LoadSampleData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_LoadSampleData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_LoadSampleData$address() {
        return FMOD_Studio_EventDescription_LoadSampleData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_LoadSampleData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static int FMOD_Studio_EventDescription_LoadSampleData(MemorySegment eventdescription) {
        var mh$ = FMOD_Studio_EventDescription_LoadSampleData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_LoadSampleData", eventdescription);
            }
            return (int)mh$.invokeExact(eventdescription);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_UnloadSampleData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_UnloadSampleData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_UnloadSampleData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_UnloadSampleData$descriptor() {
        return FMOD_Studio_EventDescription_UnloadSampleData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_UnloadSampleData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_UnloadSampleData$handle() {
        return FMOD_Studio_EventDescription_UnloadSampleData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_UnloadSampleData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_UnloadSampleData$address() {
        return FMOD_Studio_EventDescription_UnloadSampleData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_UnloadSampleData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static int FMOD_Studio_EventDescription_UnloadSampleData(MemorySegment eventdescription) {
        var mh$ = FMOD_Studio_EventDescription_UnloadSampleData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_UnloadSampleData", eventdescription);
            }
            return (int)mh$.invokeExact(eventdescription);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetSampleLoadingState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetSampleLoadingState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetSampleLoadingState(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetSampleLoadingState$descriptor() {
        return FMOD_Studio_EventDescription_GetSampleLoadingState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetSampleLoadingState(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetSampleLoadingState$handle() {
        return FMOD_Studio_EventDescription_GetSampleLoadingState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetSampleLoadingState(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetSampleLoadingState$address() {
        return FMOD_Studio_EventDescription_GetSampleLoadingState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetSampleLoadingState(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetSampleLoadingState(MemorySegment eventdescription, MemorySegment state) {
        var mh$ = FMOD_Studio_EventDescription_GetSampleLoadingState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetSampleLoadingState", eventdescription, state);
            }
            return (int)mh$.invokeExact(eventdescription, state);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_ReleaseAllInstances {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_ReleaseAllInstances");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_ReleaseAllInstances(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_ReleaseAllInstances$descriptor() {
        return FMOD_Studio_EventDescription_ReleaseAllInstances.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_ReleaseAllInstances(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_ReleaseAllInstances$handle() {
        return FMOD_Studio_EventDescription_ReleaseAllInstances.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_ReleaseAllInstances(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_ReleaseAllInstances$address() {
        return FMOD_Studio_EventDescription_ReleaseAllInstances.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_ReleaseAllInstances(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription)
     * }
     */
    public static int FMOD_Studio_EventDescription_ReleaseAllInstances(MemorySegment eventdescription) {
        var mh$ = FMOD_Studio_EventDescription_ReleaseAllInstances.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_ReleaseAllInstances", eventdescription);
            }
            return (int)mh$.invokeExact(eventdescription);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_SetCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_SetCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_SetCallback(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENT_CALLBACK callback, FMOD_STUDIO_EVENT_CALLBACK_TYPE callbackmask)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_SetCallback$descriptor() {
        return FMOD_Studio_EventDescription_SetCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_SetCallback(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENT_CALLBACK callback, FMOD_STUDIO_EVENT_CALLBACK_TYPE callbackmask)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_SetCallback$handle() {
        return FMOD_Studio_EventDescription_SetCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_SetCallback(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENT_CALLBACK callback, FMOD_STUDIO_EVENT_CALLBACK_TYPE callbackmask)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_SetCallback$address() {
        return FMOD_Studio_EventDescription_SetCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_SetCallback(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, FMOD_STUDIO_EVENT_CALLBACK callback, FMOD_STUDIO_EVENT_CALLBACK_TYPE callbackmask)
     * }
     */
    public static int FMOD_Studio_EventDescription_SetCallback(MemorySegment eventdescription, MemorySegment callback, int callbackmask) {
        var mh$ = FMOD_Studio_EventDescription_SetCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_SetCallback", eventdescription, callback, callbackmask);
            }
            return (int)mh$.invokeExact(eventdescription, callback, callbackmask);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_GetUserData$descriptor() {
        return FMOD_Studio_EventDescription_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, void **userdata)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_GetUserData$handle() {
        return FMOD_Studio_EventDescription_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, void **userdata)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_GetUserData$address() {
        return FMOD_Studio_EventDescription_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_GetUserData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, void **userdata)
     * }
     */
    public static int FMOD_Studio_EventDescription_GetUserData(MemorySegment eventdescription, MemorySegment userdata) {
        var mh$ = FMOD_Studio_EventDescription_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_GetUserData", eventdescription, userdata);
            }
            return (int)mh$.invokeExact(eventdescription, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventDescription_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventDescription_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_SetUserData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventDescription_SetUserData$descriptor() {
        return FMOD_Studio_EventDescription_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_SetUserData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, void *userdata)
     * }
     */
    public static MethodHandle FMOD_Studio_EventDescription_SetUserData$handle() {
        return FMOD_Studio_EventDescription_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_SetUserData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, void *userdata)
     * }
     */
    public static MemorySegment FMOD_Studio_EventDescription_SetUserData$address() {
        return FMOD_Studio_EventDescription_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventDescription_SetUserData(FMOD_STUDIO_EVENTDESCRIPTION *eventdescription, void *userdata)
     * }
     */
    public static int FMOD_Studio_EventDescription_SetUserData(MemorySegment eventdescription, MemorySegment userdata) {
        var mh$ = FMOD_Studio_EventDescription_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventDescription_SetUserData", eventdescription, userdata);
            }
            return (int)mh$.invokeExact(eventdescription, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_IsValid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_IsValid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_EventInstance_IsValid(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_IsValid$descriptor() {
        return FMOD_Studio_EventInstance_IsValid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_EventInstance_IsValid(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_IsValid$handle() {
        return FMOD_Studio_EventInstance_IsValid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_EventInstance_IsValid(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_IsValid$address() {
        return FMOD_Studio_EventInstance_IsValid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_EventInstance_IsValid(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static int FMOD_Studio_EventInstance_IsValid(MemorySegment eventinstance) {
        var mh$ = FMOD_Studio_EventInstance_IsValid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_IsValid", eventinstance);
            }
            return (int)mh$.invokeExact(eventinstance);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetDescription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetDescription");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetDescription(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENTDESCRIPTION **description)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetDescription$descriptor() {
        return FMOD_Studio_EventInstance_GetDescription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetDescription(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENTDESCRIPTION **description)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetDescription$handle() {
        return FMOD_Studio_EventInstance_GetDescription.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetDescription(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENTDESCRIPTION **description)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetDescription$address() {
        return FMOD_Studio_EventInstance_GetDescription.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetDescription(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENTDESCRIPTION **description)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetDescription(MemorySegment eventinstance, MemorySegment description) {
        var mh$ = FMOD_Studio_EventInstance_GetDescription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetDescription", eventinstance, description);
            }
            return (int)mh$.invokeExact(eventinstance, description);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetSystem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetSystem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetSystem(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_SYSTEM **system)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetSystem$descriptor() {
        return FMOD_Studio_EventInstance_GetSystem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetSystem(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_SYSTEM **system)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetSystem$handle() {
        return FMOD_Studio_EventInstance_GetSystem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetSystem(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_SYSTEM **system)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetSystem$address() {
        return FMOD_Studio_EventInstance_GetSystem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetSystem(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_SYSTEM **system)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetSystem(MemorySegment eventinstance, MemorySegment system) {
        var mh$ = FMOD_Studio_EventInstance_GetSystem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetSystem", eventinstance, system);
            }
            return (int)mh$.invokeExact(eventinstance, system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetVolume(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *volume, float *finalvolume)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetVolume$descriptor() {
        return FMOD_Studio_EventInstance_GetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetVolume(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *volume, float *finalvolume)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetVolume$handle() {
        return FMOD_Studio_EventInstance_GetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetVolume(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *volume, float *finalvolume)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetVolume$address() {
        return FMOD_Studio_EventInstance_GetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetVolume(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *volume, float *finalvolume)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetVolume(MemorySegment eventinstance, MemorySegment volume, MemorySegment finalvolume) {
        var mh$ = FMOD_Studio_EventInstance_GetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetVolume", eventinstance, volume, finalvolume);
            }
            return (int)mh$.invokeExact(eventinstance, volume, finalvolume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetVolume(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetVolume$descriptor() {
        return FMOD_Studio_EventInstance_SetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetVolume(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float volume)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetVolume$handle() {
        return FMOD_Studio_EventInstance_SetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetVolume(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float volume)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetVolume$address() {
        return FMOD_Studio_EventInstance_SetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetVolume(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float volume)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetVolume(MemorySegment eventinstance, float volume) {
        var mh$ = FMOD_Studio_EventInstance_SetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetVolume", eventinstance, volume);
            }
            return (int)mh$.invokeExact(eventinstance, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetPitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPitch(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *pitch, float *finalpitch)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetPitch$descriptor() {
        return FMOD_Studio_EventInstance_GetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPitch(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *pitch, float *finalpitch)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetPitch$handle() {
        return FMOD_Studio_EventInstance_GetPitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPitch(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *pitch, float *finalpitch)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetPitch$address() {
        return FMOD_Studio_EventInstance_GetPitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPitch(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *pitch, float *finalpitch)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetPitch(MemorySegment eventinstance, MemorySegment pitch, MemorySegment finalpitch) {
        var mh$ = FMOD_Studio_EventInstance_GetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetPitch", eventinstance, pitch, finalpitch);
            }
            return (int)mh$.invokeExact(eventinstance, pitch, finalpitch);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetPitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetPitch(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float pitch)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetPitch$descriptor() {
        return FMOD_Studio_EventInstance_SetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetPitch(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float pitch)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetPitch$handle() {
        return FMOD_Studio_EventInstance_SetPitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetPitch(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float pitch)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetPitch$address() {
        return FMOD_Studio_EventInstance_SetPitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetPitch(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float pitch)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetPitch(MemorySegment eventinstance, float pitch) {
        var mh$ = FMOD_Studio_EventInstance_SetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetPitch", eventinstance, pitch);
            }
            return (int)mh$.invokeExact(eventinstance, pitch);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_Get3DAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_Get3DAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Get3DAttributes(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_3D_ATTRIBUTES *attributes)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_Get3DAttributes$descriptor() {
        return FMOD_Studio_EventInstance_Get3DAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Get3DAttributes(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_3D_ATTRIBUTES *attributes)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_Get3DAttributes$handle() {
        return FMOD_Studio_EventInstance_Get3DAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Get3DAttributes(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_3D_ATTRIBUTES *attributes)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_Get3DAttributes$address() {
        return FMOD_Studio_EventInstance_Get3DAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Get3DAttributes(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_3D_ATTRIBUTES *attributes)
     * }
     */
    public static int FMOD_Studio_EventInstance_Get3DAttributes(MemorySegment eventinstance, MemorySegment attributes) {
        var mh$ = FMOD_Studio_EventInstance_Get3DAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_Get3DAttributes", eventinstance, attributes);
            }
            return (int)mh$.invokeExact(eventinstance, attributes);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_Set3DAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_Set3DAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Set3DAttributes(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_3D_ATTRIBUTES *attributes)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_Set3DAttributes$descriptor() {
        return FMOD_Studio_EventInstance_Set3DAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Set3DAttributes(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_3D_ATTRIBUTES *attributes)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_Set3DAttributes$handle() {
        return FMOD_Studio_EventInstance_Set3DAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Set3DAttributes(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_3D_ATTRIBUTES *attributes)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_Set3DAttributes$address() {
        return FMOD_Studio_EventInstance_Set3DAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Set3DAttributes(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_3D_ATTRIBUTES *attributes)
     * }
     */
    public static int FMOD_Studio_EventInstance_Set3DAttributes(MemorySegment eventinstance, MemorySegment attributes) {
        var mh$ = FMOD_Studio_EventInstance_Set3DAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_Set3DAttributes", eventinstance, attributes);
            }
            return (int)mh$.invokeExact(eventinstance, attributes);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetListenerMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetListenerMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetListenerMask(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int *mask)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetListenerMask$descriptor() {
        return FMOD_Studio_EventInstance_GetListenerMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetListenerMask(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int *mask)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetListenerMask$handle() {
        return FMOD_Studio_EventInstance_GetListenerMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetListenerMask(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int *mask)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetListenerMask$address() {
        return FMOD_Studio_EventInstance_GetListenerMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetListenerMask(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int *mask)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetListenerMask(MemorySegment eventinstance, MemorySegment mask) {
        var mh$ = FMOD_Studio_EventInstance_GetListenerMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetListenerMask", eventinstance, mask);
            }
            return (int)mh$.invokeExact(eventinstance, mask);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetListenerMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetListenerMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetListenerMask(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int mask)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetListenerMask$descriptor() {
        return FMOD_Studio_EventInstance_SetListenerMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetListenerMask(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int mask)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetListenerMask$handle() {
        return FMOD_Studio_EventInstance_SetListenerMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetListenerMask(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int mask)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetListenerMask$address() {
        return FMOD_Studio_EventInstance_SetListenerMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetListenerMask(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int mask)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetListenerMask(MemorySegment eventinstance, int mask) {
        var mh$ = FMOD_Studio_EventInstance_SetListenerMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetListenerMask", eventinstance, mask);
            }
            return (int)mh$.invokeExact(eventinstance, mask);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetProperty(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_PROPERTY index, float *value)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetProperty$descriptor() {
        return FMOD_Studio_EventInstance_GetProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetProperty(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_PROPERTY index, float *value)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetProperty$handle() {
        return FMOD_Studio_EventInstance_GetProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetProperty(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_PROPERTY index, float *value)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetProperty$address() {
        return FMOD_Studio_EventInstance_GetProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetProperty(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_PROPERTY index, float *value)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetProperty(MemorySegment eventinstance, int index, MemorySegment value) {
        var mh$ = FMOD_Studio_EventInstance_GetProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetProperty", eventinstance, index, value);
            }
            return (int)mh$.invokeExact(eventinstance, index, value);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetProperty(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_PROPERTY index, float value)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetProperty$descriptor() {
        return FMOD_Studio_EventInstance_SetProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetProperty(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_PROPERTY index, float value)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetProperty$handle() {
        return FMOD_Studio_EventInstance_SetProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetProperty(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_PROPERTY index, float value)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetProperty$address() {
        return FMOD_Studio_EventInstance_SetProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetProperty(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_PROPERTY index, float value)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetProperty(MemorySegment eventinstance, int index, float value) {
        var mh$ = FMOD_Studio_EventInstance_SetProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetProperty", eventinstance, index, value);
            }
            return (int)mh$.invokeExact(eventinstance, index, value);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetReverbLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetReverbLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetReverbLevel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int index, float *level)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetReverbLevel$descriptor() {
        return FMOD_Studio_EventInstance_GetReverbLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetReverbLevel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int index, float *level)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetReverbLevel$handle() {
        return FMOD_Studio_EventInstance_GetReverbLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetReverbLevel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int index, float *level)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetReverbLevel$address() {
        return FMOD_Studio_EventInstance_GetReverbLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetReverbLevel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int index, float *level)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetReverbLevel(MemorySegment eventinstance, int index, MemorySegment level) {
        var mh$ = FMOD_Studio_EventInstance_GetReverbLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetReverbLevel", eventinstance, index, level);
            }
            return (int)mh$.invokeExact(eventinstance, index, level);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetReverbLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetReverbLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetReverbLevel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int index, float level)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetReverbLevel$descriptor() {
        return FMOD_Studio_EventInstance_SetReverbLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetReverbLevel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int index, float level)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetReverbLevel$handle() {
        return FMOD_Studio_EventInstance_SetReverbLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetReverbLevel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int index, float level)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetReverbLevel$address() {
        return FMOD_Studio_EventInstance_SetReverbLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetReverbLevel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int index, float level)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetReverbLevel(MemorySegment eventinstance, int index, float level) {
        var mh$ = FMOD_Studio_EventInstance_SetReverbLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetReverbLevel", eventinstance, index, level);
            }
            return (int)mh$.invokeExact(eventinstance, index, level);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPaused(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL *paused)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetPaused$descriptor() {
        return FMOD_Studio_EventInstance_GetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPaused(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL *paused)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetPaused$handle() {
        return FMOD_Studio_EventInstance_GetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPaused(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL *paused)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetPaused$address() {
        return FMOD_Studio_EventInstance_GetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPaused(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL *paused)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetPaused(MemorySegment eventinstance, MemorySegment paused) {
        var mh$ = FMOD_Studio_EventInstance_GetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetPaused", eventinstance, paused);
            }
            return (int)mh$.invokeExact(eventinstance, paused);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetPaused(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL paused)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetPaused$descriptor() {
        return FMOD_Studio_EventInstance_SetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetPaused(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL paused)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetPaused$handle() {
        return FMOD_Studio_EventInstance_SetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetPaused(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL paused)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetPaused$address() {
        return FMOD_Studio_EventInstance_SetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetPaused(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL paused)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetPaused(MemorySegment eventinstance, int paused) {
        var mh$ = FMOD_Studio_EventInstance_SetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetPaused", eventinstance, paused);
            }
            return (int)mh$.invokeExact(eventinstance, paused);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_Start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_Start");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Start(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_Start$descriptor() {
        return FMOD_Studio_EventInstance_Start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Start(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_Start$handle() {
        return FMOD_Studio_EventInstance_Start.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Start(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_Start$address() {
        return FMOD_Studio_EventInstance_Start.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Start(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static int FMOD_Studio_EventInstance_Start(MemorySegment eventinstance) {
        var mh$ = FMOD_Studio_EventInstance_Start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_Start", eventinstance);
            }
            return (int)mh$.invokeExact(eventinstance);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_Stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_Stop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Stop(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_STOP_MODE mode)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_Stop$descriptor() {
        return FMOD_Studio_EventInstance_Stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Stop(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_STOP_MODE mode)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_Stop$handle() {
        return FMOD_Studio_EventInstance_Stop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Stop(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_STOP_MODE mode)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_Stop$address() {
        return FMOD_Studio_EventInstance_Stop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Stop(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_STOP_MODE mode)
     * }
     */
    public static int FMOD_Studio_EventInstance_Stop(MemorySegment eventinstance, int mode) {
        var mh$ = FMOD_Studio_EventInstance_Stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_Stop", eventinstance, mode);
            }
            return (int)mh$.invokeExact(eventinstance, mode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetTimelinePosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetTimelinePosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetTimelinePosition(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int *position)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetTimelinePosition$descriptor() {
        return FMOD_Studio_EventInstance_GetTimelinePosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetTimelinePosition(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int *position)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetTimelinePosition$handle() {
        return FMOD_Studio_EventInstance_GetTimelinePosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetTimelinePosition(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int *position)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetTimelinePosition$address() {
        return FMOD_Studio_EventInstance_GetTimelinePosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetTimelinePosition(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int *position)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetTimelinePosition(MemorySegment eventinstance, MemorySegment position) {
        var mh$ = FMOD_Studio_EventInstance_GetTimelinePosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetTimelinePosition", eventinstance, position);
            }
            return (int)mh$.invokeExact(eventinstance, position);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetTimelinePosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetTimelinePosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetTimelinePosition(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int position)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetTimelinePosition$descriptor() {
        return FMOD_Studio_EventInstance_SetTimelinePosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetTimelinePosition(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int position)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetTimelinePosition$handle() {
        return FMOD_Studio_EventInstance_SetTimelinePosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetTimelinePosition(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int position)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetTimelinePosition$address() {
        return FMOD_Studio_EventInstance_SetTimelinePosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetTimelinePosition(FMOD_STUDIO_EVENTINSTANCE *eventinstance, int position)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetTimelinePosition(MemorySegment eventinstance, int position) {
        var mh$ = FMOD_Studio_EventInstance_SetTimelinePosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetTimelinePosition", eventinstance, position);
            }
            return (int)mh$.invokeExact(eventinstance, position);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetPlaybackState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetPlaybackState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPlaybackState(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PLAYBACK_STATE *state)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetPlaybackState$descriptor() {
        return FMOD_Studio_EventInstance_GetPlaybackState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPlaybackState(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PLAYBACK_STATE *state)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetPlaybackState$handle() {
        return FMOD_Studio_EventInstance_GetPlaybackState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPlaybackState(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PLAYBACK_STATE *state)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetPlaybackState$address() {
        return FMOD_Studio_EventInstance_GetPlaybackState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetPlaybackState(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PLAYBACK_STATE *state)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetPlaybackState(MemorySegment eventinstance, MemorySegment state) {
        var mh$ = FMOD_Studio_EventInstance_GetPlaybackState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetPlaybackState", eventinstance, state);
            }
            return (int)mh$.invokeExact(eventinstance, state);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetChannelGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetChannelGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetChannelGroup(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_CHANNELGROUP **group)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetChannelGroup$descriptor() {
        return FMOD_Studio_EventInstance_GetChannelGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetChannelGroup(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_CHANNELGROUP **group)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetChannelGroup$handle() {
        return FMOD_Studio_EventInstance_GetChannelGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetChannelGroup(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_CHANNELGROUP **group)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetChannelGroup$address() {
        return FMOD_Studio_EventInstance_GetChannelGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetChannelGroup(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_CHANNELGROUP **group)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetChannelGroup(MemorySegment eventinstance, MemorySegment group) {
        var mh$ = FMOD_Studio_EventInstance_GetChannelGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetChannelGroup", eventinstance, group);
            }
            return (int)mh$.invokeExact(eventinstance, group);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetMinMaxDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetMinMaxDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetMinMaxDistance(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *min, float *max)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetMinMaxDistance$descriptor() {
        return FMOD_Studio_EventInstance_GetMinMaxDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetMinMaxDistance(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *min, float *max)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetMinMaxDistance$handle() {
        return FMOD_Studio_EventInstance_GetMinMaxDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetMinMaxDistance(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *min, float *max)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetMinMaxDistance$address() {
        return FMOD_Studio_EventInstance_GetMinMaxDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetMinMaxDistance(FMOD_STUDIO_EVENTINSTANCE *eventinstance, float *min, float *max)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetMinMaxDistance(MemorySegment eventinstance, MemorySegment min, MemorySegment max) {
        var mh$ = FMOD_Studio_EventInstance_GetMinMaxDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetMinMaxDistance", eventinstance, min, max);
            }
            return (int)mh$.invokeExact(eventinstance, min, max);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Release(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_Release$descriptor() {
        return FMOD_Studio_EventInstance_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Release(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_Release$handle() {
        return FMOD_Studio_EventInstance_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Release(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_Release$address() {
        return FMOD_Studio_EventInstance_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_Release(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static int FMOD_Studio_EventInstance_Release(MemorySegment eventinstance) {
        var mh$ = FMOD_Studio_EventInstance_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_Release", eventinstance);
            }
            return (int)mh$.invokeExact(eventinstance);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_IsVirtual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_IsVirtual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_IsVirtual(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL *virtualstate)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_IsVirtual$descriptor() {
        return FMOD_Studio_EventInstance_IsVirtual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_IsVirtual(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL *virtualstate)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_IsVirtual$handle() {
        return FMOD_Studio_EventInstance_IsVirtual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_IsVirtual(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL *virtualstate)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_IsVirtual$address() {
        return FMOD_Studio_EventInstance_IsVirtual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_IsVirtual(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_BOOL *virtualstate)
     * }
     */
    public static int FMOD_Studio_EventInstance_IsVirtual(MemorySegment eventinstance, MemorySegment virtualstate) {
        var mh$ = FMOD_Studio_EventInstance_IsVirtual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_IsVirtual", eventinstance, virtualstate);
            }
            return (int)mh$.invokeExact(eventinstance, virtualstate);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetParameterByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetParameterByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetParameterByName(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, float *value, float *finalvalue)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetParameterByName$descriptor() {
        return FMOD_Studio_EventInstance_GetParameterByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetParameterByName(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, float *value, float *finalvalue)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetParameterByName$handle() {
        return FMOD_Studio_EventInstance_GetParameterByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetParameterByName(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, float *value, float *finalvalue)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetParameterByName$address() {
        return FMOD_Studio_EventInstance_GetParameterByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetParameterByName(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, float *value, float *finalvalue)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetParameterByName(MemorySegment eventinstance, MemorySegment name, MemorySegment value, MemorySegment finalvalue) {
        var mh$ = FMOD_Studio_EventInstance_GetParameterByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetParameterByName", eventinstance, name, value, finalvalue);
            }
            return (int)mh$.invokeExact(eventinstance, name, value, finalvalue);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetParameterByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetParameterByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByName(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetParameterByName$descriptor() {
        return FMOD_Studio_EventInstance_SetParameterByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByName(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetParameterByName$handle() {
        return FMOD_Studio_EventInstance_SetParameterByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByName(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetParameterByName$address() {
        return FMOD_Studio_EventInstance_SetParameterByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByName(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetParameterByName(MemorySegment eventinstance, MemorySegment name, float value, int ignoreseekspeed) {
        var mh$ = FMOD_Studio_EventInstance_SetParameterByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetParameterByName", eventinstance, name, value, ignoreseekspeed);
            }
            return (int)mh$.invokeExact(eventinstance, name, value, ignoreseekspeed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetParameterByNameWithLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetParameterByNameWithLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByNameWithLabel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetParameterByNameWithLabel$descriptor() {
        return FMOD_Studio_EventInstance_SetParameterByNameWithLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByNameWithLabel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetParameterByNameWithLabel$handle() {
        return FMOD_Studio_EventInstance_SetParameterByNameWithLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByNameWithLabel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetParameterByNameWithLabel$address() {
        return FMOD_Studio_EventInstance_SetParameterByNameWithLabel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByNameWithLabel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const char *name, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetParameterByNameWithLabel(MemorySegment eventinstance, MemorySegment name, MemorySegment label, int ignoreseekspeed) {
        var mh$ = FMOD_Studio_EventInstance_SetParameterByNameWithLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetParameterByNameWithLabel", eventinstance, name, label, ignoreseekspeed);
            }
            return (int)mh$.invokeExact(eventinstance, name, label, ignoreseekspeed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetParameterByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            FMOD_STUDIO_PARAMETER_ID.layout(),
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetParameterByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetParameterByID(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, float *value, float *finalvalue)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetParameterByID$descriptor() {
        return FMOD_Studio_EventInstance_GetParameterByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetParameterByID(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, float *value, float *finalvalue)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetParameterByID$handle() {
        return FMOD_Studio_EventInstance_GetParameterByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetParameterByID(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, float *value, float *finalvalue)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetParameterByID$address() {
        return FMOD_Studio_EventInstance_GetParameterByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetParameterByID(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, float *value, float *finalvalue)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetParameterByID(MemorySegment eventinstance, MemorySegment id, MemorySegment value, MemorySegment finalvalue) {
        var mh$ = FMOD_Studio_EventInstance_GetParameterByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetParameterByID", eventinstance, id, value, finalvalue);
            }
            return (int)mh$.invokeExact(eventinstance, id, value, finalvalue);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetParameterByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            FMOD_STUDIO_PARAMETER_ID.layout(),
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetParameterByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByID(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetParameterByID$descriptor() {
        return FMOD_Studio_EventInstance_SetParameterByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByID(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetParameterByID$handle() {
        return FMOD_Studio_EventInstance_SetParameterByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByID(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetParameterByID$address() {
        return FMOD_Studio_EventInstance_SetParameterByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByID(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, float value, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetParameterByID(MemorySegment eventinstance, MemorySegment id, float value, int ignoreseekspeed) {
        var mh$ = FMOD_Studio_EventInstance_SetParameterByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetParameterByID", eventinstance, id, value, ignoreseekspeed);
            }
            return (int)mh$.invokeExact(eventinstance, id, value, ignoreseekspeed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetParameterByIDWithLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            FMOD_STUDIO_PARAMETER_ID.layout(),
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetParameterByIDWithLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByIDWithLabel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetParameterByIDWithLabel$descriptor() {
        return FMOD_Studio_EventInstance_SetParameterByIDWithLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByIDWithLabel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetParameterByIDWithLabel$handle() {
        return FMOD_Studio_EventInstance_SetParameterByIDWithLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByIDWithLabel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetParameterByIDWithLabel$address() {
        return FMOD_Studio_EventInstance_SetParameterByIDWithLabel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParameterByIDWithLabel(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_PARAMETER_ID id, const char *label, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetParameterByIDWithLabel(MemorySegment eventinstance, MemorySegment id, MemorySegment label, int ignoreseekspeed) {
        var mh$ = FMOD_Studio_EventInstance_SetParameterByIDWithLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetParameterByIDWithLabel", eventinstance, id, label, ignoreseekspeed);
            }
            return (int)mh$.invokeExact(eventinstance, id, label, ignoreseekspeed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetParametersByIDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetParametersByIDs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParametersByIDs(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const FMOD_STUDIO_PARAMETER_ID *ids, float *values, int count, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetParametersByIDs$descriptor() {
        return FMOD_Studio_EventInstance_SetParametersByIDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParametersByIDs(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const FMOD_STUDIO_PARAMETER_ID *ids, float *values, int count, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetParametersByIDs$handle() {
        return FMOD_Studio_EventInstance_SetParametersByIDs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParametersByIDs(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const FMOD_STUDIO_PARAMETER_ID *ids, float *values, int count, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetParametersByIDs$address() {
        return FMOD_Studio_EventInstance_SetParametersByIDs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetParametersByIDs(FMOD_STUDIO_EVENTINSTANCE *eventinstance, const FMOD_STUDIO_PARAMETER_ID *ids, float *values, int count, FMOD_BOOL ignoreseekspeed)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetParametersByIDs(MemorySegment eventinstance, MemorySegment ids, MemorySegment values, int count, int ignoreseekspeed) {
        var mh$ = FMOD_Studio_EventInstance_SetParametersByIDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetParametersByIDs", eventinstance, ids, values, count, ignoreseekspeed);
            }
            return (int)mh$.invokeExact(eventinstance, ids, values, count, ignoreseekspeed);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_KeyOff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_KeyOff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_KeyOff(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_KeyOff$descriptor() {
        return FMOD_Studio_EventInstance_KeyOff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_KeyOff(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_KeyOff$handle() {
        return FMOD_Studio_EventInstance_KeyOff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_KeyOff(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_KeyOff$address() {
        return FMOD_Studio_EventInstance_KeyOff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_KeyOff(FMOD_STUDIO_EVENTINSTANCE *eventinstance)
     * }
     */
    public static int FMOD_Studio_EventInstance_KeyOff(MemorySegment eventinstance) {
        var mh$ = FMOD_Studio_EventInstance_KeyOff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_KeyOff", eventinstance);
            }
            return (int)mh$.invokeExact(eventinstance);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetCallback(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_CALLBACK callback, FMOD_STUDIO_EVENT_CALLBACK_TYPE callbackmask)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetCallback$descriptor() {
        return FMOD_Studio_EventInstance_SetCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetCallback(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_CALLBACK callback, FMOD_STUDIO_EVENT_CALLBACK_TYPE callbackmask)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetCallback$handle() {
        return FMOD_Studio_EventInstance_SetCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetCallback(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_CALLBACK callback, FMOD_STUDIO_EVENT_CALLBACK_TYPE callbackmask)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetCallback$address() {
        return FMOD_Studio_EventInstance_SetCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetCallback(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_EVENT_CALLBACK callback, FMOD_STUDIO_EVENT_CALLBACK_TYPE callbackmask)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetCallback(MemorySegment eventinstance, MemorySegment callback, int callbackmask) {
        var mh$ = FMOD_Studio_EventInstance_SetCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetCallback", eventinstance, callback, callbackmask);
            }
            return (int)mh$.invokeExact(eventinstance, callback, callbackmask);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetUserData(FMOD_STUDIO_EVENTINSTANCE *eventinstance, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetUserData$descriptor() {
        return FMOD_Studio_EventInstance_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetUserData(FMOD_STUDIO_EVENTINSTANCE *eventinstance, void **userdata)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetUserData$handle() {
        return FMOD_Studio_EventInstance_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetUserData(FMOD_STUDIO_EVENTINSTANCE *eventinstance, void **userdata)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetUserData$address() {
        return FMOD_Studio_EventInstance_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetUserData(FMOD_STUDIO_EVENTINSTANCE *eventinstance, void **userdata)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetUserData(MemorySegment eventinstance, MemorySegment userdata) {
        var mh$ = FMOD_Studio_EventInstance_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetUserData", eventinstance, userdata);
            }
            return (int)mh$.invokeExact(eventinstance, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetUserData(FMOD_STUDIO_EVENTINSTANCE *eventinstance, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_SetUserData$descriptor() {
        return FMOD_Studio_EventInstance_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetUserData(FMOD_STUDIO_EVENTINSTANCE *eventinstance, void *userdata)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_SetUserData$handle() {
        return FMOD_Studio_EventInstance_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetUserData(FMOD_STUDIO_EVENTINSTANCE *eventinstance, void *userdata)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_SetUserData$address() {
        return FMOD_Studio_EventInstance_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_SetUserData(FMOD_STUDIO_EVENTINSTANCE *eventinstance, void *userdata)
     * }
     */
    public static int FMOD_Studio_EventInstance_SetUserData(MemorySegment eventinstance, MemorySegment userdata) {
        var mh$ = FMOD_Studio_EventInstance_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_SetUserData", eventinstance, userdata);
            }
            return (int)mh$.invokeExact(eventinstance, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetCPUUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetCPUUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetCPUUsage(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetCPUUsage$descriptor() {
        return FMOD_Studio_EventInstance_GetCPUUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetCPUUsage(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetCPUUsage$handle() {
        return FMOD_Studio_EventInstance_GetCPUUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetCPUUsage(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetCPUUsage$address() {
        return FMOD_Studio_EventInstance_GetCPUUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetCPUUsage(FMOD_STUDIO_EVENTINSTANCE *eventinstance, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetCPUUsage(MemorySegment eventinstance, MemorySegment exclusive, MemorySegment inclusive) {
        var mh$ = FMOD_Studio_EventInstance_GetCPUUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetCPUUsage", eventinstance, exclusive, inclusive);
            }
            return (int)mh$.invokeExact(eventinstance, exclusive, inclusive);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_EventInstance_GetMemoryUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_EventInstance_GetMemoryUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetMemoryUsage(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_EventInstance_GetMemoryUsage$descriptor() {
        return FMOD_Studio_EventInstance_GetMemoryUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetMemoryUsage(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static MethodHandle FMOD_Studio_EventInstance_GetMemoryUsage$handle() {
        return FMOD_Studio_EventInstance_GetMemoryUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetMemoryUsage(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static MemorySegment FMOD_Studio_EventInstance_GetMemoryUsage$address() {
        return FMOD_Studio_EventInstance_GetMemoryUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_EventInstance_GetMemoryUsage(FMOD_STUDIO_EVENTINSTANCE *eventinstance, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static int FMOD_Studio_EventInstance_GetMemoryUsage(MemorySegment eventinstance, MemorySegment memoryusage) {
        var mh$ = FMOD_Studio_EventInstance_GetMemoryUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_EventInstance_GetMemoryUsage", eventinstance, memoryusage);
            }
            return (int)mh$.invokeExact(eventinstance, memoryusage);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_IsValid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_IsValid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_Bus_IsValid(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_IsValid$descriptor() {
        return FMOD_Studio_Bus_IsValid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_Bus_IsValid(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_IsValid$handle() {
        return FMOD_Studio_Bus_IsValid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_Bus_IsValid(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_IsValid$address() {
        return FMOD_Studio_Bus_IsValid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_Bus_IsValid(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static int FMOD_Studio_Bus_IsValid(MemorySegment bus) {
        var mh$ = FMOD_Studio_Bus_IsValid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_IsValid", bus);
            }
            return (int)mh$.invokeExact(bus);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_GetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_GetID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetID(FMOD_STUDIO_BUS *bus, FMOD_GUID *id)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_GetID$descriptor() {
        return FMOD_Studio_Bus_GetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetID(FMOD_STUDIO_BUS *bus, FMOD_GUID *id)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_GetID$handle() {
        return FMOD_Studio_Bus_GetID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetID(FMOD_STUDIO_BUS *bus, FMOD_GUID *id)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_GetID$address() {
        return FMOD_Studio_Bus_GetID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetID(FMOD_STUDIO_BUS *bus, FMOD_GUID *id)
     * }
     */
    public static int FMOD_Studio_Bus_GetID(MemorySegment bus, MemorySegment id) {
        var mh$ = FMOD_Studio_Bus_GetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_GetID", bus, id);
            }
            return (int)mh$.invokeExact(bus, id);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_GetPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_GetPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPath(FMOD_STUDIO_BUS *bus, char *path, int size, int *retrieved)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_GetPath$descriptor() {
        return FMOD_Studio_Bus_GetPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPath(FMOD_STUDIO_BUS *bus, char *path, int size, int *retrieved)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_GetPath$handle() {
        return FMOD_Studio_Bus_GetPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPath(FMOD_STUDIO_BUS *bus, char *path, int size, int *retrieved)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_GetPath$address() {
        return FMOD_Studio_Bus_GetPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPath(FMOD_STUDIO_BUS *bus, char *path, int size, int *retrieved)
     * }
     */
    public static int FMOD_Studio_Bus_GetPath(MemorySegment bus, MemorySegment path, int size, MemorySegment retrieved) {
        var mh$ = FMOD_Studio_Bus_GetPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_GetPath", bus, path, size, retrieved);
            }
            return (int)mh$.invokeExact(bus, path, size, retrieved);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_GetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_GetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetVolume(FMOD_STUDIO_BUS *bus, float *volume, float *finalvolume)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_GetVolume$descriptor() {
        return FMOD_Studio_Bus_GetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetVolume(FMOD_STUDIO_BUS *bus, float *volume, float *finalvolume)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_GetVolume$handle() {
        return FMOD_Studio_Bus_GetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetVolume(FMOD_STUDIO_BUS *bus, float *volume, float *finalvolume)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_GetVolume$address() {
        return FMOD_Studio_Bus_GetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetVolume(FMOD_STUDIO_BUS *bus, float *volume, float *finalvolume)
     * }
     */
    public static int FMOD_Studio_Bus_GetVolume(MemorySegment bus, MemorySegment volume, MemorySegment finalvolume) {
        var mh$ = FMOD_Studio_Bus_GetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_GetVolume", bus, volume, finalvolume);
            }
            return (int)mh$.invokeExact(bus, volume, finalvolume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_SetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_SetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetVolume(FMOD_STUDIO_BUS *bus, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_SetVolume$descriptor() {
        return FMOD_Studio_Bus_SetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetVolume(FMOD_STUDIO_BUS *bus, float volume)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_SetVolume$handle() {
        return FMOD_Studio_Bus_SetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetVolume(FMOD_STUDIO_BUS *bus, float volume)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_SetVolume$address() {
        return FMOD_Studio_Bus_SetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetVolume(FMOD_STUDIO_BUS *bus, float volume)
     * }
     */
    public static int FMOD_Studio_Bus_SetVolume(MemorySegment bus, float volume) {
        var mh$ = FMOD_Studio_Bus_SetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_SetVolume", bus, volume);
            }
            return (int)mh$.invokeExact(bus, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_GetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_GetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPaused(FMOD_STUDIO_BUS *bus, FMOD_BOOL *paused)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_GetPaused$descriptor() {
        return FMOD_Studio_Bus_GetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPaused(FMOD_STUDIO_BUS *bus, FMOD_BOOL *paused)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_GetPaused$handle() {
        return FMOD_Studio_Bus_GetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPaused(FMOD_STUDIO_BUS *bus, FMOD_BOOL *paused)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_GetPaused$address() {
        return FMOD_Studio_Bus_GetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPaused(FMOD_STUDIO_BUS *bus, FMOD_BOOL *paused)
     * }
     */
    public static int FMOD_Studio_Bus_GetPaused(MemorySegment bus, MemorySegment paused) {
        var mh$ = FMOD_Studio_Bus_GetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_GetPaused", bus, paused);
            }
            return (int)mh$.invokeExact(bus, paused);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_SetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_SetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetPaused(FMOD_STUDIO_BUS *bus, FMOD_BOOL paused)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_SetPaused$descriptor() {
        return FMOD_Studio_Bus_SetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetPaused(FMOD_STUDIO_BUS *bus, FMOD_BOOL paused)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_SetPaused$handle() {
        return FMOD_Studio_Bus_SetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetPaused(FMOD_STUDIO_BUS *bus, FMOD_BOOL paused)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_SetPaused$address() {
        return FMOD_Studio_Bus_SetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetPaused(FMOD_STUDIO_BUS *bus, FMOD_BOOL paused)
     * }
     */
    public static int FMOD_Studio_Bus_SetPaused(MemorySegment bus, int paused) {
        var mh$ = FMOD_Studio_Bus_SetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_SetPaused", bus, paused);
            }
            return (int)mh$.invokeExact(bus, paused);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_GetMute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_GetMute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetMute(FMOD_STUDIO_BUS *bus, FMOD_BOOL *mute)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_GetMute$descriptor() {
        return FMOD_Studio_Bus_GetMute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetMute(FMOD_STUDIO_BUS *bus, FMOD_BOOL *mute)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_GetMute$handle() {
        return FMOD_Studio_Bus_GetMute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetMute(FMOD_STUDIO_BUS *bus, FMOD_BOOL *mute)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_GetMute$address() {
        return FMOD_Studio_Bus_GetMute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetMute(FMOD_STUDIO_BUS *bus, FMOD_BOOL *mute)
     * }
     */
    public static int FMOD_Studio_Bus_GetMute(MemorySegment bus, MemorySegment mute) {
        var mh$ = FMOD_Studio_Bus_GetMute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_GetMute", bus, mute);
            }
            return (int)mh$.invokeExact(bus, mute);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_SetMute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_SetMute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetMute(FMOD_STUDIO_BUS *bus, FMOD_BOOL mute)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_SetMute$descriptor() {
        return FMOD_Studio_Bus_SetMute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetMute(FMOD_STUDIO_BUS *bus, FMOD_BOOL mute)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_SetMute$handle() {
        return FMOD_Studio_Bus_SetMute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetMute(FMOD_STUDIO_BUS *bus, FMOD_BOOL mute)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_SetMute$address() {
        return FMOD_Studio_Bus_SetMute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetMute(FMOD_STUDIO_BUS *bus, FMOD_BOOL mute)
     * }
     */
    public static int FMOD_Studio_Bus_SetMute(MemorySegment bus, int mute) {
        var mh$ = FMOD_Studio_Bus_SetMute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_SetMute", bus, mute);
            }
            return (int)mh$.invokeExact(bus, mute);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_StopAllEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_StopAllEvents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_StopAllEvents(FMOD_STUDIO_BUS *bus, FMOD_STUDIO_STOP_MODE mode)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_StopAllEvents$descriptor() {
        return FMOD_Studio_Bus_StopAllEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_StopAllEvents(FMOD_STUDIO_BUS *bus, FMOD_STUDIO_STOP_MODE mode)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_StopAllEvents$handle() {
        return FMOD_Studio_Bus_StopAllEvents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_StopAllEvents(FMOD_STUDIO_BUS *bus, FMOD_STUDIO_STOP_MODE mode)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_StopAllEvents$address() {
        return FMOD_Studio_Bus_StopAllEvents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_StopAllEvents(FMOD_STUDIO_BUS *bus, FMOD_STUDIO_STOP_MODE mode)
     * }
     */
    public static int FMOD_Studio_Bus_StopAllEvents(MemorySegment bus, int mode) {
        var mh$ = FMOD_Studio_Bus_StopAllEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_StopAllEvents", bus, mode);
            }
            return (int)mh$.invokeExact(bus, mode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_GetPortIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_GetPortIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPortIndex(FMOD_STUDIO_BUS *bus, FMOD_PORT_INDEX *index)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_GetPortIndex$descriptor() {
        return FMOD_Studio_Bus_GetPortIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPortIndex(FMOD_STUDIO_BUS *bus, FMOD_PORT_INDEX *index)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_GetPortIndex$handle() {
        return FMOD_Studio_Bus_GetPortIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPortIndex(FMOD_STUDIO_BUS *bus, FMOD_PORT_INDEX *index)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_GetPortIndex$address() {
        return FMOD_Studio_Bus_GetPortIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetPortIndex(FMOD_STUDIO_BUS *bus, FMOD_PORT_INDEX *index)
     * }
     */
    public static int FMOD_Studio_Bus_GetPortIndex(MemorySegment bus, MemorySegment index) {
        var mh$ = FMOD_Studio_Bus_GetPortIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_GetPortIndex", bus, index);
            }
            return (int)mh$.invokeExact(bus, index);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_SetPortIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_SetPortIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetPortIndex(FMOD_STUDIO_BUS *bus, FMOD_PORT_INDEX index)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_SetPortIndex$descriptor() {
        return FMOD_Studio_Bus_SetPortIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetPortIndex(FMOD_STUDIO_BUS *bus, FMOD_PORT_INDEX index)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_SetPortIndex$handle() {
        return FMOD_Studio_Bus_SetPortIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetPortIndex(FMOD_STUDIO_BUS *bus, FMOD_PORT_INDEX index)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_SetPortIndex$address() {
        return FMOD_Studio_Bus_SetPortIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_SetPortIndex(FMOD_STUDIO_BUS *bus, FMOD_PORT_INDEX index)
     * }
     */
    public static int FMOD_Studio_Bus_SetPortIndex(MemorySegment bus, long index) {
        var mh$ = FMOD_Studio_Bus_SetPortIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_SetPortIndex", bus, index);
            }
            return (int)mh$.invokeExact(bus, index);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_LockChannelGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_LockChannelGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_LockChannelGroup(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_LockChannelGroup$descriptor() {
        return FMOD_Studio_Bus_LockChannelGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_LockChannelGroup(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_LockChannelGroup$handle() {
        return FMOD_Studio_Bus_LockChannelGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_LockChannelGroup(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_LockChannelGroup$address() {
        return FMOD_Studio_Bus_LockChannelGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_LockChannelGroup(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static int FMOD_Studio_Bus_LockChannelGroup(MemorySegment bus) {
        var mh$ = FMOD_Studio_Bus_LockChannelGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_LockChannelGroup", bus);
            }
            return (int)mh$.invokeExact(bus);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_UnlockChannelGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_UnlockChannelGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_UnlockChannelGroup(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_UnlockChannelGroup$descriptor() {
        return FMOD_Studio_Bus_UnlockChannelGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_UnlockChannelGroup(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_UnlockChannelGroup$handle() {
        return FMOD_Studio_Bus_UnlockChannelGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_UnlockChannelGroup(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_UnlockChannelGroup$address() {
        return FMOD_Studio_Bus_UnlockChannelGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_UnlockChannelGroup(FMOD_STUDIO_BUS *bus)
     * }
     */
    public static int FMOD_Studio_Bus_UnlockChannelGroup(MemorySegment bus) {
        var mh$ = FMOD_Studio_Bus_UnlockChannelGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_UnlockChannelGroup", bus);
            }
            return (int)mh$.invokeExact(bus);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_GetChannelGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_GetChannelGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetChannelGroup(FMOD_STUDIO_BUS *bus, FMOD_CHANNELGROUP **group)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_GetChannelGroup$descriptor() {
        return FMOD_Studio_Bus_GetChannelGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetChannelGroup(FMOD_STUDIO_BUS *bus, FMOD_CHANNELGROUP **group)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_GetChannelGroup$handle() {
        return FMOD_Studio_Bus_GetChannelGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetChannelGroup(FMOD_STUDIO_BUS *bus, FMOD_CHANNELGROUP **group)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_GetChannelGroup$address() {
        return FMOD_Studio_Bus_GetChannelGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetChannelGroup(FMOD_STUDIO_BUS *bus, FMOD_CHANNELGROUP **group)
     * }
     */
    public static int FMOD_Studio_Bus_GetChannelGroup(MemorySegment bus, MemorySegment group) {
        var mh$ = FMOD_Studio_Bus_GetChannelGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_GetChannelGroup", bus, group);
            }
            return (int)mh$.invokeExact(bus, group);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_GetCPUUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_GetCPUUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetCPUUsage(FMOD_STUDIO_BUS *bus, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_GetCPUUsage$descriptor() {
        return FMOD_Studio_Bus_GetCPUUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetCPUUsage(FMOD_STUDIO_BUS *bus, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_GetCPUUsage$handle() {
        return FMOD_Studio_Bus_GetCPUUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetCPUUsage(FMOD_STUDIO_BUS *bus, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_GetCPUUsage$address() {
        return FMOD_Studio_Bus_GetCPUUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetCPUUsage(FMOD_STUDIO_BUS *bus, unsigned int *exclusive, unsigned int *inclusive)
     * }
     */
    public static int FMOD_Studio_Bus_GetCPUUsage(MemorySegment bus, MemorySegment exclusive, MemorySegment inclusive) {
        var mh$ = FMOD_Studio_Bus_GetCPUUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_GetCPUUsage", bus, exclusive, inclusive);
            }
            return (int)mh$.invokeExact(bus, exclusive, inclusive);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bus_GetMemoryUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bus_GetMemoryUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetMemoryUsage(FMOD_STUDIO_BUS *bus, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bus_GetMemoryUsage$descriptor() {
        return FMOD_Studio_Bus_GetMemoryUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetMemoryUsage(FMOD_STUDIO_BUS *bus, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static MethodHandle FMOD_Studio_Bus_GetMemoryUsage$handle() {
        return FMOD_Studio_Bus_GetMemoryUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetMemoryUsage(FMOD_STUDIO_BUS *bus, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static MemorySegment FMOD_Studio_Bus_GetMemoryUsage$address() {
        return FMOD_Studio_Bus_GetMemoryUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bus_GetMemoryUsage(FMOD_STUDIO_BUS *bus, FMOD_STUDIO_MEMORY_USAGE *memoryusage)
     * }
     */
    public static int FMOD_Studio_Bus_GetMemoryUsage(MemorySegment bus, MemorySegment memoryusage) {
        var mh$ = FMOD_Studio_Bus_GetMemoryUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bus_GetMemoryUsage", bus, memoryusage);
            }
            return (int)mh$.invokeExact(bus, memoryusage);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_VCA_IsValid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_VCA_IsValid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_VCA_IsValid(FMOD_STUDIO_VCA *vca)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_VCA_IsValid$descriptor() {
        return FMOD_Studio_VCA_IsValid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_VCA_IsValid(FMOD_STUDIO_VCA *vca)
     * }
     */
    public static MethodHandle FMOD_Studio_VCA_IsValid$handle() {
        return FMOD_Studio_VCA_IsValid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_VCA_IsValid(FMOD_STUDIO_VCA *vca)
     * }
     */
    public static MemorySegment FMOD_Studio_VCA_IsValid$address() {
        return FMOD_Studio_VCA_IsValid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_VCA_IsValid(FMOD_STUDIO_VCA *vca)
     * }
     */
    public static int FMOD_Studio_VCA_IsValid(MemorySegment vca) {
        var mh$ = FMOD_Studio_VCA_IsValid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_VCA_IsValid", vca);
            }
            return (int)mh$.invokeExact(vca);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_VCA_GetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_VCA_GetID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetID(FMOD_STUDIO_VCA *vca, FMOD_GUID *id)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_VCA_GetID$descriptor() {
        return FMOD_Studio_VCA_GetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetID(FMOD_STUDIO_VCA *vca, FMOD_GUID *id)
     * }
     */
    public static MethodHandle FMOD_Studio_VCA_GetID$handle() {
        return FMOD_Studio_VCA_GetID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetID(FMOD_STUDIO_VCA *vca, FMOD_GUID *id)
     * }
     */
    public static MemorySegment FMOD_Studio_VCA_GetID$address() {
        return FMOD_Studio_VCA_GetID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetID(FMOD_STUDIO_VCA *vca, FMOD_GUID *id)
     * }
     */
    public static int FMOD_Studio_VCA_GetID(MemorySegment vca, MemorySegment id) {
        var mh$ = FMOD_Studio_VCA_GetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_VCA_GetID", vca, id);
            }
            return (int)mh$.invokeExact(vca, id);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_VCA_GetPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_VCA_GetPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetPath(FMOD_STUDIO_VCA *vca, char *path, int size, int *retrieved)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_VCA_GetPath$descriptor() {
        return FMOD_Studio_VCA_GetPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetPath(FMOD_STUDIO_VCA *vca, char *path, int size, int *retrieved)
     * }
     */
    public static MethodHandle FMOD_Studio_VCA_GetPath$handle() {
        return FMOD_Studio_VCA_GetPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetPath(FMOD_STUDIO_VCA *vca, char *path, int size, int *retrieved)
     * }
     */
    public static MemorySegment FMOD_Studio_VCA_GetPath$address() {
        return FMOD_Studio_VCA_GetPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetPath(FMOD_STUDIO_VCA *vca, char *path, int size, int *retrieved)
     * }
     */
    public static int FMOD_Studio_VCA_GetPath(MemorySegment vca, MemorySegment path, int size, MemorySegment retrieved) {
        var mh$ = FMOD_Studio_VCA_GetPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_VCA_GetPath", vca, path, size, retrieved);
            }
            return (int)mh$.invokeExact(vca, path, size, retrieved);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_VCA_GetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_VCA_GetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetVolume(FMOD_STUDIO_VCA *vca, float *volume, float *finalvolume)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_VCA_GetVolume$descriptor() {
        return FMOD_Studio_VCA_GetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetVolume(FMOD_STUDIO_VCA *vca, float *volume, float *finalvolume)
     * }
     */
    public static MethodHandle FMOD_Studio_VCA_GetVolume$handle() {
        return FMOD_Studio_VCA_GetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetVolume(FMOD_STUDIO_VCA *vca, float *volume, float *finalvolume)
     * }
     */
    public static MemorySegment FMOD_Studio_VCA_GetVolume$address() {
        return FMOD_Studio_VCA_GetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_GetVolume(FMOD_STUDIO_VCA *vca, float *volume, float *finalvolume)
     * }
     */
    public static int FMOD_Studio_VCA_GetVolume(MemorySegment vca, MemorySegment volume, MemorySegment finalvolume) {
        var mh$ = FMOD_Studio_VCA_GetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_VCA_GetVolume", vca, volume, finalvolume);
            }
            return (int)mh$.invokeExact(vca, volume, finalvolume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_VCA_SetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_VCA_SetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_SetVolume(FMOD_STUDIO_VCA *vca, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_VCA_SetVolume$descriptor() {
        return FMOD_Studio_VCA_SetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_SetVolume(FMOD_STUDIO_VCA *vca, float volume)
     * }
     */
    public static MethodHandle FMOD_Studio_VCA_SetVolume$handle() {
        return FMOD_Studio_VCA_SetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_SetVolume(FMOD_STUDIO_VCA *vca, float volume)
     * }
     */
    public static MemorySegment FMOD_Studio_VCA_SetVolume$address() {
        return FMOD_Studio_VCA_SetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_VCA_SetVolume(FMOD_STUDIO_VCA *vca, float volume)
     * }
     */
    public static int FMOD_Studio_VCA_SetVolume(MemorySegment vca, float volume) {
        var mh$ = FMOD_Studio_VCA_SetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_VCA_SetVolume", vca, volume);
            }
            return (int)mh$.invokeExact(vca, volume);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_IsValid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_IsValid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_Bank_IsValid(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_IsValid$descriptor() {
        return FMOD_Studio_Bank_IsValid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_Bank_IsValid(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_IsValid$handle() {
        return FMOD_Studio_Bank_IsValid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_Bank_IsValid(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_IsValid$address() {
        return FMOD_Studio_Bank_IsValid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_Bank_IsValid(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static int FMOD_Studio_Bank_IsValid(MemorySegment bank) {
        var mh$ = FMOD_Studio_Bank_IsValid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_IsValid", bank);
            }
            return (int)mh$.invokeExact(bank);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetID(FMOD_STUDIO_BANK *bank, FMOD_GUID *id)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetID$descriptor() {
        return FMOD_Studio_Bank_GetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetID(FMOD_STUDIO_BANK *bank, FMOD_GUID *id)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetID$handle() {
        return FMOD_Studio_Bank_GetID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetID(FMOD_STUDIO_BANK *bank, FMOD_GUID *id)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetID$address() {
        return FMOD_Studio_Bank_GetID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetID(FMOD_STUDIO_BANK *bank, FMOD_GUID *id)
     * }
     */
    public static int FMOD_Studio_Bank_GetID(MemorySegment bank, MemorySegment id) {
        var mh$ = FMOD_Studio_Bank_GetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetID", bank, id);
            }
            return (int)mh$.invokeExact(bank, id);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetPath(FMOD_STUDIO_BANK *bank, char *path, int size, int *retrieved)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetPath$descriptor() {
        return FMOD_Studio_Bank_GetPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetPath(FMOD_STUDIO_BANK *bank, char *path, int size, int *retrieved)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetPath$handle() {
        return FMOD_Studio_Bank_GetPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetPath(FMOD_STUDIO_BANK *bank, char *path, int size, int *retrieved)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetPath$address() {
        return FMOD_Studio_Bank_GetPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetPath(FMOD_STUDIO_BANK *bank, char *path, int size, int *retrieved)
     * }
     */
    public static int FMOD_Studio_Bank_GetPath(MemorySegment bank, MemorySegment path, int size, MemorySegment retrieved) {
        var mh$ = FMOD_Studio_Bank_GetPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetPath", bank, path, size, retrieved);
            }
            return (int)mh$.invokeExact(bank, path, size, retrieved);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_Unload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_Unload");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_Unload(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_Unload$descriptor() {
        return FMOD_Studio_Bank_Unload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_Unload(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_Unload$handle() {
        return FMOD_Studio_Bank_Unload.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_Unload(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_Unload$address() {
        return FMOD_Studio_Bank_Unload.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_Unload(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static int FMOD_Studio_Bank_Unload(MemorySegment bank) {
        var mh$ = FMOD_Studio_Bank_Unload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_Unload", bank);
            }
            return (int)mh$.invokeExact(bank);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_LoadSampleData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_LoadSampleData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_LoadSampleData(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_LoadSampleData$descriptor() {
        return FMOD_Studio_Bank_LoadSampleData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_LoadSampleData(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_LoadSampleData$handle() {
        return FMOD_Studio_Bank_LoadSampleData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_LoadSampleData(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_LoadSampleData$address() {
        return FMOD_Studio_Bank_LoadSampleData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_LoadSampleData(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static int FMOD_Studio_Bank_LoadSampleData(MemorySegment bank) {
        var mh$ = FMOD_Studio_Bank_LoadSampleData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_LoadSampleData", bank);
            }
            return (int)mh$.invokeExact(bank);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_UnloadSampleData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_UnloadSampleData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_UnloadSampleData(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_UnloadSampleData$descriptor() {
        return FMOD_Studio_Bank_UnloadSampleData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_UnloadSampleData(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_UnloadSampleData$handle() {
        return FMOD_Studio_Bank_UnloadSampleData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_UnloadSampleData(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_UnloadSampleData$address() {
        return FMOD_Studio_Bank_UnloadSampleData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_UnloadSampleData(FMOD_STUDIO_BANK *bank)
     * }
     */
    public static int FMOD_Studio_Bank_UnloadSampleData(MemorySegment bank) {
        var mh$ = FMOD_Studio_Bank_UnloadSampleData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_UnloadSampleData", bank);
            }
            return (int)mh$.invokeExact(bank);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetLoadingState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetLoadingState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetLoadingState(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetLoadingState$descriptor() {
        return FMOD_Studio_Bank_GetLoadingState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetLoadingState(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetLoadingState$handle() {
        return FMOD_Studio_Bank_GetLoadingState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetLoadingState(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetLoadingState$address() {
        return FMOD_Studio_Bank_GetLoadingState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetLoadingState(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static int FMOD_Studio_Bank_GetLoadingState(MemorySegment bank, MemorySegment state) {
        var mh$ = FMOD_Studio_Bank_GetLoadingState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetLoadingState", bank, state);
            }
            return (int)mh$.invokeExact(bank, state);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetSampleLoadingState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetSampleLoadingState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetSampleLoadingState(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetSampleLoadingState$descriptor() {
        return FMOD_Studio_Bank_GetSampleLoadingState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetSampleLoadingState(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetSampleLoadingState$handle() {
        return FMOD_Studio_Bank_GetSampleLoadingState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetSampleLoadingState(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetSampleLoadingState$address() {
        return FMOD_Studio_Bank_GetSampleLoadingState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetSampleLoadingState(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_LOADING_STATE *state)
     * }
     */
    public static int FMOD_Studio_Bank_GetSampleLoadingState(MemorySegment bank, MemorySegment state) {
        var mh$ = FMOD_Studio_Bank_GetSampleLoadingState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetSampleLoadingState", bank, state);
            }
            return (int)mh$.invokeExact(bank, state);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetStringCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetStringCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetStringCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetStringCount$descriptor() {
        return FMOD_Studio_Bank_GetStringCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetStringCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetStringCount$handle() {
        return FMOD_Studio_Bank_GetStringCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetStringCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetStringCount$address() {
        return FMOD_Studio_Bank_GetStringCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetStringCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static int FMOD_Studio_Bank_GetStringCount(MemorySegment bank, MemorySegment count) {
        var mh$ = FMOD_Studio_Bank_GetStringCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetStringCount", bank, count);
            }
            return (int)mh$.invokeExact(bank, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetStringInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetStringInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetStringInfo(FMOD_STUDIO_BANK *bank, int index, FMOD_GUID *id, char *path, int size, int *retrieved)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetStringInfo$descriptor() {
        return FMOD_Studio_Bank_GetStringInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetStringInfo(FMOD_STUDIO_BANK *bank, int index, FMOD_GUID *id, char *path, int size, int *retrieved)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetStringInfo$handle() {
        return FMOD_Studio_Bank_GetStringInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetStringInfo(FMOD_STUDIO_BANK *bank, int index, FMOD_GUID *id, char *path, int size, int *retrieved)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetStringInfo$address() {
        return FMOD_Studio_Bank_GetStringInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetStringInfo(FMOD_STUDIO_BANK *bank, int index, FMOD_GUID *id, char *path, int size, int *retrieved)
     * }
     */
    public static int FMOD_Studio_Bank_GetStringInfo(MemorySegment bank, int index, MemorySegment id, MemorySegment path, int size, MemorySegment retrieved) {
        var mh$ = FMOD_Studio_Bank_GetStringInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetStringInfo", bank, index, id, path, size, retrieved);
            }
            return (int)mh$.invokeExact(bank, index, id, path, size, retrieved);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetEventCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetEventCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetEventCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetEventCount$descriptor() {
        return FMOD_Studio_Bank_GetEventCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetEventCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetEventCount$handle() {
        return FMOD_Studio_Bank_GetEventCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetEventCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetEventCount$address() {
        return FMOD_Studio_Bank_GetEventCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetEventCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static int FMOD_Studio_Bank_GetEventCount(MemorySegment bank, MemorySegment count) {
        var mh$ = FMOD_Studio_Bank_GetEventCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetEventCount", bank, count);
            }
            return (int)mh$.invokeExact(bank, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetEventList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetEventList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetEventList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_EVENTDESCRIPTION **array, int capacity, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetEventList$descriptor() {
        return FMOD_Studio_Bank_GetEventList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetEventList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_EVENTDESCRIPTION **array, int capacity, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetEventList$handle() {
        return FMOD_Studio_Bank_GetEventList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetEventList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_EVENTDESCRIPTION **array, int capacity, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetEventList$address() {
        return FMOD_Studio_Bank_GetEventList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetEventList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_EVENTDESCRIPTION **array, int capacity, int *count)
     * }
     */
    public static int FMOD_Studio_Bank_GetEventList(MemorySegment bank, MemorySegment array, int capacity, MemorySegment count) {
        var mh$ = FMOD_Studio_Bank_GetEventList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetEventList", bank, array, capacity, count);
            }
            return (int)mh$.invokeExact(bank, array, capacity, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetBusCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetBusCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetBusCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetBusCount$descriptor() {
        return FMOD_Studio_Bank_GetBusCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetBusCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetBusCount$handle() {
        return FMOD_Studio_Bank_GetBusCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetBusCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetBusCount$address() {
        return FMOD_Studio_Bank_GetBusCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetBusCount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static int FMOD_Studio_Bank_GetBusCount(MemorySegment bank, MemorySegment count) {
        var mh$ = FMOD_Studio_Bank_GetBusCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetBusCount", bank, count);
            }
            return (int)mh$.invokeExact(bank, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetBusList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetBusList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetBusList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_BUS **array, int capacity, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetBusList$descriptor() {
        return FMOD_Studio_Bank_GetBusList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetBusList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_BUS **array, int capacity, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetBusList$handle() {
        return FMOD_Studio_Bank_GetBusList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetBusList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_BUS **array, int capacity, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetBusList$address() {
        return FMOD_Studio_Bank_GetBusList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetBusList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_BUS **array, int capacity, int *count)
     * }
     */
    public static int FMOD_Studio_Bank_GetBusList(MemorySegment bank, MemorySegment array, int capacity, MemorySegment count) {
        var mh$ = FMOD_Studio_Bank_GetBusList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetBusList", bank, array, capacity, count);
            }
            return (int)mh$.invokeExact(bank, array, capacity, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetVCACount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetVCACount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetVCACount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetVCACount$descriptor() {
        return FMOD_Studio_Bank_GetVCACount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetVCACount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetVCACount$handle() {
        return FMOD_Studio_Bank_GetVCACount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetVCACount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetVCACount$address() {
        return FMOD_Studio_Bank_GetVCACount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetVCACount(FMOD_STUDIO_BANK *bank, int *count)
     * }
     */
    public static int FMOD_Studio_Bank_GetVCACount(MemorySegment bank, MemorySegment count) {
        var mh$ = FMOD_Studio_Bank_GetVCACount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetVCACount", bank, count);
            }
            return (int)mh$.invokeExact(bank, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetVCAList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetVCAList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetVCAList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_VCA **array, int capacity, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetVCAList$descriptor() {
        return FMOD_Studio_Bank_GetVCAList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetVCAList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_VCA **array, int capacity, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetVCAList$handle() {
        return FMOD_Studio_Bank_GetVCAList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetVCAList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_VCA **array, int capacity, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetVCAList$address() {
        return FMOD_Studio_Bank_GetVCAList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetVCAList(FMOD_STUDIO_BANK *bank, FMOD_STUDIO_VCA **array, int capacity, int *count)
     * }
     */
    public static int FMOD_Studio_Bank_GetVCAList(MemorySegment bank, MemorySegment array, int capacity, MemorySegment count) {
        var mh$ = FMOD_Studio_Bank_GetVCAList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetVCAList", bank, array, capacity, count);
            }
            return (int)mh$.invokeExact(bank, array, capacity, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetUserData(FMOD_STUDIO_BANK *bank, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_GetUserData$descriptor() {
        return FMOD_Studio_Bank_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetUserData(FMOD_STUDIO_BANK *bank, void **userdata)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_GetUserData$handle() {
        return FMOD_Studio_Bank_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetUserData(FMOD_STUDIO_BANK *bank, void **userdata)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_GetUserData$address() {
        return FMOD_Studio_Bank_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_GetUserData(FMOD_STUDIO_BANK *bank, void **userdata)
     * }
     */
    public static int FMOD_Studio_Bank_GetUserData(MemorySegment bank, MemorySegment userdata) {
        var mh$ = FMOD_Studio_Bank_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_GetUserData", bank, userdata);
            }
            return (int)mh$.invokeExact(bank, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_Bank_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_Bank_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_SetUserData(FMOD_STUDIO_BANK *bank, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_Bank_SetUserData$descriptor() {
        return FMOD_Studio_Bank_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_SetUserData(FMOD_STUDIO_BANK *bank, void *userdata)
     * }
     */
    public static MethodHandle FMOD_Studio_Bank_SetUserData$handle() {
        return FMOD_Studio_Bank_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_SetUserData(FMOD_STUDIO_BANK *bank, void *userdata)
     * }
     */
    public static MemorySegment FMOD_Studio_Bank_SetUserData$address() {
        return FMOD_Studio_Bank_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_Bank_SetUserData(FMOD_STUDIO_BANK *bank, void *userdata)
     * }
     */
    public static int FMOD_Studio_Bank_SetUserData(MemorySegment bank, MemorySegment userdata) {
        var mh$ = FMOD_Studio_Bank_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_Bank_SetUserData", bank, userdata);
            }
            return (int)mh$.invokeExact(bank, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_IsValid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_IsValid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_CommandReplay_IsValid(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_IsValid$descriptor() {
        return FMOD_Studio_CommandReplay_IsValid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_CommandReplay_IsValid(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_IsValid$handle() {
        return FMOD_Studio_CommandReplay_IsValid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_CommandReplay_IsValid(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_IsValid$address() {
        return FMOD_Studio_CommandReplay_IsValid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_BOOL FMOD_Studio_CommandReplay_IsValid(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static int FMOD_Studio_CommandReplay_IsValid(MemorySegment replay) {
        var mh$ = FMOD_Studio_CommandReplay_IsValid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_IsValid", replay);
            }
            return (int)mh$.invokeExact(replay);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_GetSystem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_GetSystem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetSystem(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_SYSTEM **system)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_GetSystem$descriptor() {
        return FMOD_Studio_CommandReplay_GetSystem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetSystem(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_SYSTEM **system)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_GetSystem$handle() {
        return FMOD_Studio_CommandReplay_GetSystem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetSystem(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_SYSTEM **system)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_GetSystem$address() {
        return FMOD_Studio_CommandReplay_GetSystem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetSystem(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_SYSTEM **system)
     * }
     */
    public static int FMOD_Studio_CommandReplay_GetSystem(MemorySegment replay, MemorySegment system) {
        var mh$ = FMOD_Studio_CommandReplay_GetSystem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_GetSystem", replay, system);
            }
            return (int)mh$.invokeExact(replay, system);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_GetLength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_GetLength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetLength(FMOD_STUDIO_COMMANDREPLAY *replay, float *length)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_GetLength$descriptor() {
        return FMOD_Studio_CommandReplay_GetLength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetLength(FMOD_STUDIO_COMMANDREPLAY *replay, float *length)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_GetLength$handle() {
        return FMOD_Studio_CommandReplay_GetLength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetLength(FMOD_STUDIO_COMMANDREPLAY *replay, float *length)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_GetLength$address() {
        return FMOD_Studio_CommandReplay_GetLength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetLength(FMOD_STUDIO_COMMANDREPLAY *replay, float *length)
     * }
     */
    public static int FMOD_Studio_CommandReplay_GetLength(MemorySegment replay, MemorySegment length) {
        var mh$ = FMOD_Studio_CommandReplay_GetLength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_GetLength", replay, length);
            }
            return (int)mh$.invokeExact(replay, length);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_GetCommandCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_GetCommandCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandCount(FMOD_STUDIO_COMMANDREPLAY *replay, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_GetCommandCount$descriptor() {
        return FMOD_Studio_CommandReplay_GetCommandCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandCount(FMOD_STUDIO_COMMANDREPLAY *replay, int *count)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_GetCommandCount$handle() {
        return FMOD_Studio_CommandReplay_GetCommandCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandCount(FMOD_STUDIO_COMMANDREPLAY *replay, int *count)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_GetCommandCount$address() {
        return FMOD_Studio_CommandReplay_GetCommandCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandCount(FMOD_STUDIO_COMMANDREPLAY *replay, int *count)
     * }
     */
    public static int FMOD_Studio_CommandReplay_GetCommandCount(MemorySegment replay, MemorySegment count) {
        var mh$ = FMOD_Studio_CommandReplay_GetCommandCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_GetCommandCount", replay, count);
            }
            return (int)mh$.invokeExact(replay, count);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_GetCommandInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_GetCommandInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandInfo(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, FMOD_STUDIO_COMMAND_INFO *info)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_GetCommandInfo$descriptor() {
        return FMOD_Studio_CommandReplay_GetCommandInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandInfo(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, FMOD_STUDIO_COMMAND_INFO *info)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_GetCommandInfo$handle() {
        return FMOD_Studio_CommandReplay_GetCommandInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandInfo(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, FMOD_STUDIO_COMMAND_INFO *info)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_GetCommandInfo$address() {
        return FMOD_Studio_CommandReplay_GetCommandInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandInfo(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, FMOD_STUDIO_COMMAND_INFO *info)
     * }
     */
    public static int FMOD_Studio_CommandReplay_GetCommandInfo(MemorySegment replay, int commandindex, MemorySegment info) {
        var mh$ = FMOD_Studio_CommandReplay_GetCommandInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_GetCommandInfo", replay, commandindex, info);
            }
            return (int)mh$.invokeExact(replay, commandindex, info);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_GetCommandString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_GetCommandString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandString(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, char *buffer, int length)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_GetCommandString$descriptor() {
        return FMOD_Studio_CommandReplay_GetCommandString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandString(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, char *buffer, int length)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_GetCommandString$handle() {
        return FMOD_Studio_CommandReplay_GetCommandString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandString(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, char *buffer, int length)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_GetCommandString$address() {
        return FMOD_Studio_CommandReplay_GetCommandString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandString(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex, char *buffer, int length)
     * }
     */
    public static int FMOD_Studio_CommandReplay_GetCommandString(MemorySegment replay, int commandindex, MemorySegment buffer, int length) {
        var mh$ = FMOD_Studio_CommandReplay_GetCommandString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_GetCommandString", replay, commandindex, buffer, length);
            }
            return (int)mh$.invokeExact(replay, commandindex, buffer, length);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_GetCommandAtTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_GetCommandAtTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandAtTime(FMOD_STUDIO_COMMANDREPLAY *replay, float time, int *commandindex)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_GetCommandAtTime$descriptor() {
        return FMOD_Studio_CommandReplay_GetCommandAtTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandAtTime(FMOD_STUDIO_COMMANDREPLAY *replay, float time, int *commandindex)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_GetCommandAtTime$handle() {
        return FMOD_Studio_CommandReplay_GetCommandAtTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandAtTime(FMOD_STUDIO_COMMANDREPLAY *replay, float time, int *commandindex)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_GetCommandAtTime$address() {
        return FMOD_Studio_CommandReplay_GetCommandAtTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCommandAtTime(FMOD_STUDIO_COMMANDREPLAY *replay, float time, int *commandindex)
     * }
     */
    public static int FMOD_Studio_CommandReplay_GetCommandAtTime(MemorySegment replay, float time, MemorySegment commandindex) {
        var mh$ = FMOD_Studio_CommandReplay_GetCommandAtTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_GetCommandAtTime", replay, time, commandindex);
            }
            return (int)mh$.invokeExact(replay, time, commandindex);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_SetBankPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_SetBankPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetBankPath(FMOD_STUDIO_COMMANDREPLAY *replay, const char *bankPath)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_SetBankPath$descriptor() {
        return FMOD_Studio_CommandReplay_SetBankPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetBankPath(FMOD_STUDIO_COMMANDREPLAY *replay, const char *bankPath)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_SetBankPath$handle() {
        return FMOD_Studio_CommandReplay_SetBankPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetBankPath(FMOD_STUDIO_COMMANDREPLAY *replay, const char *bankPath)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_SetBankPath$address() {
        return FMOD_Studio_CommandReplay_SetBankPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetBankPath(FMOD_STUDIO_COMMANDREPLAY *replay, const char *bankPath)
     * }
     */
    public static int FMOD_Studio_CommandReplay_SetBankPath(MemorySegment replay, MemorySegment bankPath) {
        var mh$ = FMOD_Studio_CommandReplay_SetBankPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_SetBankPath", replay, bankPath);
            }
            return (int)mh$.invokeExact(replay, bankPath);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_Start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_Start");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Start(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_Start$descriptor() {
        return FMOD_Studio_CommandReplay_Start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Start(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_Start$handle() {
        return FMOD_Studio_CommandReplay_Start.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Start(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_Start$address() {
        return FMOD_Studio_CommandReplay_Start.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Start(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static int FMOD_Studio_CommandReplay_Start(MemorySegment replay) {
        var mh$ = FMOD_Studio_CommandReplay_Start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_Start", replay);
            }
            return (int)mh$.invokeExact(replay);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_Stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_Stop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Stop(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_Stop$descriptor() {
        return FMOD_Studio_CommandReplay_Stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Stop(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_Stop$handle() {
        return FMOD_Studio_CommandReplay_Stop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Stop(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_Stop$address() {
        return FMOD_Studio_CommandReplay_Stop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Stop(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static int FMOD_Studio_CommandReplay_Stop(MemorySegment replay) {
        var mh$ = FMOD_Studio_CommandReplay_Stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_Stop", replay);
            }
            return (int)mh$.invokeExact(replay);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_SeekToTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_SeekToTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SeekToTime(FMOD_STUDIO_COMMANDREPLAY *replay, float time)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_SeekToTime$descriptor() {
        return FMOD_Studio_CommandReplay_SeekToTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SeekToTime(FMOD_STUDIO_COMMANDREPLAY *replay, float time)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_SeekToTime$handle() {
        return FMOD_Studio_CommandReplay_SeekToTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SeekToTime(FMOD_STUDIO_COMMANDREPLAY *replay, float time)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_SeekToTime$address() {
        return FMOD_Studio_CommandReplay_SeekToTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SeekToTime(FMOD_STUDIO_COMMANDREPLAY *replay, float time)
     * }
     */
    public static int FMOD_Studio_CommandReplay_SeekToTime(MemorySegment replay, float time) {
        var mh$ = FMOD_Studio_CommandReplay_SeekToTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_SeekToTime", replay, time);
            }
            return (int)mh$.invokeExact(replay, time);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_SeekToCommand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_SeekToCommand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SeekToCommand(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_SeekToCommand$descriptor() {
        return FMOD_Studio_CommandReplay_SeekToCommand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SeekToCommand(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_SeekToCommand$handle() {
        return FMOD_Studio_CommandReplay_SeekToCommand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SeekToCommand(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_SeekToCommand$address() {
        return FMOD_Studio_CommandReplay_SeekToCommand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SeekToCommand(FMOD_STUDIO_COMMANDREPLAY *replay, int commandindex)
     * }
     */
    public static int FMOD_Studio_CommandReplay_SeekToCommand(MemorySegment replay, int commandindex) {
        var mh$ = FMOD_Studio_CommandReplay_SeekToCommand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_SeekToCommand", replay, commandindex);
            }
            return (int)mh$.invokeExact(replay, commandindex);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_GetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_GetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetPaused(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_BOOL *paused)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_GetPaused$descriptor() {
        return FMOD_Studio_CommandReplay_GetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetPaused(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_BOOL *paused)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_GetPaused$handle() {
        return FMOD_Studio_CommandReplay_GetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetPaused(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_BOOL *paused)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_GetPaused$address() {
        return FMOD_Studio_CommandReplay_GetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetPaused(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_BOOL *paused)
     * }
     */
    public static int FMOD_Studio_CommandReplay_GetPaused(MemorySegment replay, MemorySegment paused) {
        var mh$ = FMOD_Studio_CommandReplay_GetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_GetPaused", replay, paused);
            }
            return (int)mh$.invokeExact(replay, paused);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_SetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_SetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetPaused(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_BOOL paused)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_SetPaused$descriptor() {
        return FMOD_Studio_CommandReplay_SetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetPaused(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_BOOL paused)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_SetPaused$handle() {
        return FMOD_Studio_CommandReplay_SetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetPaused(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_BOOL paused)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_SetPaused$address() {
        return FMOD_Studio_CommandReplay_SetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetPaused(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_BOOL paused)
     * }
     */
    public static int FMOD_Studio_CommandReplay_SetPaused(MemorySegment replay, int paused) {
        var mh$ = FMOD_Studio_CommandReplay_SetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_SetPaused", replay, paused);
            }
            return (int)mh$.invokeExact(replay, paused);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_GetPlaybackState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_GetPlaybackState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetPlaybackState(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_PLAYBACK_STATE *state)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_GetPlaybackState$descriptor() {
        return FMOD_Studio_CommandReplay_GetPlaybackState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetPlaybackState(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_PLAYBACK_STATE *state)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_GetPlaybackState$handle() {
        return FMOD_Studio_CommandReplay_GetPlaybackState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetPlaybackState(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_PLAYBACK_STATE *state)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_GetPlaybackState$address() {
        return FMOD_Studio_CommandReplay_GetPlaybackState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetPlaybackState(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_PLAYBACK_STATE *state)
     * }
     */
    public static int FMOD_Studio_CommandReplay_GetPlaybackState(MemorySegment replay, MemorySegment state) {
        var mh$ = FMOD_Studio_CommandReplay_GetPlaybackState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_GetPlaybackState", replay, state);
            }
            return (int)mh$.invokeExact(replay, state);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_GetCurrentCommand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_GetCurrentCommand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCurrentCommand(FMOD_STUDIO_COMMANDREPLAY *replay, int *commandindex, float *currenttime)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_GetCurrentCommand$descriptor() {
        return FMOD_Studio_CommandReplay_GetCurrentCommand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCurrentCommand(FMOD_STUDIO_COMMANDREPLAY *replay, int *commandindex, float *currenttime)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_GetCurrentCommand$handle() {
        return FMOD_Studio_CommandReplay_GetCurrentCommand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCurrentCommand(FMOD_STUDIO_COMMANDREPLAY *replay, int *commandindex, float *currenttime)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_GetCurrentCommand$address() {
        return FMOD_Studio_CommandReplay_GetCurrentCommand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetCurrentCommand(FMOD_STUDIO_COMMANDREPLAY *replay, int *commandindex, float *currenttime)
     * }
     */
    public static int FMOD_Studio_CommandReplay_GetCurrentCommand(MemorySegment replay, MemorySegment commandindex, MemorySegment currenttime) {
        var mh$ = FMOD_Studio_CommandReplay_GetCurrentCommand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_GetCurrentCommand", replay, commandindex, currenttime);
            }
            return (int)mh$.invokeExact(replay, commandindex, currenttime);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Release(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_Release$descriptor() {
        return FMOD_Studio_CommandReplay_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Release(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_Release$handle() {
        return FMOD_Studio_CommandReplay_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Release(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_Release$address() {
        return FMOD_Studio_CommandReplay_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_Release(FMOD_STUDIO_COMMANDREPLAY *replay)
     * }
     */
    public static int FMOD_Studio_CommandReplay_Release(MemorySegment replay) {
        var mh$ = FMOD_Studio_CommandReplay_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_Release", replay);
            }
            return (int)mh$.invokeExact(replay);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_SetFrameCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_SetFrameCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetFrameCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_FRAME_CALLBACK callback)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_SetFrameCallback$descriptor() {
        return FMOD_Studio_CommandReplay_SetFrameCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetFrameCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_FRAME_CALLBACK callback)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_SetFrameCallback$handle() {
        return FMOD_Studio_CommandReplay_SetFrameCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetFrameCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_FRAME_CALLBACK callback)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_SetFrameCallback$address() {
        return FMOD_Studio_CommandReplay_SetFrameCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetFrameCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_FRAME_CALLBACK callback)
     * }
     */
    public static int FMOD_Studio_CommandReplay_SetFrameCallback(MemorySegment replay, MemorySegment callback) {
        var mh$ = FMOD_Studio_CommandReplay_SetFrameCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_SetFrameCallback", replay, callback);
            }
            return (int)mh$.invokeExact(replay, callback);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_SetLoadBankCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_SetLoadBankCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetLoadBankCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_LOAD_BANK_CALLBACK callback)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_SetLoadBankCallback$descriptor() {
        return FMOD_Studio_CommandReplay_SetLoadBankCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetLoadBankCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_LOAD_BANK_CALLBACK callback)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_SetLoadBankCallback$handle() {
        return FMOD_Studio_CommandReplay_SetLoadBankCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetLoadBankCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_LOAD_BANK_CALLBACK callback)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_SetLoadBankCallback$address() {
        return FMOD_Studio_CommandReplay_SetLoadBankCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetLoadBankCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_LOAD_BANK_CALLBACK callback)
     * }
     */
    public static int FMOD_Studio_CommandReplay_SetLoadBankCallback(MemorySegment replay, MemorySegment callback) {
        var mh$ = FMOD_Studio_CommandReplay_SetLoadBankCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_SetLoadBankCallback", replay, callback);
            }
            return (int)mh$.invokeExact(replay, callback);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_SetCreateInstanceCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_SetCreateInstanceCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetCreateInstanceCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_CREATE_INSTANCE_CALLBACK callback)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_SetCreateInstanceCallback$descriptor() {
        return FMOD_Studio_CommandReplay_SetCreateInstanceCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetCreateInstanceCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_CREATE_INSTANCE_CALLBACK callback)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_SetCreateInstanceCallback$handle() {
        return FMOD_Studio_CommandReplay_SetCreateInstanceCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetCreateInstanceCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_CREATE_INSTANCE_CALLBACK callback)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_SetCreateInstanceCallback$address() {
        return FMOD_Studio_CommandReplay_SetCreateInstanceCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetCreateInstanceCallback(FMOD_STUDIO_COMMANDREPLAY *replay, FMOD_STUDIO_COMMANDREPLAY_CREATE_INSTANCE_CALLBACK callback)
     * }
     */
    public static int FMOD_Studio_CommandReplay_SetCreateInstanceCallback(MemorySegment replay, MemorySegment callback) {
        var mh$ = FMOD_Studio_CommandReplay_SetCreateInstanceCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_SetCreateInstanceCallback", replay, callback);
            }
            return (int)mh$.invokeExact(replay, callback);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetUserData(FMOD_STUDIO_COMMANDREPLAY *replay, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_GetUserData$descriptor() {
        return FMOD_Studio_CommandReplay_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetUserData(FMOD_STUDIO_COMMANDREPLAY *replay, void **userdata)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_GetUserData$handle() {
        return FMOD_Studio_CommandReplay_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetUserData(FMOD_STUDIO_COMMANDREPLAY *replay, void **userdata)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_GetUserData$address() {
        return FMOD_Studio_CommandReplay_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_GetUserData(FMOD_STUDIO_COMMANDREPLAY *replay, void **userdata)
     * }
     */
    public static int FMOD_Studio_CommandReplay_GetUserData(MemorySegment replay, MemorySegment userdata) {
        var mh$ = FMOD_Studio_CommandReplay_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_GetUserData", replay, userdata);
            }
            return (int)mh$.invokeExact(replay, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Studio_CommandReplay_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("FMOD_Studio_CommandReplay_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetUserData(FMOD_STUDIO_COMMANDREPLAY *replay, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Studio_CommandReplay_SetUserData$descriptor() {
        return FMOD_Studio_CommandReplay_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetUserData(FMOD_STUDIO_COMMANDREPLAY *replay, void *userdata)
     * }
     */
    public static MethodHandle FMOD_Studio_CommandReplay_SetUserData$handle() {
        return FMOD_Studio_CommandReplay_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetUserData(FMOD_STUDIO_COMMANDREPLAY *replay, void *userdata)
     * }
     */
    public static MemorySegment FMOD_Studio_CommandReplay_SetUserData$address() {
        return FMOD_Studio_CommandReplay_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Studio_CommandReplay_SetUserData(FMOD_STUDIO_COMMANDREPLAY *replay, void *userdata)
     * }
     */
    public static int FMOD_Studio_CommandReplay_SetUserData(MemorySegment replay, MemorySegment userdata) {
        var mh$ = FMOD_Studio_CommandReplay_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Studio_CommandReplay_SetUserData", replay, userdata);
            }
            return (int)mh$.invokeExact(replay, userdata);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FMOD_MEMORY_ALL = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MEMORY_ALL 4294967295
     * }
     */
    public static int FMOD_MEMORY_ALL() {
        return FMOD_MEMORY_ALL;
    }
    private static final int FMOD_SYSTEM_CALLBACK_ALL = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_ALL 4294967295
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_ALL() {
        return FMOD_SYSTEM_CALLBACK_ALL;
    }
    private static final int FMOD_VIRTUAL_PLAYFROMSTART = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define FMOD_VIRTUAL_PLAYFROMSTART 2147483648
     * }
     */
    public static int FMOD_VIRTUAL_PLAYFROMSTART() {
        return FMOD_VIRTUAL_PLAYFROMSTART;
    }
    private static final int FMOD_CHANNELMASK_MONO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_MONO 1
     * }
     */
    public static int FMOD_CHANNELMASK_MONO() {
        return FMOD_CHANNELMASK_MONO;
    }
    private static final int FMOD_CHANNELMASK_STEREO = (int)3L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_STEREO 3
     * }
     */
    public static int FMOD_CHANNELMASK_STEREO() {
        return FMOD_CHANNELMASK_STEREO;
    }
    private static final int FMOD_CHANNELMASK_LRC = (int)7L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_LRC 7
     * }
     */
    public static int FMOD_CHANNELMASK_LRC() {
        return FMOD_CHANNELMASK_LRC;
    }
    private static final int FMOD_CHANNELMASK_QUAD = (int)51L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_QUAD 51
     * }
     */
    public static int FMOD_CHANNELMASK_QUAD() {
        return FMOD_CHANNELMASK_QUAD;
    }
    private static final int FMOD_CHANNELMASK_SURROUND = (int)55L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_SURROUND 55
     * }
     */
    public static int FMOD_CHANNELMASK_SURROUND() {
        return FMOD_CHANNELMASK_SURROUND;
    }
    private static final int FMOD_CHANNELMASK_5POINT1 = (int)63L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_5POINT1 63
     * }
     */
    public static int FMOD_CHANNELMASK_5POINT1() {
        return FMOD_CHANNELMASK_5POINT1;
    }
    private static final int FMOD_CHANNELMASK_5POINT1_REARS = (int)207L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_5POINT1_REARS 207
     * }
     */
    public static int FMOD_CHANNELMASK_5POINT1_REARS() {
        return FMOD_CHANNELMASK_5POINT1_REARS;
    }
    private static final int FMOD_CHANNELMASK_7POINT0 = (int)247L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_7POINT0 247
     * }
     */
    public static int FMOD_CHANNELMASK_7POINT0() {
        return FMOD_CHANNELMASK_7POINT0;
    }
    private static final int FMOD_CHANNELMASK_7POINT1 = (int)255L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_7POINT1 255
     * }
     */
    public static int FMOD_CHANNELMASK_7POINT1() {
        return FMOD_CHANNELMASK_7POINT1;
    }
    private static final long FMOD_PORT_INDEX_NONE = -1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_PORT_INDEX_NONE -1
     * }
     */
    public static long FMOD_PORT_INDEX_NONE() {
        return FMOD_PORT_INDEX_NONE;
    }
    private static final int FMOD_THREAD_PRIORITY_PLATFORM_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_PLATFORM_MIN -32768
     * }
     */
    public static int FMOD_THREAD_PRIORITY_PLATFORM_MIN() {
        return FMOD_THREAD_PRIORITY_PLATFORM_MIN;
    }
    private static final int FMOD_THREAD_PRIORITY_PLATFORM_MAX = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_PLATFORM_MAX 32768
     * }
     */
    public static int FMOD_THREAD_PRIORITY_PLATFORM_MAX() {
        return FMOD_THREAD_PRIORITY_PLATFORM_MAX;
    }
    private static final int FMOD_THREAD_PRIORITY_DEFAULT = (int)-32769L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_DEFAULT -32769
     * }
     */
    public static int FMOD_THREAD_PRIORITY_DEFAULT() {
        return FMOD_THREAD_PRIORITY_DEFAULT;
    }
    private static final int FMOD_THREAD_PRIORITY_LOW = (int)-32770L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_LOW -32770
     * }
     */
    public static int FMOD_THREAD_PRIORITY_LOW() {
        return FMOD_THREAD_PRIORITY_LOW;
    }
    private static final int FMOD_THREAD_PRIORITY_MEDIUM = (int)-32771L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_MEDIUM -32771
     * }
     */
    public static int FMOD_THREAD_PRIORITY_MEDIUM() {
        return FMOD_THREAD_PRIORITY_MEDIUM;
    }
    private static final int FMOD_THREAD_PRIORITY_HIGH = (int)-32772L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_HIGH -32772
     * }
     */
    public static int FMOD_THREAD_PRIORITY_HIGH() {
        return FMOD_THREAD_PRIORITY_HIGH;
    }
    private static final int FMOD_THREAD_PRIORITY_VERY_HIGH = (int)-32773L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_VERY_HIGH -32773
     * }
     */
    public static int FMOD_THREAD_PRIORITY_VERY_HIGH() {
        return FMOD_THREAD_PRIORITY_VERY_HIGH;
    }
    private static final int FMOD_THREAD_PRIORITY_EXTREME = (int)-32774L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_EXTREME -32774
     * }
     */
    public static int FMOD_THREAD_PRIORITY_EXTREME() {
        return FMOD_THREAD_PRIORITY_EXTREME;
    }
    private static final int FMOD_THREAD_PRIORITY_CRITICAL = (int)-32775L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_CRITICAL -32775
     * }
     */
    public static int FMOD_THREAD_PRIORITY_CRITICAL() {
        return FMOD_THREAD_PRIORITY_CRITICAL;
    }
    private static final int FMOD_THREAD_PRIORITY_MIXER = (int)-32774L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_MIXER -32774
     * }
     */
    public static int FMOD_THREAD_PRIORITY_MIXER() {
        return FMOD_THREAD_PRIORITY_MIXER;
    }
    private static final int FMOD_THREAD_PRIORITY_FEEDER = (int)-32775L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_FEEDER -32775
     * }
     */
    public static int FMOD_THREAD_PRIORITY_FEEDER() {
        return FMOD_THREAD_PRIORITY_FEEDER;
    }
    private static final int FMOD_THREAD_PRIORITY_STREAM = (int)-32773L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_STREAM -32773
     * }
     */
    public static int FMOD_THREAD_PRIORITY_STREAM() {
        return FMOD_THREAD_PRIORITY_STREAM;
    }
    private static final int FMOD_THREAD_PRIORITY_FILE = (int)-32772L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_FILE -32772
     * }
     */
    public static int FMOD_THREAD_PRIORITY_FILE() {
        return FMOD_THREAD_PRIORITY_FILE;
    }
    private static final int FMOD_THREAD_PRIORITY_NONBLOCKING = (int)-32772L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_NONBLOCKING -32772
     * }
     */
    public static int FMOD_THREAD_PRIORITY_NONBLOCKING() {
        return FMOD_THREAD_PRIORITY_NONBLOCKING;
    }
    private static final int FMOD_THREAD_PRIORITY_RECORD = (int)-32772L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_RECORD -32772
     * }
     */
    public static int FMOD_THREAD_PRIORITY_RECORD() {
        return FMOD_THREAD_PRIORITY_RECORD;
    }
    private static final int FMOD_THREAD_PRIORITY_GEOMETRY = (int)-32770L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_GEOMETRY -32770
     * }
     */
    public static int FMOD_THREAD_PRIORITY_GEOMETRY() {
        return FMOD_THREAD_PRIORITY_GEOMETRY;
    }
    private static final int FMOD_THREAD_PRIORITY_PROFILER = (int)-32771L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_PROFILER -32771
     * }
     */
    public static int FMOD_THREAD_PRIORITY_PROFILER() {
        return FMOD_THREAD_PRIORITY_PROFILER;
    }
    private static final int FMOD_THREAD_PRIORITY_STUDIO_UPDATE = (int)-32771L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_STUDIO_UPDATE -32771
     * }
     */
    public static int FMOD_THREAD_PRIORITY_STUDIO_UPDATE() {
        return FMOD_THREAD_PRIORITY_STUDIO_UPDATE;
    }
    private static final int FMOD_THREAD_PRIORITY_STUDIO_LOAD_BANK = (int)-32771L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_STUDIO_LOAD_BANK -32771
     * }
     */
    public static int FMOD_THREAD_PRIORITY_STUDIO_LOAD_BANK() {
        return FMOD_THREAD_PRIORITY_STUDIO_LOAD_BANK;
    }
    private static final int FMOD_THREAD_PRIORITY_STUDIO_LOAD_SAMPLE = (int)-32771L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_STUDIO_LOAD_SAMPLE -32771
     * }
     */
    public static int FMOD_THREAD_PRIORITY_STUDIO_LOAD_SAMPLE() {
        return FMOD_THREAD_PRIORITY_STUDIO_LOAD_SAMPLE;
    }
    private static final int FMOD_THREAD_PRIORITY_CONVOLUTION1 = (int)-32773L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_CONVOLUTION1 -32773
     * }
     */
    public static int FMOD_THREAD_PRIORITY_CONVOLUTION1() {
        return FMOD_THREAD_PRIORITY_CONVOLUTION1;
    }
    private static final int FMOD_THREAD_PRIORITY_CONVOLUTION2 = (int)-32773L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_PRIORITY_CONVOLUTION2 -32773
     * }
     */
    public static int FMOD_THREAD_PRIORITY_CONVOLUTION2() {
        return FMOD_THREAD_PRIORITY_CONVOLUTION2;
    }
    private static final int FMOD_THREAD_STACK_SIZE_MIXER = (int)81920L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_MIXER 81920
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_MIXER() {
        return FMOD_THREAD_STACK_SIZE_MIXER;
    }
    private static final int FMOD_THREAD_STACK_SIZE_FEEDER = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_FEEDER 16384
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_FEEDER() {
        return FMOD_THREAD_STACK_SIZE_FEEDER;
    }
    private static final int FMOD_THREAD_STACK_SIZE_STREAM = (int)98304L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_STREAM 98304
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_STREAM() {
        return FMOD_THREAD_STACK_SIZE_STREAM;
    }
    private static final int FMOD_THREAD_STACK_SIZE_FILE = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_FILE 65536
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_FILE() {
        return FMOD_THREAD_STACK_SIZE_FILE;
    }
    private static final int FMOD_THREAD_STACK_SIZE_NONBLOCKING = (int)114688L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_NONBLOCKING 114688
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_NONBLOCKING() {
        return FMOD_THREAD_STACK_SIZE_NONBLOCKING;
    }
    private static final int FMOD_THREAD_STACK_SIZE_RECORD = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_RECORD 16384
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_RECORD() {
        return FMOD_THREAD_STACK_SIZE_RECORD;
    }
    private static final int FMOD_THREAD_STACK_SIZE_GEOMETRY = (int)49152L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_GEOMETRY 49152
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_GEOMETRY() {
        return FMOD_THREAD_STACK_SIZE_GEOMETRY;
    }
    private static final int FMOD_THREAD_STACK_SIZE_PROFILER = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_PROFILER 131072
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_PROFILER() {
        return FMOD_THREAD_STACK_SIZE_PROFILER;
    }
    private static final int FMOD_THREAD_STACK_SIZE_STUDIO_UPDATE = (int)98304L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_STUDIO_UPDATE 98304
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_STUDIO_UPDATE() {
        return FMOD_THREAD_STACK_SIZE_STUDIO_UPDATE;
    }
    private static final int FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_BANK = (int)98304L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_BANK 98304
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_BANK() {
        return FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_BANK;
    }
    private static final int FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_SAMPLE = (int)98304L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_SAMPLE 98304
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_SAMPLE() {
        return FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_SAMPLE;
    }
    private static final int FMOD_THREAD_STACK_SIZE_CONVOLUTION1 = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_CONVOLUTION1 16384
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_CONVOLUTION1() {
        return FMOD_THREAD_STACK_SIZE_CONVOLUTION1;
    }
    private static final int FMOD_THREAD_STACK_SIZE_CONVOLUTION2 = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_CONVOLUTION2 16384
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_CONVOLUTION2() {
        return FMOD_THREAD_STACK_SIZE_CONVOLUTION2;
    }
    private static final long FMOD_THREAD_AFFINITY_GROUP_DEFAULT = 4611686018427387904L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_GROUP_DEFAULT 4611686018427387904
     * }
     */
    public static long FMOD_THREAD_AFFINITY_GROUP_DEFAULT() {
        return FMOD_THREAD_AFFINITY_GROUP_DEFAULT;
    }
    private static final long FMOD_THREAD_AFFINITY_GROUP_A = 4611686018427387905L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_GROUP_A 4611686018427387905
     * }
     */
    public static long FMOD_THREAD_AFFINITY_GROUP_A() {
        return FMOD_THREAD_AFFINITY_GROUP_A;
    }
    private static final long FMOD_THREAD_AFFINITY_GROUP_B = 4611686018427387906L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_GROUP_B 4611686018427387906
     * }
     */
    public static long FMOD_THREAD_AFFINITY_GROUP_B() {
        return FMOD_THREAD_AFFINITY_GROUP_B;
    }
    private static final long FMOD_THREAD_AFFINITY_GROUP_C = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_GROUP_C 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_GROUP_C() {
        return FMOD_THREAD_AFFINITY_GROUP_C;
    }
    private static final long FMOD_THREAD_AFFINITY_MIXER = 4611686018427387905L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_MIXER 4611686018427387905
     * }
     */
    public static long FMOD_THREAD_AFFINITY_MIXER() {
        return FMOD_THREAD_AFFINITY_MIXER;
    }
    private static final long FMOD_THREAD_AFFINITY_FEEDER = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_FEEDER 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_FEEDER() {
        return FMOD_THREAD_AFFINITY_FEEDER;
    }
    private static final long FMOD_THREAD_AFFINITY_STREAM = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_STREAM 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_STREAM() {
        return FMOD_THREAD_AFFINITY_STREAM;
    }
    private static final long FMOD_THREAD_AFFINITY_FILE = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_FILE 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_FILE() {
        return FMOD_THREAD_AFFINITY_FILE;
    }
    private static final long FMOD_THREAD_AFFINITY_NONBLOCKING = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_NONBLOCKING 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_NONBLOCKING() {
        return FMOD_THREAD_AFFINITY_NONBLOCKING;
    }
    private static final long FMOD_THREAD_AFFINITY_RECORD = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_RECORD 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_RECORD() {
        return FMOD_THREAD_AFFINITY_RECORD;
    }
    private static final long FMOD_THREAD_AFFINITY_GEOMETRY = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_GEOMETRY 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_GEOMETRY() {
        return FMOD_THREAD_AFFINITY_GEOMETRY;
    }
    private static final long FMOD_THREAD_AFFINITY_PROFILER = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_PROFILER 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_PROFILER() {
        return FMOD_THREAD_AFFINITY_PROFILER;
    }
    private static final long FMOD_THREAD_AFFINITY_STUDIO_UPDATE = 4611686018427387906L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_STUDIO_UPDATE 4611686018427387906
     * }
     */
    public static long FMOD_THREAD_AFFINITY_STUDIO_UPDATE() {
        return FMOD_THREAD_AFFINITY_STUDIO_UPDATE;
    }
    private static final long FMOD_THREAD_AFFINITY_STUDIO_LOAD_BANK = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_STUDIO_LOAD_BANK 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_STUDIO_LOAD_BANK() {
        return FMOD_THREAD_AFFINITY_STUDIO_LOAD_BANK;
    }
    private static final long FMOD_THREAD_AFFINITY_STUDIO_LOAD_SAMPLE = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_STUDIO_LOAD_SAMPLE 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_STUDIO_LOAD_SAMPLE() {
        return FMOD_THREAD_AFFINITY_STUDIO_LOAD_SAMPLE;
    }
    private static final long FMOD_THREAD_AFFINITY_CONVOLUTION1 = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CONVOLUTION1 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_CONVOLUTION1() {
        return FMOD_THREAD_AFFINITY_CONVOLUTION1;
    }
    private static final long FMOD_THREAD_AFFINITY_CONVOLUTION2 = 4611686018427387907L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CONVOLUTION2 4611686018427387907
     * }
     */
    public static long FMOD_THREAD_AFFINITY_CONVOLUTION2() {
        return FMOD_THREAD_AFFINITY_CONVOLUTION2;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_0 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_0 1
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_0() {
        return FMOD_THREAD_AFFINITY_CORE_0;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_1 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_1 2
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_1() {
        return FMOD_THREAD_AFFINITY_CORE_1;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_2 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_2 4
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_2() {
        return FMOD_THREAD_AFFINITY_CORE_2;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_3 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_3 8
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_3() {
        return FMOD_THREAD_AFFINITY_CORE_3;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_4 = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_4 16
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_4() {
        return FMOD_THREAD_AFFINITY_CORE_4;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_5 = (int)32L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_5 32
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_5() {
        return FMOD_THREAD_AFFINITY_CORE_5;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_6 = (int)64L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_6 64
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_6() {
        return FMOD_THREAD_AFFINITY_CORE_6;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_7 = (int)128L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_7 128
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_7() {
        return FMOD_THREAD_AFFINITY_CORE_7;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_8 = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_8 256
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_8() {
        return FMOD_THREAD_AFFINITY_CORE_8;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_9 = (int)512L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_9 512
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_9() {
        return FMOD_THREAD_AFFINITY_CORE_9;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_10 = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_10 1024
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_10() {
        return FMOD_THREAD_AFFINITY_CORE_10;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_11 = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_11 2048
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_11() {
        return FMOD_THREAD_AFFINITY_CORE_11;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_12 = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_12 4096
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_12() {
        return FMOD_THREAD_AFFINITY_CORE_12;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_13 = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_13 8192
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_13() {
        return FMOD_THREAD_AFFINITY_CORE_13;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_14 = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_14 16384
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_14() {
        return FMOD_THREAD_AFFINITY_CORE_14;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_15 = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_15 32768
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_15() {
        return FMOD_THREAD_AFFINITY_CORE_15;
    }
    private static final int FMOD_STUDIO_SYSTEM_CALLBACK_ALL = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define FMOD_STUDIO_SYSTEM_CALLBACK_ALL 4294967295
     * }
     */
    public static int FMOD_STUDIO_SYSTEM_CALLBACK_ALL() {
        return FMOD_STUDIO_SYSTEM_CALLBACK_ALL;
    }
    private static final int FMOD_STUDIO_EVENT_CALLBACK_ALL = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define FMOD_STUDIO_EVENT_CALLBACK_ALL 4294967295
     * }
     */
    public static int FMOD_STUDIO_EVENT_CALLBACK_ALL() {
        return FMOD_STUDIO_EVENT_CALLBACK_ALL;
    }
}

