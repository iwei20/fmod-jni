// Generated by jextract

package com.iwei20.fmod.gen.fmodstudio;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_STUDIO_PARAMETER_DESCRIPTION {
 *     const char *name;
 *     FMOD_STUDIO_PARAMETER_ID id;
 *     float minimum;
 *     float maximum;
 *     float defaultvalue;
 *     FMOD_STUDIO_PARAMETER_TYPE type;
 *     FMOD_STUDIO_PARAMETER_FLAGS flags;
 *     FMOD_GUID guid;
 * }
 * }
 */
public class FMOD_STUDIO_PARAMETER_DESCRIPTION {

    FMOD_STUDIO_PARAMETER_DESCRIPTION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_studio_h.C_POINTER.withName("name"),
        FMOD_STUDIO_PARAMETER_ID.layout().withName("id"),
        fmod_studio_h.C_FLOAT.withName("minimum"),
        fmod_studio_h.C_FLOAT.withName("maximum"),
        fmod_studio_h.C_FLOAT.withName("defaultvalue"),
        fmod_studio_h.C_INT.withName("type"),
        fmod_studio_h.C_INT.withName("flags"),
        FMOD_GUID.layout().withName("guid"),
        MemoryLayout.paddingLayout(4)
    ).withName("FMOD_STUDIO_PARAMETER_DESCRIPTION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = $LAYOUT.byteOffset(groupElement("name"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final GroupLayout id$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_ID id
     * }
     */
    public static final GroupLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = $LAYOUT.byteOffset(groupElement("id"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_ID id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_ID id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.asSlice(id$OFFSET, id$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_ID id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, id$OFFSET, id$LAYOUT.byteSize());
    }

    private static final OfFloat minimum$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("minimum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float minimum
     * }
     */
    public static final OfFloat minimum$layout() {
        return minimum$LAYOUT;
    }

    private static final long minimum$OFFSET = $LAYOUT.byteOffset(groupElement("minimum"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float minimum
     * }
     */
    public static final long minimum$offset() {
        return minimum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float minimum
     * }
     */
    public static float minimum(MemorySegment struct) {
        return struct.get(minimum$LAYOUT, minimum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float minimum
     * }
     */
    public static void minimum(MemorySegment struct, float fieldValue) {
        struct.set(minimum$LAYOUT, minimum$OFFSET, fieldValue);
    }

    private static final OfFloat maximum$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maximum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maximum
     * }
     */
    public static final OfFloat maximum$layout() {
        return maximum$LAYOUT;
    }

    private static final long maximum$OFFSET = $LAYOUT.byteOffset(groupElement("maximum"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maximum
     * }
     */
    public static final long maximum$offset() {
        return maximum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maximum
     * }
     */
    public static float maximum(MemorySegment struct) {
        return struct.get(maximum$LAYOUT, maximum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maximum
     * }
     */
    public static void maximum(MemorySegment struct, float fieldValue) {
        struct.set(maximum$LAYOUT, maximum$OFFSET, fieldValue);
    }

    private static final OfFloat defaultvalue$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("defaultvalue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float defaultvalue
     * }
     */
    public static final OfFloat defaultvalue$layout() {
        return defaultvalue$LAYOUT;
    }

    private static final long defaultvalue$OFFSET = $LAYOUT.byteOffset(groupElement("defaultvalue"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float defaultvalue
     * }
     */
    public static final long defaultvalue$offset() {
        return defaultvalue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float defaultvalue
     * }
     */
    public static float defaultvalue(MemorySegment struct) {
        return struct.get(defaultvalue$LAYOUT, defaultvalue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float defaultvalue
     * }
     */
    public static void defaultvalue(MemorySegment struct, float fieldValue) {
        struct.set(defaultvalue$LAYOUT, defaultvalue$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_TYPE type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = $LAYOUT.byteOffset(groupElement("type"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_TYPE type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_TYPE type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_TYPE type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_FLAGS flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = $LAYOUT.byteOffset(groupElement("flags"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_FLAGS flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_FLAGS flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_STUDIO_PARAMETER_FLAGS flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final GroupLayout guid$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("guid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_GUID guid
     * }
     */
    public static final GroupLayout guid$layout() {
        return guid$LAYOUT;
    }

    private static final long guid$OFFSET = $LAYOUT.byteOffset(groupElement("guid"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_GUID guid
     * }
     */
    public static final long guid$offset() {
        return guid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_GUID guid
     * }
     */
    public static MemorySegment guid(MemorySegment struct) {
        return struct.asSlice(guid$OFFSET, guid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_GUID guid
     * }
     */
    public static void guid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, guid$OFFSET, guid$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

