// Generated by jextract

package com.iwei20.fmod.gen.fmodstudio;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_STUDIO_SOUND_INFO {
 *     const char *name_or_data;
 *     FMOD_MODE mode;
 *     FMOD_CREATESOUNDEXINFO exinfo;
 *     int subsoundindex;
 * }
 * }
 */
public class FMOD_STUDIO_SOUND_INFO {

    FMOD_STUDIO_SOUND_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_studio_h.C_POINTER.withName("name_or_data"),
        fmod_studio_h.C_INT.withName("mode"),
        MemoryLayout.paddingLayout(4),
        FMOD_CREATESOUNDEXINFO.layout().withName("exinfo"),
        fmod_studio_h.C_INT.withName("subsoundindex"),
        MemoryLayout.paddingLayout(4)
    ).withName("FMOD_STUDIO_SOUND_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name_or_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name_or_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name_or_data
     * }
     */
    public static final AddressLayout name_or_data$layout() {
        return name_or_data$LAYOUT;
    }

    private static final long name_or_data$OFFSET = $LAYOUT.byteOffset(groupElement("name_or_data"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name_or_data
     * }
     */
    public static final long name_or_data$offset() {
        return name_or_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name_or_data
     * }
     */
    public static MemorySegment name_or_data(MemorySegment struct) {
        return struct.get(name_or_data$LAYOUT, name_or_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name_or_data
     * }
     */
    public static void name_or_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name_or_data$LAYOUT, name_or_data$OFFSET, fieldValue);
    }

    private static final OfInt mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_MODE mode
     * }
     */
    public static final OfInt mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = $LAYOUT.byteOffset(groupElement("mode"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_MODE mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_MODE mode
     * }
     */
    public static int mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_MODE mode
     * }
     */
    public static void mode(MemorySegment struct, int fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final GroupLayout exinfo$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("exinfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CREATESOUNDEXINFO exinfo
     * }
     */
    public static final GroupLayout exinfo$layout() {
        return exinfo$LAYOUT;
    }

    private static final long exinfo$OFFSET = $LAYOUT.byteOffset(groupElement("exinfo"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CREATESOUNDEXINFO exinfo
     * }
     */
    public static final long exinfo$offset() {
        return exinfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CREATESOUNDEXINFO exinfo
     * }
     */
    public static MemorySegment exinfo(MemorySegment struct) {
        return struct.asSlice(exinfo$OFFSET, exinfo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CREATESOUNDEXINFO exinfo
     * }
     */
    public static void exinfo(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, exinfo$OFFSET, exinfo$LAYOUT.byteSize());
    }

    private static final OfInt subsoundindex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subsoundindex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int subsoundindex
     * }
     */
    public static final OfInt subsoundindex$layout() {
        return subsoundindex$LAYOUT;
    }

    private static final long subsoundindex$OFFSET = $LAYOUT.byteOffset(groupElement("subsoundindex"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int subsoundindex
     * }
     */
    public static final long subsoundindex$offset() {
        return subsoundindex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int subsoundindex
     * }
     */
    public static int subsoundindex(MemorySegment struct) {
        return struct.get(subsoundindex$LAYOUT, subsoundindex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int subsoundindex
     * }
     */
    public static void subsoundindex(MemorySegment struct, int fieldValue) {
        struct.set(subsoundindex$LAYOUT, subsoundindex$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

