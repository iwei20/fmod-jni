// Generated by jextract

package com.iwei20.fmod.gen.fmod;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_ASYNCREADINFO {
 *     void *handle;
 *     unsigned int offset;
 *     unsigned int sizebytes;
 *     int priority;
 *     void *userdata;
 *     void *buffer;
 *     unsigned int bytesread;
 *     FMOD_FILE_ASYNCDONE_FUNC done;
 * }
 * }
 */
public class FMOD_ASYNCREADINFO {

    FMOD_ASYNCREADINFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_h.C_POINTER.withName("handle"),
        fmod_h.C_INT.withName("offset"),
        fmod_h.C_INT.withName("sizebytes"),
        fmod_h.C_INT.withName("priority"),
        MemoryLayout.paddingLayout(4),
        fmod_h.C_POINTER.withName("userdata"),
        fmod_h.C_POINTER.withName("buffer"),
        fmod_h.C_INT.withName("bytesread"),
        MemoryLayout.paddingLayout(4),
        fmod_h.C_POINTER.withName("done")
    ).withName("FMOD_ASYNCREADINFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout handle$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("handle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *handle
     * }
     */
    public static final AddressLayout handle$layout() {
        return handle$LAYOUT;
    }

    private static final long handle$OFFSET = $LAYOUT.byteOffset(groupElement("handle"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *handle
     * }
     */
    public static final long handle$offset() {
        return handle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *handle
     * }
     */
    public static MemorySegment handle(MemorySegment struct) {
        return struct.get(handle$LAYOUT, handle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *handle
     * }
     */
    public static void handle(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(handle$LAYOUT, handle$OFFSET, fieldValue);
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = $LAYOUT.byteOffset(groupElement("offset"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt sizebytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sizebytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int sizebytes
     * }
     */
    public static final OfInt sizebytes$layout() {
        return sizebytes$LAYOUT;
    }

    private static final long sizebytes$OFFSET = $LAYOUT.byteOffset(groupElement("sizebytes"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int sizebytes
     * }
     */
    public static final long sizebytes$offset() {
        return sizebytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int sizebytes
     * }
     */
    public static int sizebytes(MemorySegment struct) {
        return struct.get(sizebytes$LAYOUT, sizebytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int sizebytes
     * }
     */
    public static void sizebytes(MemorySegment struct, int fieldValue) {
        struct.set(sizebytes$LAYOUT, sizebytes$OFFSET, fieldValue);
    }

    private static final OfInt priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int priority
     * }
     */
    public static final OfInt priority$layout() {
        return priority$LAYOUT;
    }

    private static final long priority$OFFSET = $LAYOUT.byteOffset(groupElement("priority"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int priority
     * }
     */
    public static final long priority$offset() {
        return priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int priority
     * }
     */
    public static int priority(MemorySegment struct) {
        return struct.get(priority$LAYOUT, priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int priority
     * }
     */
    public static void priority(MemorySegment struct, int fieldValue) {
        struct.set(priority$LAYOUT, priority$OFFSET, fieldValue);
    }

    private static final AddressLayout userdata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userdata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static final AddressLayout userdata$layout() {
        return userdata$LAYOUT;
    }

    private static final long userdata$OFFSET = $LAYOUT.byteOffset(groupElement("userdata"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static final long userdata$offset() {
        return userdata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static MemorySegment userdata(MemorySegment struct) {
        return struct.get(userdata$LAYOUT, userdata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static void userdata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userdata$LAYOUT, userdata$OFFSET, fieldValue);
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = $LAYOUT.byteOffset(groupElement("buffer"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final OfInt bytesread$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bytesread"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int bytesread
     * }
     */
    public static final OfInt bytesread$layout() {
        return bytesread$LAYOUT;
    }

    private static final long bytesread$OFFSET = $LAYOUT.byteOffset(groupElement("bytesread"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int bytesread
     * }
     */
    public static final long bytesread$offset() {
        return bytesread$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int bytesread
     * }
     */
    public static int bytesread(MemorySegment struct) {
        return struct.get(bytesread$LAYOUT, bytesread$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int bytesread
     * }
     */
    public static void bytesread(MemorySegment struct, int fieldValue) {
        struct.set(bytesread$LAYOUT, bytesread$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_FILE_ASYNCDONE_FUNC done
     * }
     */
    public final static class done {

        private done() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            fmod_h.C_POINTER,
            fmod_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_h.upcallHandle(done.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(done.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout done$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("done"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_FILE_ASYNCDONE_FUNC done
     * }
     */
    public static final AddressLayout done$layout() {
        return done$LAYOUT;
    }

    private static final long done$OFFSET = $LAYOUT.byteOffset(groupElement("done"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_FILE_ASYNCDONE_FUNC done
     * }
     */
    public static final long done$offset() {
        return done$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_FILE_ASYNCDONE_FUNC done
     * }
     */
    public static MemorySegment done(MemorySegment struct) {
        return struct.get(done$LAYOUT, done$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_FILE_ASYNCDONE_FUNC done
     * }
     */
    public static void done(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(done$LAYOUT, done$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

