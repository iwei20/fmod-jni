// Generated by jextract

package com.iwei20.fmod.gen.fmodstudio;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_DSP_STATE_PAN_FUNCTIONS {
 *     FMOD_DSP_PAN_SUMMONOMATRIX_FUNC summonomatrix;
 *     FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC sumstereomatrix;
 *     FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC sumsurroundmatrix;
 *     FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC summonotosurroundmatrix;
 *     FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC sumstereotosurroundmatrix;
 *     FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC getrolloffgain;
 * }
 * }
 */
public class FMOD_DSP_STATE_PAN_FUNCTIONS {

    FMOD_DSP_STATE_PAN_FUNCTIONS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_studio_h.C_POINTER.withName("summonomatrix"),
        fmod_studio_h.C_POINTER.withName("sumstereomatrix"),
        fmod_studio_h.C_POINTER.withName("sumsurroundmatrix"),
        fmod_studio_h.C_POINTER.withName("summonotosurroundmatrix"),
        fmod_studio_h.C_POINTER.withName("sumstereotosurroundmatrix"),
        fmod_studio_h.C_POINTER.withName("getrolloffgain")
    ).withName("FMOD_DSP_STATE_PAN_FUNCTIONS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMMONOMATRIX_FUNC summonomatrix
     * }
     */
    public final static class summonomatrix {

        private summonomatrix() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, float _x2, float _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(summonomatrix.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(summonomatrix.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, float _x2, float _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout summonomatrix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("summonomatrix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMMONOMATRIX_FUNC summonomatrix
     * }
     */
    public static final AddressLayout summonomatrix$layout() {
        return summonomatrix$LAYOUT;
    }

    private static final long summonomatrix$OFFSET = $LAYOUT.byteOffset(groupElement("summonomatrix"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMMONOMATRIX_FUNC summonomatrix
     * }
     */
    public static final long summonomatrix$offset() {
        return summonomatrix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMMONOMATRIX_FUNC summonomatrix
     * }
     */
    public static MemorySegment summonomatrix(MemorySegment struct) {
        return struct.get(summonomatrix$LAYOUT, summonomatrix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMMONOMATRIX_FUNC summonomatrix
     * }
     */
    public static void summonomatrix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(summonomatrix$LAYOUT, summonomatrix$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC sumstereomatrix
     * }
     */
    public final static class sumstereomatrix {

        private sumstereomatrix() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, float _x2, float _x3, float _x4, int _x5, MemorySegment _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(sumstereomatrix.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(sumstereomatrix.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, float _x2, float _x3, float _x4, int _x5, MemorySegment _x6) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout sumstereomatrix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sumstereomatrix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC sumstereomatrix
     * }
     */
    public static final AddressLayout sumstereomatrix$layout() {
        return sumstereomatrix$LAYOUT;
    }

    private static final long sumstereomatrix$OFFSET = $LAYOUT.byteOffset(groupElement("sumstereomatrix"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC sumstereomatrix
     * }
     */
    public static final long sumstereomatrix$offset() {
        return sumstereomatrix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC sumstereomatrix
     * }
     */
    public static MemorySegment sumstereomatrix(MemorySegment struct) {
        return struct.get(sumstereomatrix$LAYOUT, sumstereomatrix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC sumstereomatrix
     * }
     */
    public static void sumstereomatrix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sumstereomatrix$LAYOUT, sumstereomatrix$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC sumsurroundmatrix
     * }
     */
    public final static class sumsurroundmatrix {

        private sumsurroundmatrix() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, float _x3, float _x4, float _x5, float _x6, float _x7, int _x8, MemorySegment _x9, int _x10);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(sumsurroundmatrix.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(sumsurroundmatrix.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, int _x2, float _x3, float _x4, float _x5, float _x6, float _x7, int _x8, MemorySegment _x9, int _x10) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout sumsurroundmatrix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sumsurroundmatrix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC sumsurroundmatrix
     * }
     */
    public static final AddressLayout sumsurroundmatrix$layout() {
        return sumsurroundmatrix$LAYOUT;
    }

    private static final long sumsurroundmatrix$OFFSET = $LAYOUT.byteOffset(groupElement("sumsurroundmatrix"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC sumsurroundmatrix
     * }
     */
    public static final long sumsurroundmatrix$offset() {
        return sumsurroundmatrix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC sumsurroundmatrix
     * }
     */
    public static MemorySegment sumsurroundmatrix(MemorySegment struct) {
        return struct.get(sumsurroundmatrix$LAYOUT, sumsurroundmatrix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC sumsurroundmatrix
     * }
     */
    public static void sumsurroundmatrix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sumsurroundmatrix$LAYOUT, sumsurroundmatrix$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC summonotosurroundmatrix
     * }
     */
    public final static class summonotosurroundmatrix {

        private summonotosurroundmatrix() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, float _x2, float _x3, float _x4, float _x5, int _x6, MemorySegment _x7);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(summonotosurroundmatrix.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(summonotosurroundmatrix.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, float _x2, float _x3, float _x4, float _x5, int _x6, MemorySegment _x7) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout summonotosurroundmatrix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("summonotosurroundmatrix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC summonotosurroundmatrix
     * }
     */
    public static final AddressLayout summonotosurroundmatrix$layout() {
        return summonotosurroundmatrix$LAYOUT;
    }

    private static final long summonotosurroundmatrix$OFFSET = $LAYOUT.byteOffset(groupElement("summonotosurroundmatrix"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC summonotosurroundmatrix
     * }
     */
    public static final long summonotosurroundmatrix$offset() {
        return summonotosurroundmatrix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC summonotosurroundmatrix
     * }
     */
    public static MemorySegment summonotosurroundmatrix(MemorySegment struct) {
        return struct.get(summonotosurroundmatrix$LAYOUT, summonotosurroundmatrix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC summonotosurroundmatrix
     * }
     */
    public static void summonotosurroundmatrix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(summonotosurroundmatrix$LAYOUT, summonotosurroundmatrix$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC sumstereotosurroundmatrix
     * }
     */
    public final static class sumstereotosurroundmatrix {

        private sumstereotosurroundmatrix() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, float _x2, float _x3, float _x4, float _x5, float _x6, int _x7, MemorySegment _x8);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(sumstereotosurroundmatrix.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(sumstereotosurroundmatrix.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, float _x2, float _x3, float _x4, float _x5, float _x6, int _x7, MemorySegment _x8) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7, _x8);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout sumstereotosurroundmatrix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sumstereotosurroundmatrix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC sumstereotosurroundmatrix
     * }
     */
    public static final AddressLayout sumstereotosurroundmatrix$layout() {
        return sumstereotosurroundmatrix$LAYOUT;
    }

    private static final long sumstereotosurroundmatrix$OFFSET = $LAYOUT.byteOffset(groupElement("sumstereotosurroundmatrix"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC sumstereotosurroundmatrix
     * }
     */
    public static final long sumstereotosurroundmatrix$offset() {
        return sumstereotosurroundmatrix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC sumstereotosurroundmatrix
     * }
     */
    public static MemorySegment sumstereotosurroundmatrix(MemorySegment struct) {
        return struct.get(sumstereotosurroundmatrix$LAYOUT, sumstereotosurroundmatrix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC sumstereotosurroundmatrix
     * }
     */
    public static void sumstereotosurroundmatrix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sumstereotosurroundmatrix$LAYOUT, sumstereotosurroundmatrix$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC getrolloffgain
     * }
     */
    public final static class getrolloffgain {

        private getrolloffgain() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, float _x2, float _x3, float _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_FLOAT,
            fmod_studio_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(getrolloffgain.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getrolloffgain.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, float _x2, float _x3, float _x4, MemorySegment _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getrolloffgain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getrolloffgain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC getrolloffgain
     * }
     */
    public static final AddressLayout getrolloffgain$layout() {
        return getrolloffgain$LAYOUT;
    }

    private static final long getrolloffgain$OFFSET = $LAYOUT.byteOffset(groupElement("getrolloffgain"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC getrolloffgain
     * }
     */
    public static final long getrolloffgain$offset() {
        return getrolloffgain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC getrolloffgain
     * }
     */
    public static MemorySegment getrolloffgain(MemorySegment struct) {
        return struct.get(getrolloffgain$LAYOUT, getrolloffgain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC getrolloffgain
     * }
     */
    public static void getrolloffgain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getrolloffgain$LAYOUT, getrolloffgain$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

