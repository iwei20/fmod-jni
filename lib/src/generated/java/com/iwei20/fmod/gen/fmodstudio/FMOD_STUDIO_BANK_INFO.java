// Generated by jextract

package com.iwei20.fmod.gen.fmodstudio;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_STUDIO_BANK_INFO {
 *     int size;
 *     void *userdata;
 *     int userdatalength;
 *     FMOD_FILE_OPEN_CALLBACK opencallback;
 *     FMOD_FILE_CLOSE_CALLBACK closecallback;
 *     FMOD_FILE_READ_CALLBACK readcallback;
 *     FMOD_FILE_SEEK_CALLBACK seekcallback;
 * }
 * }
 */
public class FMOD_STUDIO_BANK_INFO {

    FMOD_STUDIO_BANK_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fmod_studio_h.C_INT.withName("size"),
        MemoryLayout.paddingLayout(4),
        fmod_studio_h.C_POINTER.withName("userdata"),
        fmod_studio_h.C_INT.withName("userdatalength"),
        MemoryLayout.paddingLayout(4),
        fmod_studio_h.C_POINTER.withName("opencallback"),
        fmod_studio_h.C_POINTER.withName("closecallback"),
        fmod_studio_h.C_POINTER.withName("readcallback"),
        fmod_studio_h.C_POINTER.withName("seekcallback")
    ).withName("FMOD_STUDIO_BANK_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = $LAYOUT.byteOffset(groupElement("size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final AddressLayout userdata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userdata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static final AddressLayout userdata$layout() {
        return userdata$LAYOUT;
    }

    private static final long userdata$OFFSET = $LAYOUT.byteOffset(groupElement("userdata"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static final long userdata$offset() {
        return userdata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static MemorySegment userdata(MemorySegment struct) {
        return struct.get(userdata$LAYOUT, userdata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static void userdata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userdata$LAYOUT, userdata$OFFSET, fieldValue);
    }

    private static final OfInt userdatalength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("userdatalength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int userdatalength
     * }
     */
    public static final OfInt userdatalength$layout() {
        return userdatalength$LAYOUT;
    }

    private static final long userdatalength$OFFSET = $LAYOUT.byteOffset(groupElement("userdatalength"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int userdatalength
     * }
     */
    public static final long userdatalength$offset() {
        return userdatalength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int userdatalength
     * }
     */
    public static int userdatalength(MemorySegment struct) {
        return struct.get(userdatalength$LAYOUT, userdatalength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int userdatalength
     * }
     */
    public static void userdatalength(MemorySegment struct, int fieldValue) {
        struct.set(userdatalength$LAYOUT, userdatalength$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_FILE_OPEN_CALLBACK opencallback
     * }
     */
    public final static class opencallback {

        private opencallback() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(opencallback.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(opencallback.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout opencallback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("opencallback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_FILE_OPEN_CALLBACK opencallback
     * }
     */
    public static final AddressLayout opencallback$layout() {
        return opencallback$LAYOUT;
    }

    private static final long opencallback$OFFSET = $LAYOUT.byteOffset(groupElement("opencallback"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_FILE_OPEN_CALLBACK opencallback
     * }
     */
    public static final long opencallback$offset() {
        return opencallback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_FILE_OPEN_CALLBACK opencallback
     * }
     */
    public static MemorySegment opencallback(MemorySegment struct) {
        return struct.get(opencallback$LAYOUT, opencallback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_FILE_OPEN_CALLBACK opencallback
     * }
     */
    public static void opencallback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(opencallback$LAYOUT, opencallback$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_FILE_CLOSE_CALLBACK closecallback
     * }
     */
    public final static class closecallback {

        private closecallback() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(closecallback.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(closecallback.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout closecallback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("closecallback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_FILE_CLOSE_CALLBACK closecallback
     * }
     */
    public static final AddressLayout closecallback$layout() {
        return closecallback$LAYOUT;
    }

    private static final long closecallback$OFFSET = $LAYOUT.byteOffset(groupElement("closecallback"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_FILE_CLOSE_CALLBACK closecallback
     * }
     */
    public static final long closecallback$offset() {
        return closecallback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_FILE_CLOSE_CALLBACK closecallback
     * }
     */
    public static MemorySegment closecallback(MemorySegment struct) {
        return struct.get(closecallback$LAYOUT, closecallback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_FILE_CLOSE_CALLBACK closecallback
     * }
     */
    public static void closecallback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(closecallback$LAYOUT, closecallback$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_FILE_READ_CALLBACK readcallback
     * }
     */
    public final static class readcallback {

        private readcallback() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(readcallback.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(readcallback.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout readcallback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("readcallback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_FILE_READ_CALLBACK readcallback
     * }
     */
    public static final AddressLayout readcallback$layout() {
        return readcallback$LAYOUT;
    }

    private static final long readcallback$OFFSET = $LAYOUT.byteOffset(groupElement("readcallback"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_FILE_READ_CALLBACK readcallback
     * }
     */
    public static final long readcallback$offset() {
        return readcallback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_FILE_READ_CALLBACK readcallback
     * }
     */
    public static MemorySegment readcallback(MemorySegment struct) {
        return struct.get(readcallback$LAYOUT, readcallback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_FILE_READ_CALLBACK readcallback
     * }
     */
    public static void readcallback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(readcallback$LAYOUT, readcallback$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * FMOD_FILE_SEEK_CALLBACK seekcallback
     * }
     */
    public final static class seekcallback {

        private seekcallback() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER,
            fmod_studio_h.C_INT,
            fmod_studio_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = fmod_studio_h.upcallHandle(seekcallback.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(seekcallback.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout seekcallback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seekcallback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_FILE_SEEK_CALLBACK seekcallback
     * }
     */
    public static final AddressLayout seekcallback$layout() {
        return seekcallback$LAYOUT;
    }

    private static final long seekcallback$OFFSET = $LAYOUT.byteOffset(groupElement("seekcallback"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_FILE_SEEK_CALLBACK seekcallback
     * }
     */
    public static final long seekcallback$offset() {
        return seekcallback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_FILE_SEEK_CALLBACK seekcallback
     * }
     */
    public static MemorySegment seekcallback(MemorySegment struct) {
        return struct.get(seekcallback$LAYOUT, seekcallback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_FILE_SEEK_CALLBACK seekcallback
     * }
     */
    public static void seekcallback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seekcallback$LAYOUT, seekcallback$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

