package com.fmod;
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public final class FMOD_DSP_MULTIBAND_DYNAMICS {
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_LOWER_FREQUENCY = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_LOWER_FREQUENCY");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_UPPER_FREQUENCY = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_UPPER_FREQUENCY");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_LINKED = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_LINKED");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_USE_SIDECHAIN = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_USE_SIDECHAIN");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_A_MODE = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_A_MODE");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_A_THRESHOLD = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_A_THRESHOLD");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_A_RATIO = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_A_RATIO");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_A_ATTACK = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_A_ATTACK");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_A_RELEASE = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_A_RELEASE");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN_MAKEUP = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN_MAKEUP");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_A_RESPONSE_DATA = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_A_RESPONSE_DATA");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_B_MODE = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_B_MODE");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_B_THRESHOLD = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_B_THRESHOLD");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_B_RATIO = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_B_RATIO");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_B_ATTACK = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_B_ATTACK");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_B_RELEASE = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_B_RELEASE");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN_MAKEUP = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN_MAKEUP");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_B_RESPONSE_DATA = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_B_RESPONSE_DATA");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_C_MODE = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_C_MODE");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_C_THRESHOLD = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_C_THRESHOLD");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_C_RATIO = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_C_RATIO");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_C_ATTACK = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_C_ATTACK");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_C_RELEASE = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_C_RELEASE");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN_MAKEUP = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN_MAKEUP");
  public final static FMOD_DSP_MULTIBAND_DYNAMICS FMOD_DSP_MULTIBAND_DYNAMICS_C_RESPONSE_DATA = new FMOD_DSP_MULTIBAND_DYNAMICS("FMOD_DSP_MULTIBAND_DYNAMICS_C_RESPONSE_DATA");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static FMOD_DSP_MULTIBAND_DYNAMICS swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + FMOD_DSP_MULTIBAND_DYNAMICS.class + " with value " + swigValue);
  }

  private FMOD_DSP_MULTIBAND_DYNAMICS(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private FMOD_DSP_MULTIBAND_DYNAMICS(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private FMOD_DSP_MULTIBAND_DYNAMICS(String swigName, FMOD_DSP_MULTIBAND_DYNAMICS swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static FMOD_DSP_MULTIBAND_DYNAMICS[] swigValues = { FMOD_DSP_MULTIBAND_DYNAMICS_LOWER_FREQUENCY, FMOD_DSP_MULTIBAND_DYNAMICS_UPPER_FREQUENCY, FMOD_DSP_MULTIBAND_DYNAMICS_LINKED, FMOD_DSP_MULTIBAND_DYNAMICS_USE_SIDECHAIN, FMOD_DSP_MULTIBAND_DYNAMICS_A_MODE, FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN, FMOD_DSP_MULTIBAND_DYNAMICS_A_THRESHOLD, FMOD_DSP_MULTIBAND_DYNAMICS_A_RATIO, FMOD_DSP_MULTIBAND_DYNAMICS_A_ATTACK, FMOD_DSP_MULTIBAND_DYNAMICS_A_RELEASE, FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN_MAKEUP, FMOD_DSP_MULTIBAND_DYNAMICS_A_RESPONSE_DATA, FMOD_DSP_MULTIBAND_DYNAMICS_B_MODE, FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN, FMOD_DSP_MULTIBAND_DYNAMICS_B_THRESHOLD, FMOD_DSP_MULTIBAND_DYNAMICS_B_RATIO, FMOD_DSP_MULTIBAND_DYNAMICS_B_ATTACK, FMOD_DSP_MULTIBAND_DYNAMICS_B_RELEASE, FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN_MAKEUP, FMOD_DSP_MULTIBAND_DYNAMICS_B_RESPONSE_DATA, FMOD_DSP_MULTIBAND_DYNAMICS_C_MODE, FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN, FMOD_DSP_MULTIBAND_DYNAMICS_C_THRESHOLD, FMOD_DSP_MULTIBAND_DYNAMICS_C_RATIO, FMOD_DSP_MULTIBAND_DYNAMICS_C_ATTACK, FMOD_DSP_MULTIBAND_DYNAMICS_C_RELEASE, FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN_MAKEUP, FMOD_DSP_MULTIBAND_DYNAMICS_C_RESPONSE_DATA };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

